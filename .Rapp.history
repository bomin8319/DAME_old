p[[1]]
ggplot(data=data, aes(x=day, y=send)) + geom_bar(stat="identity") + geom_line(aes(x=day, y=num_receiver, group = 1))+ theme(axis.title.x=element_blank())
p[[1]]<-ggplot(data=data, aes(x=day, y=send)) + geom_bar(stat="identity") + geom_line(aes(x=day, y=num_receiver, group = 1))+  labs(x="", y="")
p[[1]]
ggplot(data=data, aes(x=day, y=send)) + geom_bar(stat="identity", aes(col = "blue")) + geom_line(aes(x=day, y=num_receiver, group = 1))+labs(x="", y="")
ggplot(data=data, aes(x=day, y=send)) + geom_bar(stat="identity",col = "blue") + geom_line(aes(x=day, y=num_receiver, group = 1))+labs(x="", y="")
p[[1]]<-ggplot(data=data, aes(x=day, y=send)) + geom_bar(stat="identity",fill = "blue") + geom_line(aes(x=day, y=num_receiver, group = 1))+labs(x="", y="")
ggplot(data=data, aes(x=day, y=send)) + geom_bar(stat="identity",fill = "blue") + geom_line(aes(x=day, y=num_receiver, group = 1))+labs(x="", y="")
ggplot(data=data, aes(x=day, y=send)) + geom_bar(stat="identity",fill = "steelblue") + geom_line(aes(x=day, y=num_receiver, group = 1))+labs(x="", y="")+theme_minimal()
ggplot(data=data, aes(x=day, y=send)) + geom_bar(stat="identity",fill = "steelblue") + geom_line(aes(x=day, y=num_receiver, group = 1), col = "red")+labs(x="", y="")+theme_minimal()
ggplot(data=data, aes(x=day, y=send)) + geom_bar(stat="identity",fill = "steelblue") + geom_line(aes(x=day, y=num_receiver, group = 1), col = "red")+labs(x="", y="")+theme_minimal()+ scale_x_discrete(breaks = function(n) n[seq(0, length(n), by = length(n)/10)])
ggplot(data=data, aes(x=day, y=send)) + geom_bar(stat="identity",fill = "steelblue") + geom_line(aes(x=day, y=num_receiver, group = 1), col = "red")+labs(x="", y="")+theme_minimal()+ scale_x_discrete(breaks = function(n) n[seq(0, length(n), by = length(n)/8)])
ggplot(data=data, aes(x=day, y=send)) + geom_bar(stat="identity",fill = "steelblue") + geom_line(aes(x=day, y=num_receiver, group = 1), col = "red")+labs(x="", y="")+theme_minimal()+ scale_x_discrete(breaks = function(n) n[seq(1, length(n), by = length(n)/8)])
ggplot(data=data, aes(x=day, y=send)) + geom_bar(stat="identity",fill = "steelblue") + geom_line(aes(x=day, y=num_receiver, group = 1), col = "red")+labs(x="", y="")+theme_minimal()+ scale_x_discrete(breaks = function(n) n[seq(1, length(n), by = length(n)/10)])
ggplot(data=data, aes(x=day, y=send)) + geom_bar(stat="identity",fill = "steelblue") + geom_line(aes(x=day, y=num_receiver, group = 1), col = "red")+labs(x="", y="")+theme_minimal()+ scale_x_discrete(breaks = function(n) n[seq(1, length(n)+1, by = length(n)/10)])
ggplot(data=data, aes(x=day, y=send)) + geom_bar(stat="identity",fill = "steelblue") + geom_line(aes(x=day, y=num_receiver, group = 1), col = "red")+labs(x="", y="")+theme_minimal()+ scale_x_discrete(breaks = function(n) n[seq(1, length(n)+n, by = length(n)/10)])
ggplot(data=data, aes(x=day, y=send)) + geom_bar(stat="identity",fill = "steelblue") + geom_line(aes(x=day, y=num_receiver, group = 1), col = "red")+labs(x="", y="")+theme_minimal()+ scale_x_discrete(breaks = function(n) n[seq(1, length(n), by = (length(n)+1)/10)])
ggplot(data=data, aes(x=day, y=send)) + geom_bar(stat="identity",fill = "steelblue") + geom_line(aes(x=day, y=num_receiver, group = 1), col = "red")+labs(x="", y="")+theme_minimal()+ scale_x_discrete(breaks = function(n) n[seq(1, length(n), by = (length(n)+10)/10)])
ggplot(data=data, aes(x=day, y=send)) + geom_bar(stat="identity",fill = "steelblue") + geom_line(aes(x=day, y=num_receiver, group = 1), col = "red")+labs(x="", y="")+theme_minimal()+ scale_x_discrete(breaks = function(n) n[seq(1, length(n), by = (length(n)+11)/10)])
ggplot(data=data, aes(x=day, y=send)) + geom_bar(stat="identity",fill = "steelblue") + geom_line(aes(x=day, y=num_receiver, group = 1), col = "red")+labs(x="", y="")+theme_minimal()+ scale_x_discrete(breaks = function(n) n[seq(1, length(n), by = length(n)/10)])
ggplot(data=data, aes(x=day, y=send)) + geom_bar(stat="identity",fill = "steelblue") + geom_line(aes(x=day, y=num_receiver, group = 1, colour="#FF9999"))+labs(x="", y="")+theme_minimal()+ scale_x_discrete(breaks = function(n) n[seq(1, length(n), by = length(n)/10)])
ggplot(data=data, aes(x=day, y=send)) + geom_bar(stat="identity",fill = "steelblue") + geom_line(aes(x=day, y=num_receiver, group = 1, colour="#FF9999"))+labs(x="", y="")+theme_minimal()+ scale_x_discrete(breaks = function(n) n[seq(1, length(n), by = length(n)/10)]) +scale_fill_discrete(guide=FALSE)
ggplot(data=data, aes(x=day, y=send)) + geom_bar(stat="identity",fill = "steelblue") + geom_line(aes(x=day, y=num_receiver, group = 1, colour="#FF9999"), show.legned = F)+labs(x="", y="")+theme_minimal()+ scale_x_discrete(breaks = function(n) n[seq(1, length(n), by = length(n)/10)])
ggplot(data=data, aes(x=day, y=send)) + geom_bar(stat="identity",fill = "steelblue") + geom_line(aes(x=day, y=num_receiver, group = 1, colour="#FF9999"), show.legend = F)+labs(x="", y="")+theme_minimal()+ scale_x_discrete(breaks = function(n) n[seq(1, length(n), by = length(n)/10)])
byday = rep(0, length(unique(day)))#
names(byday)  = unique(day)#
i = 1#
for (d in unique(day)) {#
	docs = which(day == d)#
	byday[i] = sum(senders[docs] == 1)#
	i = i + 1#
}#
#
byday2 = rep(0, length(unique(day)))#
names(byday2)  = unique(day2)#
i = 1#
for (d in unique(day)) {#
	docs = which(day == d)#
	byday2[i] = sum(receivers[docs][senders[docs] == 1])#
	i = i + 1#
}#
#
words = unlist(lapply(which(senders==1), function(x) Dare$text[[x]]))#
tabulate(words)#
Dare$vocab[which(tabulate(words)>30)]#
#
data = data.frame(day = as.factor(unique(day)), send = byday, num_receiver = byday2)#
p[[1]]<-ggplot(data=data, aes(x=day, y=send)) + geom_bar(stat="identity",fill = "steelblue") + geom_line(aes(x=day, y=num_receiver, group = 1, colour="#FF9999"), show.legend = F)+labs(x="", y="")+theme_minimal()+ scale_x_discrete(breaks = function(n) n[seq(1, length(n), by = length(n)/10)])#
#emails sent by Emergency Services official (node 4) --- total 325#
byday = rep(0, length(unique(day)))#
names(byday)  = unique(day)#
i = 1#
for (d in unique(day)) {#
	docs = which(day == d)#
	byday[i] = sum(senders[docs] == 4)#
	i = i + 1#
}#
byday2 = rep(0, length(unique(day)))#
names(byday2)  = unique(day2)#
i = 1#
for (d in unique(day)) {#
	docs = which(day == d)#
	byday2[i] = sum(receivers[docs][senders[docs] == 4])#
	i = i + 1#
}#
#
words = unlist(lapply(which(senders==4), function(x) Dare$text[[x]]))#
tabulate(words)#
Dare$vocab[which(tabulate(words)>20)]#
#
data = data.frame(day = as.factor(unique(day)), send = byday, num_receiver = byday2)#
p[[2]]<-ggplot(data=data, aes(x=day, y=send)) + geom_bar(stat="identity",fill = "steelblue") + geom_line(aes(x=day, y=num_receiver, group = 1, colour="#FF9999"), show.legend = F)+labs(x="", y="")+theme_minimal()+ scale_x_discrete(breaks = function(n) n[seq(1, length(n), by = length(n)/10)])#
marrangeGrob(p[1:2], nrow = 2, ncol = 1, top = NULL)
p[[2]]<-ggplot(data=data, aes(x=day, y=send)) + geom_bar(stat="identity",fill = "#009E73") + geom_line(aes(x=day, y=num_receiver, group = 1, colour="#FF9999"), show.legend = F)+labs(x="", y="")+theme_minimal()+ scale_x_discrete(breaks = function(n) n[seq(1, length(n), by = length(n)/10)])#
marrangeGrob(p[1:2], nrow = 2, ncol = 1, top = NULL)
ggplot(data=data, aes(x=day, y=send)) + geom_bar(stat="identity",fill = "steelblue") + geom_line(aes(x=day, y=num_receiver, group = 1, colour="#FF9999"), show.legend = F)+labs(x="", y="")+theme_minimal()+ scale_x_discrete(breaks = function(n) n[seq(1, length(n), by = length(n)/10)])+annotate(geom="text", x=70, y=20, label="Scatter plot",#
              color="red")
byday = rep(0, length(unique(day)))#
names(byday)  = unique(day)#
i = 1#
for (d in unique(day)) {#
	docs = which(day == d)#
	byday[i] = sum(senders[docs] == 1)#
	i = i + 1#
}#
#
byday2 = rep(0, length(unique(day)))#
names(byday2)  = unique(day2)#
i = 1#
for (d in unique(day)) {#
	docs = which(day == d)#
	byday2[i] = sum(receivers[docs][senders[docs] == 1])#
	i = i + 1#
}#
#
words = unlist(lapply(which(senders==1), function(x) Dare$text[[x]]))#
tabulate(words)#
Dare$vocab[which(tabulate(words)>30)]#
#
data = data.frame(day = as.factor(unique(day)), send = byday, num_receiver = byday2)#
p[[1]]<-ggplot(data=data, aes(x=day, y=send)) + geom_bar(stat="identity",fill = "steelblue") + geom_line(aes(x=day, y=num_receiver, group = 1, colour="#FF9999"), show.legend = F)+labs(x="", y="")+theme_minimal()+ scale_x_discrete(breaks = function(n) n[seq(1, length(n), by = length(n)/10)])+annotate(geom="text", x=70, y=20, label="Author: County Manager",color="steelblue")#
#emails sent by Emergency Services official (node 4) --- total 325#
byday = rep(0, length(unique(day)))#
names(byday)  = unique(day)#
i = 1#
for (d in unique(day)) {#
	docs = which(day == d)#
	byday[i] = sum(senders[docs] == 4)#
	i = i + 1#
}#
byday2 = rep(0, length(unique(day)))#
names(byday2)  = unique(day2)#
i = 1#
for (d in unique(day)) {#
	docs = which(day == d)#
	byday2[i] = sum(receivers[docs][senders[docs] == 4])#
	i = i + 1#
}#
#
words = unlist(lapply(which(senders==4), function(x) Dare$text[[x]]))#
tabulate(words)#
Dare$vocab[which(tabulate(words)>20)]#
#
data = data.frame(day = as.factor(unique(day)), send = byday, num_receiver = byday2)#
p[[2]]<-ggplot(data=data, aes(x=day, y=send)) + geom_bar(stat="identity",fill = "#009E73") + geom_line(aes(x=day, y=num_receiver, group = 1, colour="#FF9999"), show.legend = F)+labs(x="", y="")+theme_minimal()+ scale_x_discrete(breaks = function(n) n[seq(1, length(n), by = length(n)/10)])+annotate(geom="text", x=70, y=200, label="Author: Emergency Department",color="#009E73")
byday = rep(0, length(unique(day)))#
names(byday)  = unique(day)#
i = 1#
for (d in unique(day)) {#
	docs = which(day == d)#
	byday[i] = sum(senders[docs] == 1)#
	i = i + 1#
}#
#
byday2 = rep(0, length(unique(day)))#
names(byday2)  = unique(day2)#
i = 1#
for (d in unique(day)) {#
	docs = which(day == d)#
	byday2[i] = sum(receivers[docs][senders[docs] == 1])#
	i = i + 1#
}#
#
words = unlist(lapply(which(senders==1), function(x) Dare$text[[x]]))#
tabulate(words)#
Dare$vocab[which(tabulate(words)>30)]#
#
data = data.frame(day = as.factor(unique(day)), send = byday, num_receiver = byday2)#
p[[1]]<-ggplot(data=data, aes(x=day, y=send)) + geom_bar(stat="identity",fill = "steelblue") + geom_line(aes(x=day, y=num_receiver, group = 1, colour="#FF9999"), show.legend = F)+labs(x="", y="")+theme_minimal()+ scale_x_discrete(breaks = function(n) n[seq(1, length(n), by = length(n)/10)])+annotate(geom="text", x=70, y=20, label="Author: County Manager",color="steelblue")#
#emails sent by Emergency Services official (node 4) --- total 325#
byday = rep(0, length(unique(day)))#
names(byday)  = unique(day)#
i = 1#
for (d in unique(day)) {#
	docs = which(day == d)#
	byday[i] = sum(senders[docs] == 4)#
	i = i + 1#
}#
byday2 = rep(0, length(unique(day)))#
names(byday2)  = unique(day2)#
i = 1#
for (d in unique(day)) {#
	docs = which(day == d)#
	byday2[i] = sum(receivers[docs][senders[docs] == 4])#
	i = i + 1#
}#
#
words = unlist(lapply(which(senders==4), function(x) Dare$text[[x]]))#
tabulate(words)#
Dare$vocab[which(tabulate(words)>20)]#
#
data = data.frame(day = as.factor(unique(day)), send = byday, num_receiver = byday2)#
p[[2]]<-ggplot(data=data, aes(x=day, y=send)) + geom_bar(stat="identity",fill = "#009E73") + geom_line(aes(x=day, y=num_receiver, group = 1, colour="#FF9999"), show.legend = F)+labs(x="", y="")+theme_minimal()+ scale_x_discrete(breaks = function(n) n[seq(1, length(n), by = length(n)/10)])+annotate(geom="text", x=70, y=200, label="Author: Emergency Department",color="#009E73")#
marrangeGrob(p[1:2], nrow = 2, ncol = 1, top = NULL)
ggplot(data=data, aes(x=day, y=send)) + geom_bar(stat="identity",fill = "steelblue") + geom_line(aes(x=day, y=num_receiver, group = 1, colour="#FF9999"), show.legend = F)+labs(x="", y="")+theme_minimal()+ scale_x_discrete(breaks = function(n) n[seq(1, length(n), by = length(n)/10)])+annotate(geom="text", size = 1, x=70, y=25, label="Author: County Manager",color="steelblue")
ggplot(data=data, aes(x=day, y=send)) + geom_bar(stat="identity",fill = "steelblue") + geom_line(aes(x=day, y=num_receiver, group = 1, colour="#FF9999"), show.legend = F)+labs(x="", y="")+theme_minimal()+ scale_x_discrete(breaks = function(n) n[seq(1, length(n), by = length(n)/10)])+annotate(geom="text", size = 5, x=70, y=25, label="Author: County Manager",color="steelblue")
ggplot(data=data, aes(x=day, y=send)) + geom_bar(stat="identity",fill = "steelblue") + geom_line(aes(x=day, y=num_receiver, group = 1, colour="#FF9999"), show.legend = F)+labs(x="", y="")+theme_minimal()+ scale_x_discrete(breaks = function(n) n[seq(1, length(n), by = length(n)/10)])+annotate(geom="text", size = 3, x=70, y=25, label="Author: County Manager",color="steelblue")
byday = rep(0, length(unique(day)))#
names(byday)  = unique(day)#
i = 1#
for (d in unique(day)) {#
	docs = which(day == d)#
	byday[i] = sum(senders[docs] == 1)#
	i = i + 1#
}#
#
byday2 = rep(0, length(unique(day)))#
names(byday2)  = unique(day2)#
i = 1#
for (d in unique(day)) {#
	docs = which(day == d)#
	byday2[i] = sum(receivers[docs][senders[docs] == 1])#
	i = i + 1#
}#
#
words = unlist(lapply(which(senders==1), function(x) Dare$text[[x]]))#
tabulate(words)#
Dare$vocab[which(tabulate(words)>30)]#
#
data = data.frame(day = as.factor(unique(day)), send = byday, num_receiver = byday2)#
p[[1]]<-ggplot(data=data, aes(x=day, y=send)) + geom_bar(stat="identity",fill = "steelblue") + geom_line(aes(x=day, y=num_receiver, group = 1, colour="#FF9999"), show.legend = F)+labs(x="", y="")+theme_minimal()+ scale_x_discrete(breaks = function(n) n[seq(1, length(n), by = length(n)/10)])+annotate(geom="text", size = 3, x=70, y=25, label="Author: County Manager",color="steelblue")#
#emails sent by Emergency Services official (node 4) --- total 325#
byday = rep(0, length(unique(day)))#
names(byday)  = unique(day)#
i = 1#
for (d in unique(day)) {#
	docs = which(day == d)#
	byday[i] = sum(senders[docs] == 4)#
	i = i + 1#
}#
byday2 = rep(0, length(unique(day)))#
names(byday2)  = unique(day2)#
i = 1#
for (d in unique(day)) {#
	docs = which(day == d)#
	byday2[i] = sum(receivers[docs][senders[docs] == 4])#
	i = i + 1#
}#
#
words = unlist(lapply(which(senders==4), function(x) Dare$text[[x]]))#
tabulate(words)#
Dare$vocab[which(tabulate(words)>20)]#
#
data = data.frame(day = as.factor(unique(day)), send = byday, num_receiver = byday2)#
p[[2]]<-ggplot(data=data, aes(x=day, y=send)) + geom_bar(stat="identity",fill = "#009E73") + geom_line(aes(x=day, y=num_receiver, group = 1, colour="#FF9999"), show.legend = F)+labs(x="", y="")+theme_minimal()+ scale_x_discrete(breaks = function(n) n[seq(1, length(n), by = length(n)/10)])+annotate(geom="text", size = 3, x=70, y=200, label="Author: Emergency Department",color="#009E73")
marrangeGrob(p[1:2], nrow = 2, ncol = 1, top = NULL)
p[[2]]<-ggplot(data=data, aes(x=day, y=send)) + geom_bar(stat="identity",fill = "#009E73") + geom_line(aes(x=day, y=num_receiver, group = 1, colour="#FF9999"), show.legend = F)+labs(x="", y="")+theme_minimal()+ scale_x_discrete(breaks = function(n) n[seq(1, length(n), by = length(n)/10)])+annotate(geom="text", size = 3, x=70, y=175, label="Author: Emergency Department",color="#009E73")
marrangeGrob(p[1:2], nrow = 2, ncol = 1, top = NULL)
p[[2]]<-ggplot(data=data, aes(x=day, y=send)) + geom_bar(stat="identity",fill = "#009E73") + geom_line(aes(x=day, y=num_receiver, group = 1, colour="#FF9999"), show.legend = F)+labs(x="", y="")+theme_minimal()+ scale_x_discrete(breaks = function(n) n[seq(1, length(n), by = length(n)/10)])+annotate(geom="text", size = 3, x=70, y=178, label="Author: Emergency Department",color="#009E73")#
marrangeGrob(p[1:2], nrow = 2, ncol = 1, top = NULL)
marrangeGrob(p[1:2], nrow = 2, ncol = 1, top = NULL)
time = c(Dare$edge[[1]]$unixtime, sapply(2:2247, function(x) Dare$edge[[x]]$unixtime-Dare$edge[[x-1]]$unixtime))
time
load('~/Desktop/IPTM/experiment/Dare_PPE/Darenew.RData')
library(ggplot2)#
library(lubridate)#
library(anytime)#
library(gridExtra)#
senders = sapply(1:2247, function(x) Dare$edge[[x]]$sender)#
receivers = sapply(1:2247, function(x) length(Dare$edge[[x]]$receiver))#
time = c(Dare$edge[[1]]$unixtime, sapply(2:2247, function(x) Dare$edge[[x]]$unixtime-Dare$edge[[x-1]]$unixtime))
time
time = time / 3600
time
day = sapply(1:2247, function(x) format(anytime(Dare$edge[[x]]$unixtime, tz = "America/New_York"), format = "%m/%d"))
byday = rep(0, length(unique(day)))#
names(byday)  = unique(day)#
i = 1#
for (d in unique(day)) {#
	docs = which(day == d)#
	byday[i] = sum(senders[docs] == 1)#
	i = i + 1#
}#
#
byday2 = rep(0, length(unique(day)))#
names(byday2)  = unique(day2)#
i = 1#
for (d in unique(day)) {#
	docs = which(day == d)#
	byday2[i] = sum(receivers[docs][senders[docs] == 1])#
	i = i + 1#
}#
#
words = unlist(lapply(which(senders==1), function(x) Dare$text[[x]]))#
tabulate(words)#
Dare$vocab[which(tabulate(words)>30)]#
#
data = data.frame(day = as.factor(unique(day)), send = byday, num_receiver = byday2)#
p[[1]]<-ggplot(data=data, aes(x=day, y=send)) + geom_bar(stat="identity",fill = "steelblue") + geom_line(aes(x=day, y=num_receiver, group = 1, colour="#FF9999"), show.legend = F)+labs(x="", y="")+theme_minimal()+ scale_x_discrete(breaks = function(n) n[seq(1, length(n), by = length(n)/10)])+annotate(geom="text", size = 3, x=70, y=25, label="Author: County Manager",color="steelblue")#
#emails sent by Emergency Services official (node 4) --- total 325#
byday = rep(0, length(unique(day)))#
names(byday)  = unique(day)#
i = 1#
for (d in unique(day)) {#
	docs = which(day == d)#
	byday[i] = sum(senders[docs] == 4)#
	i = i + 1#
}#
byday2 = rep(0, length(unique(day)))#
names(byday2)  = unique(day2)#
i = 1#
for (d in unique(day)) {#
	docs = which(day == d)#
	byday2[i] = sum(receivers[docs][senders[docs] == 4])#
	i = i + 1#
}#
#
words = unlist(lapply(which(senders==4), function(x) Dare$text[[x]]))#
tabulate(words)#
Dare$vocab[which(tabulate(words)>20)]#
#
data = data.frame(day = as.factor(unique(day)), send = byday, num_receiver = byday2)#
p[[2]]<-ggplot(data=data, aes(x=day, y=send)) + geom_bar(stat="identity",fill = "#009E73") + geom_line(aes(x=day, y=num_receiver, group = 1, colour="#FF9999"), show.legend = F)+labs(x="", y="")+theme_minimal()+ scale_x_discrete(breaks = function(n) n[seq(1, length(n), by = length(n)/10)])+annotate(geom="text", size = 3, x=70, y=178, label="Author: Emergency Department",color="#009E73")#
marrangeGrob(p[1:2], nrow = 2, ncol = 1, top = NULL)
summary(time[which(senders==1)])
summary(time[which(senders==4)])
hist(time[which(senders==1))
hist(time[which(senders==1)])
hist(log(time[which(senders==1)]))
hist(log(time[which(senders==4)]))
hist(time[which(senders==1)])
hist(time[which(senders==4)])
hist(time[which(senders==1)])
hist(log(time[which(senders==1)]))
hist(log(time[which(senders==4)]))
summary(time[which(senders==1)])#
summary(time[which(senders==4)])
marrangeGrob(p[1:2], nrow = 2, ncol = 1, top = NULL)
byday = rep(0, length(unique(day)))#
names(byday)  = unique(day)#
i = 1#
for (d in unique(day)) {#
	docs = which(day == d)#
	byday[i] = sum(senders[docs] == 1)#
	i = i + 1#
}#
#
byday2 = rep(0, length(unique(day)))#
names(byday2)  = unique(day2)#
i = 1#
for (d in unique(day)) {#
	docs = which(day == d)#
	byday2[i] = sum(receivers[docs][senders[docs] == 1])#
	i = i + 1#
}#
#
words = unlist(lapply(which(senders==1), function(x) Dare$text[[x]]))#
tabulate(words)#
Dare$vocab[which(tabulate(words)>30)]#
#
data = data.frame(day = as.factor(unique(day)), send = byday, num_receiver = byday2)#
p[[1]]<-ggplot(data=data, aes(x=day, y=send)) + geom_bar(stat="identity",fill = "steelblue") + geom_line(aes(x=day, y=num_receiver, group = 1, colour="#FF9999"), show.legend = F)+labs(x="", y="")+theme_minimal()+ scale_x_discrete(breaks = function(n) n[seq(1, length(n), by = length(n)/10)])+annotate(geom="text", size = 3, x=70, y=25, label="Author: County Manager",color="steelblue")#
#
summary(time[which(senders==1)])#
summary(time[which(senders==4)])#
#emails sent by Emergency Services official (node 4) --- total 325#
byday = rep(0, length(unique(day)))#
names(byday)  = unique(day)#
i = 1#
for (d in unique(day)) {#
	docs = which(day == d)#
	byday[i] = sum(senders[docs] == 4)#
	i = i + 1#
}#
byday2 = rep(0, length(unique(day)))#
names(byday2)  = unique(day2)#
i = 1#
for (d in unique(day)) {#
	docs = which(day == d)#
	byday2[i] = sum(receivers[docs][senders[docs] == 4])#
	i = i + 1#
}#
#
words = unlist(lapply(which(senders==4), function(x) Dare$text[[x]]))#
tabulate(words)#
Dare$vocab[which(tabulate(words)>20)]#
#
data = data.frame(day = as.factor(unique(day)), send = byday, num_receiver = byday2)#
p[[2]]<-ggplot(data=data, aes(x=day, y=send)) + geom_bar(stat="identity",fill = "#009E73") + geom_line(aes(x=day, y=num_receiver, group = 1, colour="#FF9999"), show.legend = F)+labs(x="", y="")+theme_minimal()+ scale_x_discrete(breaks = function(n) n[seq(1, length(n), by = length(n)/10)])+annotate(geom="text", size = 3, x=70, y=178, label="Author: Emergency Department",color="#009E73")#
marrangeGrob(p[1:2], nrow = 2, ncol = 1, top = NULL)
byday = rep(0, length(unique(day)))#
names(byday)  = unique(day)#
i = 1#
for (d in unique(day)) {#
	docs = which(day == d)#
	byday[i] = sum(senders[docs] == 1)#
	i = i + 1#
}#
#
byday2 = rep(0, length(unique(day)))#
names(byday2)  = unique(day2)#
i = 1#
for (d in unique(day)) {#
	docs = which(day == d)#
	byday2[i] = sum(receivers[docs][senders[docs] == 1])#
	i = i + 1#
}#
#
words = unlist(lapply(which(senders==1), function(x) Dare$text[[x]]))#
Dare$vocab[which(tabulate(words)>30)]#
#
data = data.frame(day = as.factor(unique(day)), send = byday, num_receiver = byday2)#
p[[1]]<-ggplot(data=data, aes(x=day, y=send)) + geom_bar(stat="identity",fill = "steelblue") + geom_line(aes(x=day, y=num_receiver, group = 1, colour="#FF9999"), show.legend = F)+labs(x="", y="")+theme_minimal()+ scale_x_discrete(breaks = function(n) n[seq(1, length(n), by = length(n)/10)])+annotate(geom="text", size = 3, x=70, y=25, label="Author: County Manager",color="steelblue")#
#
summary(time[which(senders==1)])#
summary(time[which(senders==4)])#
#emails sent by Emergency Services official (node 4) --- total 325#
byday = rep(0, length(unique(day)))#
names(byday)  = unique(day)#
i = 1#
for (d in unique(day)) {#
	docs = which(day == d)#
	byday[i] = sum(senders[docs] == 4)#
	i = i + 1#
}#
byday2 = rep(0, length(unique(day)))#
names(byday2)  = unique(day2)#
i = 1#
for (d in unique(day)) {#
	docs = which(day == d)#
	byday2[i] = sum(receivers[docs][senders[docs] == 4])#
	i = i + 1#
}#
#
words = unlist(lapply(which(senders==4), function(x) Dare$text[[x]]))#
Dare$vocab[which(tabulate(words)>20)]#
#
data = data.frame(day = as.factor(unique(day)), send = byday, num_receiver = byday2)#
p[[2]]<-ggplot(data=data, aes(x=day, y=send)) + geom_bar(stat="identity",fill = "#009E73") + geom_line(aes(x=day, y=num_receiver, group = 1, colour="#FF9999"), show.legend = F)+labs(x="", y="")+theme_minimal()+ scale_x_discrete(breaks = function(n) n[seq(1, length(n), by = length(n)/10)])+annotate(geom="text", size = 3, x=70, y=178, label="Author: Emergency Department",color="#009E73")#
marrangeGrob(p[1:2], nrow = 2, ncol = 1, top = NULL)
byday = rep(0, length(unique(day)))#
names(byday)  = unique(day)#
i = 1#
for (d in unique(day)) {#
	docs = which(day == d)#
	byday[i] = sum(senders[docs] == 1)#
	i = i + 1#
}#
#
byday2 = rep(0, length(unique(day)))#
names(byday2)  = unique(day2)#
i = 1#
for (d in unique(day)) {#
	docs = which(day == d)#
	byday2[i] = sum(receivers[docs][senders[docs] == 1])#
	i = i + 1#
}#
#
words = unlist(lapply(which(senders==1), function(x) Dare$text[[x]]))#
Dare$vocab[which(tabulate(words)>30)]
tabulate(words)
sort(tabulate(words))
sort(tabulate(words), decreasing = TRUE)
Dare$vocab[which(tabulate(words) %in% sort(tabulate(words), decreasing = TRUE)[1:10])]
tabulate(words)
Dare$vocab[which(tabulate(words) %in% sort(tabulate(words), decreasing = TRUE)[1:15])]
words = unlist(lapply(which(senders==4), function(x) Dare$text[[x]]))#
Dare$vocab[which(tabulate(words) %in% sort(tabulate(words), decreasing = TRUE)[1:15])]
)
SummaryTable <- data.frame(Words1 = Dare$vocab[which(tabulate(words) %in% sort(tabulate(words), decreasing = TRUE)[1:15])])
tt <- ttheme_default(colhead=list(fg_params = list(parse=TRUE)))#
#
tbl <- tableGrob(SummaryTable, rows=NULL, theme=tt)
tbl
SummaryTable
byday = rep(0, length(unique(day)))#
names(byday)  = unique(day)#
i = 1#
for (d in unique(day)) {#
	docs = which(day == d)#
	byday[i] = sum(senders[docs] == 1)#
	i = i + 1#
}#
#
byday2 = rep(0, length(unique(day)))#
names(byday2)  = unique(day)#
i = 1#
for (d in unique(day)) {#
	docs = which(day == d)#
	byday2[i] = sum(receivers[docs][senders[docs] == 1])#
	i = i + 1#
}#
#
words = unlist(lapply(which(senders==1), function(x) Dare$text[[x]]))#
Dare$vocab[which(tabulate(words) %in% sort(tabulate(words), decreasing = TRUE)[1:15])]#
#
SummaryTable <- data.frame(Words1 = Dare$vocab[which(tabulate(words) %in% sort(tabulate(words), decreasing = TRUE)[1:15])])#
#
data = data.frame(day = as.factor(unique(day)), send = byday, num_receiver = byday2)#
p[[1]]<-ggplot(data=data,aes(x=day, y=send)) + geom_bar(stat="identity",fill = "steelblue") + geom_line(aes(x=day, y=num_receiver, group = 1, colour="#FF9999"), show.legend = F)+labs(x="", y="")+theme_minimal()+ scale_x_discrete(breaks = function(n) n[seq(1, length(n), by = length(n)/10)])+annotate(geom="text", size = 3, x=70, y=25, label="Author: County Manager",color="steelblue")#
#
summary(time[which(senders==1)])#
summary(time[which(senders==4)])#
#emails sent by Emergency Services official (node 4) --- total 325#
byday = rep(0, length(unique(day)))#
names(byday)  = unique(day)#
i = 1#
for (d in unique(day)) {#
	docs = which(day == d)#
	byday[i] = sum(senders[docs] == 4)#
	i = i + 1#
}#
byday2 = rep(0, length(unique(day)))#
names(byday2)  = unique(day2)#
i = 1#
for (d in unique(day)) {#
	docs = which(day == d)#
	byday2[i] = sum(receivers[docs][senders[docs] == 4])#
	i = i + 1#
}#
#
words = unlist(lapply(which(senders==4), function(x) Dare$text[[x]]))#
Dare$vocab[which(tabulate(words) %in% sort(tabulate(words), decreasing = TRUE)[1:15])]#
SummaryTable$Words2 <- Dare$vocab[which(tabulate(words) %in% sort(tabulate(words), decreasing = TRUE)[1:15])]#
#
data = data.frame(day = as.factor(unique(day)), send = byday, num_receiver = byday2)#
p[[2]]<-ggplot(data=data, aes(x=day, y=send)) + geom_bar(stat="identity",fill = "#009E73") + geom_line(aes(x=day, y=num_receiver, group = 1, colour="#FF9999"), show.legend = F)+labs(x="", y="")+theme_minimal()+ scale_x_discrete(breaks = function(n) n[seq(1, length(n), by = length(n)/10)])+annotate(geom="text", size = 3, x=70, y=178, label="Author: Emergency Department",color="#009E73")#
tt <- ttheme_default(colhead=list(fg_params = list(parse=TRUE)))#
#
tbl <- tableGrob(SummaryTable, rows=NULL, theme=tt)
SummaryTable
Dare$vocab[which(tabulate(words) %in% sort(tabulate(words), decreasing = TRUE)[1:15])]
byday = rep(0, length(unique(day)))#
names(byday)  = unique(day)#
i = 1#
for (d in unique(day)) {#
	docs = which(day == d)#
	byday[i] = sum(senders[docs] == 1)#
	i = i + 1#
}#
#
byday2 = rep(0, length(unique(day)))#
names(byday2)  = unique(day)#
i = 1#
for (d in unique(day)) {#
	docs = which(day == d)#
	byday2[i] = sum(receivers[docs][senders[docs] == 1])#
	i = i + 1#
}#
#
words = unlist(lapply(which(senders==1), function(x) Dare$text[[x]]))
Dare$vocab[which(tabulate(words) %in% sort(tabulate(words), decreasing = TRUE)[1:15])]
SummaryTable <- data.frame(Words1 = Dare$vocab[which(tabulate(words) %in% sort(tabulate(words), decreasing = TRUE)[3:15])])
data = data.frame(day = as.factor(unique(day)), send = byday, num_receiver = byday2)#
p[[1]]<-ggplot(data=data,aes(x=day, y=send)) + geom_bar(stat="identity",fill = "steelblue") + geom_line(aes(x=day, y=num_receiver, group = 1, colour="#FF9999"), show.legend = F)+labs(x="", y="")+theme_minimal()+ scale_x_discrete(breaks = function(n) n[seq(1, length(n), by = length(n)/10)])+annotate(geom="text", size = 3, x=70, y=25, label="Author: County Manager",color="steelblue")#
#
summary(time[which(senders==1)])#
summary(time[which(senders==4)])#
#emails sent by Emergency Services official (node 4) --- total 325#
byday = rep(0, length(unique(day)))#
names(byday)  = unique(day)#
i = 1#
for (d in unique(day)) {#
	docs = which(day == d)#
	byday[i] = sum(senders[docs] == 4)#
	i = i + 1#
}#
byday2 = rep(0, length(unique(day)))#
names(byday2)  = unique(day)#
i = 1#
for (d in unique(day)) {#
	docs = which(day == d)#
	byday2[i] = sum(receivers[docs][senders[docs] == 4])#
	i = i + 1#
}#
#
words = unlist(lapply(which(senders==4), function(x) Dare$text[[x]]))#
Dare$vocab[which(tabulate(words) %in% sort(tabulate(words), decreasing = TRUE)[1:15])]#
SummaryTable$Words2 <- Dare$vocab[which(tabulate(words) %in% sort(tabulate(words), decreasing = TRUE)[1:15])]#
#
data = data.frame(day = as.factor(unique(day)), send = byday, num_receiver = byday2)#
p[[2]]<-ggplot(data=data, aes(x=day, y=send)) + geom_bar(stat="identity",fill = "#009E73") + geom_line(aes(x=day, y=num_receiver, group = 1, colour="#FF9999"), show.legend = F)+labs(x="", y="")+theme_minimal()+ scale_x_discrete(breaks = function(n) n[seq(1, length(n), by = length(n)/10)])+annotate(geom="text", size = 3, x=70, y=178, label="Author: Emergency Department",color="#009E73")
SummaryTable
tt <- ttheme_default(colhead=list(fg_params = list(parse=TRUE)))#
#
tbl <- tableGrob(SummaryTable, rows=NULL, theme=tt)
tbl
names(SummaryTable) <- c(#
#
expression(County Manager),#
#
              expression(Emergency Department)
names(SummaryTable) <- c(#
#
expression("County Manager"),#
#
              expression("Emergency Department"))
SummaryTable
tt <- ttheme_default(colhead=list(fg_params = list(parse=TRUE)))#
#
tbl <- tableGrob(SummaryTable, rows=NULL, theme=tt)
tbl
grid.arrange(p, tbl, nrow = 2, as.table = TRUE)
grid.arrange(p[1:2], tbl, nrow = 2, as.table = TRUE)
byday = rep(0, length(unique(day)))#
names(byday)  = unique(day)#
i = 1#
for (d in unique(day)) {#
	docs = which(day == d)#
	byday[i] = sum(senders[docs] == 1)#
	i = i + 1#
}#
#
byday2 = rep(0, length(unique(day)))#
names(byday2)  = unique(day)#
i = 1#
for (d in unique(day)) {#
	docs = which(day == d)#
	byday2[i] = sum(receivers[docs][senders[docs] == 1])#
	i = i + 1#
}#
#
words = unlist(lapply(which(senders==1), function(x) Dare$text[[x]]))#
Dare$vocab[which(tabulate(words) %in% sort(tabulate(words), decreasing = TRUE)[1:15])]#
#
SummaryTable <- data.frame(Words1 = Dare$vocab[which(tabulate(words) %in% sort(tabulate(words), decreasing = TRUE)[3:15])])#
#
data = data.frame(day = as.factor(unique(day)), send = byday, num_receiver = byday2)#
p[[1]]<-ggplot(data=data,aes(x=day, y=send)) + geom_bar(stat="identity",fill = "steelblue") + geom_line(aes(x=day, y=num_receiver, group = 1, colour="#FF9999"), show.legend = F)+labs(x="", y="")+theme_minimal()+ scale_x_discrete(breaks = function(n) n[seq(1, length(n), by = length(n)/10)])+annotate(geom="text", size = 3, x=70, y=25, label="Author: County Manager",color="steelblue")#
#
summary(time[which(senders==1)])#
summary(time[which(senders==4)])#
#emails sent by Emergency Services official (node 4) --- total 325#
byday = rep(0, length(unique(day)))#
names(byday)  = unique(day)#
i = 1#
for (d in unique(day)) {#
	docs = which(day == d)#
	byday[i] = sum(senders[docs] == 4)#
	i = i + 1#
}#
byday2 = rep(0, length(unique(day)))#
names(byday2)  = unique(day)#
i = 1#
for (d in unique(day)) {#
	docs = which(day == d)#
	byday2[i] = sum(receivers[docs][senders[docs] == 4])#
	i = i + 1#
}#
#
words = unlist(lapply(which(senders==4), function(x) Dare$text[[x]]))#
Dare$vocab[which(tabulate(words) %in% sort(tabulate(words), decreasing = TRUE)[1:15])]#
SummaryTable$Words2 <- Dare$vocab[which(tabulate(words) %in% sort(tabulate(words), decreasing = TRUE)[1:15])]#
#
data = data.frame(day = as.factor(unique(day)), send = byday, num_receiver = byday2)#
p[[2]]<-ggplot(data=data, aes(x=day, y=send)) + geom_bar(stat="identity",fill = "#009E73") + geom_line(aes(x=day, y=num_receiver, group = 1, colour="#FF9999"), show.legend = F)+labs(x="", y="")+theme_minimal()+ scale_x_discrete(breaks = function(n) n[seq(1, length(n), by = length(n)/10)])+annotate(geom="text", size = 3, x=70, y=178, label="Author: Emergency Department",color="#009E73")#
#
names(SummaryTable) <- c(#
#
expression("County Manager"),#
#
              expression("Emergency Department"))#
tt <- ttheme_default(colhead=list(fg_params = list(parse=TRUE)))#
#
tbl <- tableGrob(SummaryTable, rows=NULL, theme=tt)#
#
grid.arrange(p[1:2], tbl, nrow = 2, as.table = TRUE)
grid.arrange(tbl)
SummaryTable$Words2 <- Dare$vocab[which(tabulate(words) %in% sort(tabulate(words), decreasing = TRUE)[3:17])]
SummaryTable$Words2 <- Dare$vocab[which(tabulate(words) %in% sort(tabulate(words), decreasing = TRUE)[2:16])]
Dare$vocab[which(tabulate(words) %in% sort(tabulate(words), decreasing = TRUE)[2:16])]
which(tabulate(words) %in% sort(tabulate(words), decreasing = TRUE)[2:16])
tabulate(words) %in% sort(tabulate(words), decreasing = TRUE)[2:16]
grid.arrange(p[1:2], tbl, nrow = 3, as.table = TRUE)
grid.arrange(p, tbl, nrow = 3, as.table = TRUE)
grid.arrange(p[[1]], tbl, nrow = 1, as.table = TRUE)
tt <- ttheme_default(colhead=list(fg_params = list(parse=TRUE)))#
#
tbl <- tableGrob(SummaryTable[,1], rows=NULL, theme=tt)#
#
grid.arrange(p[[1]], tbl, nrow = 1, as.table = TRUE)
grid.arrange(p[[1]], tbl, nrow = 1, as.table = TRUE,  heights=c(1,2))
grid.arrange(p[[1]], tbl, nrow = 1, as.table = TRUE,  heights=c(1,1))
grid.arrange(p[[1]], tbl, nrow = 1, as.table = TRUE,  heights=c(2))
grid.arrange(p[[1]], tbl, nrow = 1, as.table = TRUE,  heights=c(1))
marrangeGrob(p[1:2], nrow = 2, ncol = 1, top = NULL)
library(IPTM)#
load('Darenew.RData')#
attach(Dare)#
Dare$node = 1:nrow(Dare$node)#
Dare$edge = lapply(Dare$edge, function(x){x[1:3]})#
#
set.seed(1)#
missing = matrix(0, nrow = length(Dare$edge), ncol = 3)#
missing[sample(391:2247, 371, replace = FALSE), 1] = 1#
missing[sample(391:2247, 371, replace = FALSE), 2] = 1#
missing[sample(391:2247, 371, replace = FALSE), 3] = 1
load('~/Desktop/IPTM/experiment/Dare_PPE/Darenew.RData')
library(IPTM)#
load('Darenew.RData')#
attach(Dare)#
Dare$node = 1:nrow(Dare$node)#
Dare$edge = lapply(Dare$edge, function(x){x[1:3]})#
#
set.seed(1)#
missing = matrix(0, nrow = length(Dare$edge), ncol = 3)#
missing[sample(391:2247, 371, replace = FALSE), 1] = 1#
missing[sample(391:2247, 371, replace = FALSE), 2] = 1#
missing[sample(391:2247, 371, replace = FALSE), 3] = 1
missing
which(missing[,1]==1 & missing[,3] ==1)
which(missing[,1]==1 & missing[,3] ==0)
which(missing[,1])
which(missing[,1]==1)
which(which(missing[,1]==1) == 413)
sendermissing = which(missing[,1]==1)#
  receivermissing = which(missing[,2]==1)#
  timemissing = which(missing[,3]==1)
sendermissing
receivermissing
timemissing
intersect(sendermissing, timemissing)
timemissing[-sendermissing]
timemissing[!sendersmissing]
timemissing[!sendermissing]
timemissing[!intersect(sendermissing, timemissing)]
intersect(sendermissing, timemissing)
timemissing
timemissing[timemissing !%in% intersect(sendermissing, timemissing)]
timemissing[-timemissing %in% intersect(sendermissing, timemissing)]
timemissing %in% intersect(sendermissing, timemissing)
timemissing[!timemissing %in% intersect(sendermissing, timemissing)]
sendermissing[!sendermissing %in% int_sendertime]
int_sendertime = intersect(sendermissing, timemissing)
sendermissing[!sendermissing %in% int_sendertime]
sendermissing
which(sendermissing==413)
install.packages("bookdown")
load('~/Desktop/IPTM/experiment/Enron_full/Enron_full_3_100_ver5.RData')
names(Enrontest)
Enrontest$l
plot(Enrontest$convergence, type = 'l')
plot(Enrontest$sigma_tau, type = 'l')
plot(Enrontest$delta, type = 'l')
plot(Enrontest$alpha, type = 'l')
plot(Enrontest$eta[[1]][1,], type = 'l')
plot(Enrontest$eta[[1]][2,], type = 'l')
plot(Enrontest$eta[[1]][3,], type = 'l')
plot(Enrontest$eta[[1]][4,], type = 'l')
plot(Enrontest$eta[[1]][5,], type = 'l')
plot(Enrontest$eta[[1]][31,], type = 'l')
plot(Enrontest$eta[[1]][30,], type = 'l')
plot(Enrontest$eta[[1]][6,], type = 'l')
plot(Enrontest$eta[[1]][7,], type = 'l')
plot(Enrontest$eta[[1]][8,], type = 'l')
plot(Enrontest$eta[[1]][9,], type = 'l')
par(mfrow =c(4,8))
for (i in 1:32){plot(Enrontest$eta[[1]][i,], type = 'l')#
}
for (i in 1:32){plot(Enrontest$eta[[2]][i,], type = 'l')#
}
par(mfrow =c(4,8))
for (i in 1:32){plot(Enrontest$eta[[2]][i,], type = 'l')#
}
par(mfrow =c(4,6))
for (i in 1:32){plot(Enrontest$ㅠ[[1]][i,], type = 'l')#
}
for (i in 1:32){plot(Enrontest$b[[1]][i,], type = 'l')#
}
for (i in 1:24){plot(Enrontest$b[[1]][i,], type = 'l')#
}
par(mfrow =c(4,6))
for (i in 1:24){plot(Enrontest$b[[1]][i,], type = 'l')#
}
for (i in 1:24){plot(Enrontest$b[[2]][i,], type = 'l')#
}
for (i in 1:24){plot(Enrontest$b[[3]][i,], type = 'l')#
}
load('~/Desktop/IPTM/experiment/Enron_full/Enron_full_3_100_ver4.RData')
for (i in 1:24){plot(Enrontest$b[[3]][i,], type = 'l')#
}
Daretest$l
Enrontest$l
load('~/Desktop/IPTM/experiment/Enron_full/Enron_full_3_100_ver3.RData')
Enrontest$l
load('~/Desktop/IPTM/experiment/Enron_full/Enron_full_3_100_ver2.RData')
Enrontest$l
load('~/Desktop/IPTM/experiment/Enron_full/Enron_full_3_100_ver1.RData')
Enrontest$l
length(556:6613)
length(556:6613) * 0.1
length(556:6613)
length(556:6613)*0.1
for (i in 1:5){#
    set.seed(i)#
    missing[[i]] = matrix(0, nrow = 6613, ncol = 3)#
    #missing[[i]][sample(556:6613, 606, replace = FALSE), 1] = 1#
    #missing[[i]][sample(556:6613, 606, replace = FALSE), 2] = 1#
    missing[[i]][sample(556:6613, 606, replace = FALSE), 3] = 1#
}
missing = list()
for (i in 1:5){#
    set.seed(i)#
    missing[[i]] = matrix(0, nrow = 6613, ncol = 3)#
    #missing[[i]][sample(556:6613, 606, replace = FALSE), 1] = 1#
    #missing[[i]][sample(556:6613, 606, replace = FALSE), 2] = 1#
    missing[[i]][sample(556:6613, 606, replace = FALSE), 3] = 1#
}
missing
paste0("Dare_PPC_", nIP,"_",K,"_ver", i, ".RData")
nIP = 3
K  =2
paste0("Dare_PPC_", nIP,"_",K,"_ver", i, ".RData")
i =1
paste0("Dare_PPC_", nIP,"_",K,"_ver", i, ".RData")
load('~/Desktop/UN_full.RData')
names(UN)
plot(UN$tau[,1], type = 'l')
plot(UN$tau[,2], type = 'l')
plot(UN$tau[,3], type = 'l')
plot(UN$tau[,4], type = 'l')
plot(UN$tau[,5], type = 'l')
plot(UN$tau[,6], type = 'l')
plot(UN$tau[,7], type = 'l')
plot(UN$tau[,8], type = 'l')
plot(UN$tau[,9], type = 'l')
plot(UN$tau[,10], type = 'l')
plot(UN$tau[,11], type = 'l')
plot(UN$tau[,12], type = 'l')
plot(UN$kappas[,1], type = 'l')
plot(UN$kappas[,2], type = 'l')
plot(UN$kappas[,3], type = 'l')
plot(UN$kappas[,4], type = 'l')
plot(UN$kappas[,5], type = 'l')
plot(UN$kappas[,6], type = 'l')
plot(UN$kappas[,7], type = 'l')
plot(UN$kappas[,8], type = 'l')
plot(UN$kappas[,9], type = 'l')
plot(UN$kappas[,10], type = 'l')
names(UN)
plot(UN$s2, type = 'l')
head(UN$corr)
p = list()#
cordata = data.frame(rbind(UN$corr[,1:3]), c(rep("DAME", 500)))#
colnames(cordata) = c("Lag1", "Lag2", "Lag3", "Model")#
p[[1]] = ggplot(cordata, aes(x = Lag1, fill = Model, color = Model)) + geom_histogram(position = "identity", alpha = 0.5) + geom_vline(aes(xintercept = vapply(1:1, function(l) {cor(Degrees[1:(N*(Time - l))], Degrees[(1 + N*l):(N*Time)], use = "complete")}, 0)), col = "blue", size = 1) +theme_minimal() +theme(legend.position = "bottom")#
p[[2]] = ggplot(cordata, aes(x = Lag2, fill = Model, color = Model)) + geom_histogram(position = "identity", alpha = 0.5) + geom_vline(aes(xintercept = vapply(2:2, function(l) {cor(Degrees[1:(N*(Time - l))], Degrees[(1 + N*l):(N*Time)], use = "complete")}, 0)), col = "blue", size = 1)  + theme_minimal()#
p[[3]] = ggplot(cordata, aes(x = Lag3, fill = Model, color = Model)) + geom_histogram(position = "identity", alpha = 0.5) + geom_vline(aes(xintercept = vapply(3:3, function(l) {cor(Degrees[1:(N*(Time - l))], Degrees[(1 + N*l):(N*Time)], use = "complete")}, 0)), col = "blue", size = 1) +theme_minimal()+ theme(legend.position = "top")#
marrangeGrob(p[1:3], nrow = 1, ncol = 3, top = NULL)#
g_legend<-function(a.gplot){#
  tmp <- ggplot_gtable(ggplot_build(a.gplot))#
  leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")#
  legend <- tmp$grobs[[leg]]#
  return(legend)}
load("/Users/bomin8319/Desktop/DAME/UNdatafull2.RData")#
attach(UNdatafull)#
library(FastGP)#
library(mvtnorm)#
library(fields)#
library(reshape)#
library(MCMCpack)#
library(expm)#
library(igraph)#
library(DLFM2)#
library(coda)#
library(ggplot2)#
library(gridExtra)#
ggplotColours <- function(n = 6, h = c(0, 360) + 15){#
  if ((diff(h) %% 360) < 1) h[2] <- h[2] - 360/n#
  hcl(h = (seq(h[1], h[2], length = n)), c = 100, l = 65)#
}#
number_ticks <- function(n) {function(limits) pretty(limits, n)}
setwd("/Users/bomin8319/Desktop/DAME_paper")
load("/Users/bomin8319/Desktop/DAME/UNdatafull2.RData")#
attach(UNdatafull)#
library(FastGP)#
library(mvtnorm)#
library(fields)#
library(reshape)#
library(MCMCpack)#
library(expm)#
library(igraph)#
library(DLFM2)#
library(coda)#
library(ggplot2)#
library(gridExtra)#
ggplotColours <- function(n = 6, h = c(0, 360) + 15){#
  if ((diff(h) %% 360) < 1) h[2] <- h[2] - 360/n#
  hcl(h = (seq(h[1], h[2], length = n)), c = 100, l = 65)#
}#
number_ticks <- function(n) {function(limits) pretty(limits, n)}
# 97 country version#
Time = 32#
N = 97#
#
# not existing countries -> all missing values imputed using model (biased)#
avail1 = matrix(1, Time, N)#
colnames(avail1) = colnames(UNdatafull$Y)#
avail1[1:8, which(colnames(avail1) %in% c("ROK", "PRK"))] =0 #North and South Korea did not joined UN voting until 1990#
avail1[1:9, which(colnames(avail1) %in% c("RUS"))] = 0 #RUS X variables not existed until 1991#
avail1[13:21, which(colnames(avail1) %in% c("IRQ"))] = 0 #IRQ under sanction#
#
#avail1[9:14, which(colnames(avail1) %in% c("IRQ"))] = 0 #Under the rule of Saddam, economic data were considered state secrets; thus, reliable data for the era was limited. (From 1990 until Saddam accepted the terms and conditions of UN Resolution 986 in 1996 the GDP in Iraq remained at less than 30 percent of the 1989 value.)#
#
Degrees = vapply(1:Time, function(tp) {rowSums(Y[tp,,], na.rm = TRUE)}, rep(0, N))#
corr = vapply(1:31, function(l) {cor(Degrees[1:(N*(Time - l))], Degrees[(1 + N*l):(N*Time)], use = "complete")}, 0)#
plot(corr, type = 'l')
load("/Users/bomin8319/Desktop/DAME/UNdatafull2.RData")
load("/Users/bomin8319/Desktop/DAME_paper/UNdatafull2.RData")
attach(UNdatafull)#
library(FastGP)#
library(mvtnorm)#
library(fields)#
library(reshape)#
library(MCMCpack)#
library(expm)#
library(igraph)#
library(DLFM2)#
library(coda)#
library(ggplot2)#
library(gridExtra)#
ggplotColours <- function(n = 6, h = c(0, 360) + 15){#
  if ((diff(h) %% 360) < 1) h[2] <- h[2] - 360/n#
  hcl(h = (seq(h[1], h[2], length = n)), c = 100, l = 65)#
}#
number_ticks <- function(n) {function(limits) pretty(limits, n)}#
#
# 97 country version#
Time = 32#
N = 97#
#
# not existing countries -> all missing values imputed using model (biased)#
avail1 = matrix(1, Time, N)#
colnames(avail1) = colnames(UNdatafull$Y)#
avail1[1:8, which(colnames(avail1) %in% c("ROK", "PRK"))] =0 #North and South Korea did not joined UN voting until 1990#
avail1[1:9, which(colnames(avail1) %in% c("RUS"))] = 0 #RUS X variables not existed until 1991#
avail1[13:21, which(colnames(avail1) %in% c("IRQ"))] = 0 #IRQ under sanction#
#
#avail1[9:14, which(colnames(avail1) %in% c("IRQ"))] = 0 #Under the rule of Saddam, economic data were considered state secrets; thus, reliable data for the era was limited. (From 1990 until Saddam accepted the terms and conditions of UN Resolution 986 in 1996 the GDP in Iraq remained at less than 30 percent of the 1989 value.)#
#
Degrees = vapply(1:Time, function(tp) {rowSums(Y[tp,,], na.rm = TRUE)}, rep(0, N))#
corr = vapply(1:31, function(l) {cor(Degrees[1:(N*(Time - l))], Degrees[(1 + N*l):(N*Time)], use = "complete")}, 0)#
plot(corr, type = 'l')
p = list()#
cordata = data.frame(rbind(UN$corr[,1:3]), c(rep("DAME", 500)))#
colnames(cordata) = c("Lag1", "Lag2", "Lag3", "Model")#
p[[1]] = ggplot(cordata, aes(x = Lag1, fill = Model, color = Model)) + geom_histogram(position = "identity", alpha = 0.5) + geom_vline(aes(xintercept = vapply(1:1, function(l) {cor(Degrees[1:(N*(Time - l))], Degrees[(1 + N*l):(N*Time)], use = "complete")}, 0)), col = "blue", size = 1) +theme_minimal() +theme(legend.position = "bottom")#
p[[2]] = ggplot(cordata, aes(x = Lag2, fill = Model, color = Model)) + geom_histogram(position = "identity", alpha = 0.5) + geom_vline(aes(xintercept = vapply(2:2, function(l) {cor(Degrees[1:(N*(Time - l))], Degrees[(1 + N*l):(N*Time)], use = "complete")}, 0)), col = "blue", size = 1)  + theme_minimal()#
p[[3]] = ggplot(cordata, aes(x = Lag3, fill = Model, color = Model)) + geom_histogram(position = "identity", alpha = 0.5) + geom_vline(aes(xintercept = vapply(3:3, function(l) {cor(Degrees[1:(N*(Time - l))], Degrees[(1 + N*l):(N*Time)], use = "complete")}, 0)), col = "blue", size = 1) +theme_minimal()+ theme(legend.position = "top")#
marrangeGrob(p[1:3], nrow = 1, ncol = 3, top = NULL)#
g_legend<-function(a.gplot){#
  tmp <- ggplot_gtable(ggplot_build(a.gplot))#
  leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")#
  legend <- tmp$grobs[[leg]]#
  return(legend)}#
#
mylegend<-g_legend(p[[1]])#
p3 <- grid.arrange(arrangeGrob(p[[1]] + theme(legend.position="none"),#
                         p[[2]] + theme(legend.position="none"),#
                         p[[3]] + theme(legend.position="none"), nrow=1),#
             mylegend, heights=c(10, 1))
corr
colMeans(UN$corr)
#beta#
beta = lapply(1:Time, function(t){summary(mcmc(UN$BETA[[t]][1:500,]))[[2]]})#
betas = list()#
for (i in 1:6) {betas[[i]] = sapply(1:Time, function(t){beta[[t]][i,]})}#
betacols= ggplotColours(6)#
plots = list()#
i= 1#
years = c(1983:2014)#
data = data.frame(cbind(years,t(betas[[i]])))#
 colnames(data)[4] = "beta"#
 f = ggplot(data, aes(x = years))#
plots[[1]]=f + geom_line(aes(y = beta), colour=betacols[1]) + geom_ribbon(aes(ymin = X2.5., ymax = X97.5.), alpha = 0.1) + scale_x_continuous(breaks=number_ticks(8))+ylab("Intercept") + theme_minimal()#
#
color =betacols[-1]#
varname = c("log(distance)", "Polity", "Alliance", "Lower trade-to-GDP ratio", "Common Language")#
for (i in 2:6){#
years = c(1983:2014)#
data = data.frame(cbind(years,t(betas[[i]])))#
 colnames(data)[4] = "beta"#
 f = ggplot(data, aes(x = years))#
 plots[[i]] <- f + geom_line(aes(y = beta), colour=color[i-1]) + geom_ribbon(aes(ymin = X2.5., ymax = X97.5.), alpha = 0.1) + ylab(varname[i-1]) + scale_x_continuous(breaks=number_ticks(8)) + geom_hline(yintercept = 0) + theme_minimal()#
#
 }#
 marrangeGrob(plots[1:6], nrow = 2, ncol = 3, top = NULL)
colors = sort(rownames(UN$U[[Time]]))#
colors[which(colors == "GFR")] = "GMY"#
rownames(UN$U[[Time]])[31] = "GMY"#
	thetanew = t(sapply(1:Time, function(t){colMeans(UN$theta[[t]])}))#
	colnames(thetanew) = colnames(avail1)#
	orders = sapply(1:N, function(n){which(colors[n]== rownames(UN$U[[Time]]))})#
	thetanew = thetanew[,orders]#
	data3 = data.frame(years = years, theta = thetanew)#
	colnames(data3)[-1] = colors#
	data3new = melt(data3, id = "years")#
	colnames(data3new)[3] = "theta"
ggcolors = ggplotColours(21)#
colors = sort(rownames(UN$U[[Time]])[which(rownames(UN$U[[Time]]) %in% c("USA", "CHN", "IND", "ROK","PRK","IRQ","RUS","GRG","UKR","UKG", "FRN", "GMY", "TUR", "JPN", "ISR", "SYR", "LEB", "SUD", "IRN", "AUL", "PAK", "EGY","AFG"))])#
data4new = data3new[data3new$variable %in% c("USA", "CHN", "IND", "ROK","PRK","IRQ","RUS","GRG","UKR","UKG", "FRN", "GMY", "TUR", "JPN", "ISR", "SYR", "LEB", "SUD", "IRN", "AUL", "PAK", "EGY","AFG"),]#
#
f <- ggplot(data4new, aes(years, theta, color = variable, label = variable))#
f + geom_line(size = 0.5, aes(linetype =as.factor(c(sapply(c(6:1,5:1,5:1,5:1), function(x){rep(x, Time)})))))+geom_point(size =1, aes(shape =as.factor(c(sapply(c(1:6,1:5,1:5,1:5), function(x){rep(x, Time)})))))+ scale_x_continuous(breaks=number_ticks(8)) + theme_minimal() + #
  geom_text(data = data4new[data4new$years=="1983", ], aes(label = variable), check_overlap = T, hjust = 1.3, vjust = 1, size =3, show.legend = F )+#
geom_text(data = data4new[data4new$years=="2014", ], aes(label = variable), check_overlap = T, hjust = -0.3, vjust = 1, size =3, show.legend = F )+#
  scale_color_manual(values = ggplotColours(21), name = "countries")+scale_linetype(guide = FALSE)+scale_shape(guide = FALSE)+#
  guides(colour = guide_legend(override.aes = list(shape = c(1:6,1:5,1:5,1:5), linetype = c(6:1,5:1,5:1,5:1)))) #
#
f <- ggplot(data4new, aes(years, theta, color = variable, label = variable))#
f + geom_line( aes(linetype =as.factor(c(sapply(c(6:1,5:1,5:1,5:1), function(x){rep(x, Time)})))))+ scale_x_continuous(breaks=number_ticks(8)) + theme_minimal() + #
  geom_text(data = data4new[data4new$years=="1983", ], aes(label = variable), check_overlap = F, hjust = 1.3, vjust = 1, size =3, show.legend = F )+#
  geom_text(data = data4new[data4new$years=="1988", ], aes(label = variable), check_overlap = F, hjust = 0, vjust = 1.2, size =3, show.legend = F )+#
  geom_text(data = data4new[data4new$years=="2009", ], aes(label = variable), check_overlap = F, hjust = 0, vjust = 1.2, size =3, show.legend = F )+#
  geom_text(data = data4new[data4new$years=="2014", ], aes(label = variable), check_overlap = F, hjust = -0.3, vjust = 1, size =3, show.legend = F )+#
  scale_color_manual(values = ggplotColours(21), name = "countries")+scale_linetype(guide = FALSE)+scale_shape(guide = FALSE)+#
  guides(colour = guide_legend(override.aes = list(linetype = c(6:1,5:1,5:1,5:1))))
names(UN)
ggcolors = ggplotColours(3)#
datacollapse = matrix(0, nrow = 112500, ncol = 3)#
observedcollapse = matrix(0, 75, 3)#
pp = list()#
for (tp in 1:Time) {#
	diag(Y[tp,,]) = 0#
	Y[tp, which(avail1[tp, ]==0), ] = 0#
	Y[tp, , which(avail1[tp, ]==0)] = 0#
	Y[d, , ][which(is.na(Y[d, , ]))] = 0#
		data = t(sapply(1:500, function(r){tabulate(round(UN$Degree[[tp]][r,]), 95)}))[,-1:-20]#
	colnames(data) =  c(21:95)#
	datamat = matrix(0, 500, 75)#
	colnames(datamat) = c(21:95)#
	for (i in 1:500) {#
		datamat[i, which(colnames(datamat) %in% colnames(data))] = data[i,] / sum(data[i,])#
	}#
	datamat1 = data.frame(Proportion = c(datamat), Degree = factor(c(sapply(c(21:95), function(k){rep(k, 500)}))), Model = as.factor("AME"))#
#
	 data =  t(sapply(1:500, function(r){tabulate(round(UN4$Degree[[tp]][r,]), 95)}))[,-1:-20]#
	colnames(data) =  c(21:95)#
	datamat = matrix(0, 500, 75)#
	 colnames(datamat) = c(21:95)#
	 for (i in 1:500) {#
		 datamat[i, which(colnames(datamat) %in% colnames(data))] = data[i,] / sum(data[i,])#
	 }#
	 datamat2 = rbind(datamat1, data.frame(Proportion = c(datamat), Degree = factor(c(sapply(c(21:95), function(k){rep(k, 500)}))), Model = as.factor("ME")))#
	 data =  t(sapply(1:500, function(r){tabulate(round(UN2$Degree[[tp]][r,]), 95)}))[,-1:-20]#
	 colnames(data) =  c(21:95)#
	 datamat = matrix(0, 500,75)#
	 colnames(datamat) = c(21:95)#
		 for (i in 1:500) {#
		 datamat[i, which(colnames(datamat) %in% colnames(data))] = data[i,] / sum(data[i,])#
	}#
	 datamat3 = rbind(datamat2, data.frame(Proportion = c(datamat), Degree = factor(c(sapply(c(21:95), function(k){rep(k, 500)}))), Model = as.factor("AE")))#
	 data =  t(sapply(1:500, function(r){tabulate(round(UN3$Degree[[tp]][r,]), 95)}))[,-1:-20]#
	 colnames(data) =  c(21:95)#
	 datamat = matrix(0, 500, 75)#
	 colnames(datamat) =c(21:95)#
		 for (i in 1:500) {#
		 datamat[i, which(colnames(datamat) %in% colnames(data))] = data[i,] / sum(data[i,])#
	}#
	 datamat4 = rbind(datamat3, data.frame(Proportion = c(datamat), Degree = factor(c(sapply(c(21:95), function(k){rep(k, 500)}))), Model = as.factor("NO")))#
	datamat4 = datamat3#
	datamat4 = as.data.frame(datamat4)#
	observedpp = as.numeric(tabulate(round(rowSums(Y[tp,,])), 95) / sum(tabulate(round(rowSums(Y[tp,,])), 95)))[-1:-20]#
	names(observedpp) = c(21:95)#
	pvec = rep(0, 75)#
	names(pvec) =c(21:95)#
	pvec[which(names(pvec) %in% names(observedpp))] = observedpp#
	observed = data.frame(Proportion = pvec, Degree = as.factor(c(21:95)), Model = "AME")#
	pp[[tp]] = ggplot(datamat4, aes(x = Degree, y = Proportion,fill = Model, color =Model)) + geom_boxplot(outlier.size = 0.5, position = position_dodge()) + theme_minimal()+scale_fill_manual(values = alpha(ggcolors, 0.5)) + geom_line(data = observed, color = "blue", size = 0.2, group = 1)+geom_point(data =observed, color = "blue", size =2, group = 1)+guides(colour = guide_legend(override.aes = list(shape = NA))) + theme(legend.title = element_blank())#
    datacollapse[,1] = datacollapse[,1] + datamat3[,1]#
    observedcollapse[,1] = observedcollapse[,1] + observed[,1]#
}#
years = c(1983:2014)
ggcolors = ggplotColours(3)#
datacollapse = matrix(0, nrow = 112500, ncol = 3)#
observedcollapse = matrix(0, 75, 3)#
pp = list()#
for (tp in 1:Time) {#
	diag(Y[tp,,]) = 0#
	Y[tp, which(avail1[tp, ]==0), ] = 0#
	Y[tp, , which(avail1[tp, ]==0)] = 0#
	Y[tp, , ][which(is.na(Y[tp, , ]))] = 0#
		data = t(sapply(1:500, function(r){tabulate(round(UN$Degree[[tp]][r,]), 95)}))[,-1:-20]#
	colnames(data) =  c(21:95)#
	datamat = matrix(0, 500, 75)#
	colnames(datamat) = c(21:95)#
	for (i in 1:500) {#
		datamat[i, which(colnames(datamat) %in% colnames(data))] = data[i,] / sum(data[i,])#
	}#
	datamat1 = data.frame(Proportion = c(datamat), Degree = factor(c(sapply(c(21:95), function(k){rep(k, 500)}))), Model = as.factor("AME"))#
#
	 data =  t(sapply(1:500, function(r){tabulate(round(UN4$Degree[[tp]][r,]), 95)}))[,-1:-20]#
	colnames(data) =  c(21:95)#
	datamat = matrix(0, 500, 75)#
	 colnames(datamat) = c(21:95)#
	 for (i in 1:500) {#
		 datamat[i, which(colnames(datamat) %in% colnames(data))] = data[i,] / sum(data[i,])#
	 }#
	 datamat2 = rbind(datamat1, data.frame(Proportion = c(datamat), Degree = factor(c(sapply(c(21:95), function(k){rep(k, 500)}))), Model = as.factor("ME")))#
	 data =  t(sapply(1:500, function(r){tabulate(round(UN2$Degree[[tp]][r,]), 95)}))[,-1:-20]#
	 colnames(data) =  c(21:95)#
	 datamat = matrix(0, 500,75)#
	 colnames(datamat) = c(21:95)#
		 for (i in 1:500) {#
		 datamat[i, which(colnames(datamat) %in% colnames(data))] = data[i,] / sum(data[i,])#
	}#
	 datamat3 = rbind(datamat2, data.frame(Proportion = c(datamat), Degree = factor(c(sapply(c(21:95), function(k){rep(k, 500)}))), Model = as.factor("AE")))#
	 data =  t(sapply(1:500, function(r){tabulate(round(UN3$Degree[[tp]][r,]), 95)}))[,-1:-20]#
	 colnames(data) =  c(21:95)#
	 datamat = matrix(0, 500, 75)#
	 colnames(datamat) =c(21:95)#
		 for (i in 1:500) {#
		 datamat[i, which(colnames(datamat) %in% colnames(data))] = data[i,] / sum(data[i,])#
	}#
	 datamat4 = rbind(datamat3, data.frame(Proportion = c(datamat), Degree = factor(c(sapply(c(21:95), function(k){rep(k, 500)}))), Model = as.factor("NO")))#
	datamat4 = datamat3#
	datamat4 = as.data.frame(datamat4)#
	observedpp = as.numeric(tabulate(round(rowSums(Y[tp,,])), 95) / sum(tabulate(round(rowSums(Y[tp,,])), 95)))[-1:-20]#
	names(observedpp) = c(21:95)#
	pvec = rep(0, 75)#
	names(pvec) =c(21:95)#
	pvec[which(names(pvec) %in% names(observedpp))] = observedpp#
	observed = data.frame(Proportion = pvec, Degree = as.factor(c(21:95)), Model = "AME")#
	pp[[tp]] = ggplot(datamat4, aes(x = Degree, y = Proportion,fill = Model, color =Model)) + geom_boxplot(outlier.size = 0.5, position = position_dodge()) + theme_minimal()+scale_fill_manual(values = alpha(ggcolors, 0.5)) + geom_line(data = observed, color = "blue", size = 0.2, group = 1)+geom_point(data =observed, color = "blue", size =2, group = 1)+guides(colour = guide_legend(override.aes = list(shape = NA))) + theme(legend.title = element_blank())#
    datacollapse[,1] = datacollapse[,1] + datamat3[,1]#
    observedcollapse[,1] = observedcollapse[,1] + observed[,1]#
}#
years = c(1983:2014)
for (t in 1:Time){#
mname = paste0(years[t], "overalldegree", ".png")#
print(pp[[t]])#
#ggsave(filename = mname, width = 10, height = 6)#
}
pp[[1]]
datacollapse = data.frame(Proportion = datacollapse[,1]/Time, Degree = datamat3$Degree, Model = datamat3$Model)#
observedcollapse = data.frame(Proportion = observedcollapse[,1]/Time, Degree = observed$Degree, Model = observed$Model)#
datacollapse2 = datacollapse[datacollapse$Model == "AME",]#
pp = ggplot(datacollapse, aes(x = Degree, y = Proportion,fill = Model, color =Model)) + geom_boxplot(outlier.size = 0.5, position = position_dodge()) + theme_minimal()+scale_fill_manual(values = alpha(ggcolors, 0.5)) + geom_line(data = observedcollapse, color = "blue", size = 0.2, group = 1)+geom_point(data =observedcollapse, color = "blue", size =2, group = 1)+guides(colour = guide_legend(override.aes = list(shape = NA))) + theme(legend.title = element_blank())#
pp = ggplot(datacollapse2, aes(x = Degree, y = Proportion,fill = Model, color =Model)) + geom_boxplot(outlier.size = 0.5, position = position_dodge()) + theme_minimal()+scale_fill_manual(values = alpha(ggcolors, 0.5)) + geom_line(data = observedcollapse, color = "blue", size = 0.2, group = 1)+geom_point(data =observedcollapse, color = "blue", size =2, group = 1)+guides(colour = guide_legend(override.aes = list(shape = NA))) + theme(legend.title = element_blank())
colMeans(UN$tau)
load('~/Desktop/DAME_paper/MCMC_file/UN_full.RData')
colMeans(UN$tau)
names(UN)
UN$U
UN$U
UN$D
load('~/Desktop/UN_full.RData')
UN$U
UN$D
