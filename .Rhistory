load("/Users/bomin8319/Desktop/UN_full.RData")
Time = 32
N = 97
#construct eigenvector-ized U's
Unew = list()
R = 2
for (tp in 1:32) {
Unew[[tp]] = matrix(NA, nrow = nrow(UN$U[[tp]]), ncol = 2*500)
rownames(UN$U[[tp]])[which(rownames(UN$U[[tp]]) %in% "GFR")] = "GMY"
rownames(Unew[[tp]]) = rownames(UN$U[[tp]])
for (iter in 1:500){
if (sum(is.na(UN$UPS[[tp]][,1]))>0){
Uold = UN$UPS[[tp]][-which(is.na(UN$UPS[[tp]][,1])),(2*iter-1):(2*iter)]
} else {
Uold = UN$UPS[[tp]][,(2*iter-1):(2*iter)]
}
UDU = Uold %*% diag(UN$DPS[[tp]][iter,]) %*% t(Uold)
eULU = eigen(UDU)
Unew[[tp]][, (2*iter-1):(2*iter)] = eULU$vec[, seq(1, R, length = R), drop = FALSE]	}
}
#1. Do a procrustes for the U's (from eigendecomposition of UDU) in each iteration and get their interval.Â 
#fix USA and JPN's position but not fix those to be same
library(MCMCpack)
Upost1 <- lapply(1:32, function(tp) Unew[[tp]][,1])
Upost2 <- lapply(1:32, function(tp) Unew[[tp]][,2]
)
for (tp in 1:32) {
Xstar = matrix(0, nrow = nrow(UN$U[[tp]]), ncol = 2)
rownames(Xstar) =rownames(UN$U[[tp]])
Xstar = Unew[[tp]][,1:2]
for (iter in 2:500){
Utrans= procrustes(Unew[[tp]][,(2*iter-1):(2*iter)], Xstar)$X.new
Upost1[[tp]] = cbind(Upost1[[tp]], Utrans[,1])
Upost2[[tp]] = cbind(Upost2[[tp]], Utrans[,2])
}
}
yearsummary = list()
for (tp in 1:32) {
yearsummary[[tp]] = cbind(summary(mcmc(t(Upost1[[tp]])))[[2]][,c(1,3, 5)], summary(mcmc(t(Upost2[[tp]])))[[2]][,c(1,3, 5)])
rownames(yearsummary[[tp]]) = rownames(UN$U[[tp]])
}
angle <- function(x,y){
dot.prod <- x%*%y
norm.x <- norm(x,type="2")
norm.y <- norm(y,type="2")
theta <- acos(dot.prod / (norm.x * norm.y))
if (is.na(theta)) theta <- 0
as.numeric(theta)
}
angles = list()
countrypair = list()
for (tp in 1:32) {
N = nrow(Unew[[tp]])
countrypair[[tp]] =  t(combn(rownames(Unew[[tp]]), 2))
angles[[tp]] = matrix(NA, nrow = N * (N-1) / 2, ncol = 500)
for (iter in 1:500){
Unow = Unew[[tp]][,(2*iter-1):(2*iter)]
for (i in 1:nrow(angles[[tp]])) {
angles[[tp]][i, iter] = angle(Unow[which(rownames(Unow) %in% countrypair[[tp]][i,1]),], Unow[which(rownames(Unow) %in% countrypair[[tp]][i,2]),])
}
}
}
save(angles, file = "angles.RData")
library(MCMCpack)
countrypair2 = list()
for (tp in 1:32) {
countrypair2[[tp]] = matrix(NA, nrow = nrow(countrypair[[tp]]), ncol = 4)
for (i in 1:nrow(countrypair[[tp]])) {
summary = summary(mcmc(angles[[tp]][i,]))[[2]][c(1,3, 5)]
countrypair2[[tp]][i, ] =  c(summary, (summary[1] <= 1 & summary[3] >= 1))
}
countrypair[[tp]] = data.frame(countrypair[[tp]], countrypair2[[tp]])
}
similar = list()
for (tp in 1:32){
similar[[tp]] =countrypair[[tp]][which(countrypair[[tp]][,6] == 1), 1:2]
}
similar[[1]]
