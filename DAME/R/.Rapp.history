load_all()
library(devtools)
load_all()
library(DAME)
DAME_MH
library(fields)#
library(matrixStats)#
library(mvtnorm)#
library(FastGP)#
library(LaplacesDemon)#
library(MCMCpack)#
library(DLFM2)#
library(coda)#
library(ggplot2)#
library(gridExtra)
library(fields)#
library(matrixStats)#
library(mvtnorm)#
library(FastGP)#
library(LaplacesDemon)#
library(MCMCpack)#
library(DLFM2)#
library(coda)#
library(ggplot2)#
library(gridExtra)#
#
nsim = 1#
kappas = rep(10, 4)#
Time = 10#
N = 20#
R = 2#
dist_ij = c()#
 for (i in 1:Time) {#
 for (j in 1:Time) {#
 dist_ij = c(dist_ij, abs(i-j))#
 }#
 }#
dist_ij = matrix(dist_ij, Time, Time)#
BETA = lapply(1:4, function(m){matrix(0, 1, Time)})#
THETA = lapply(1:4, function(m){matrix(0, N, Time)})#
UDUstat = lapply(1:4, function(m){matrix(0, 2, Time)})#
Error = rep(0, 5)#
Error2 = rep(0, 5)#
Error3 = rep(0, 5)#
Error4 = rep(0, 5)#
Kappa = rep(0, 3)#
#
for (s in 1:nsim){#
print(s)#
set.seed(s+2000)#
    tau_p = 1/rgamma(1, 2, 1)#
    tau_i = 1/rgamma(1, 2, 1)#
    tau_r = 1/rgamma(2, 2, 1)#
    tau_u = matrix(1/rgamma(Time*R, 2, 1), Time, R)#
	beta = sapply(1:1, function(p){rmvnorm(1, rep(0, Time), tau_p * matrix(Exponential(dist_ij, kappas[p]), Time, Time, byrow = TRUE))})#
	theta = sapply(1:N, function(i){rmvnorm(1, rep(0, Time), tau_i * matrix(Exponential(dist_ij, kappas[2]), Time, Time, byrow = TRUE))}) #
	U1 = sapply(1:N, function(i){rmvnorm(1, rep(0, Time), tau_u[,1]*diag(Time))}) #
	U2 = sapply(1:N, function(i){rmvnorm(1, rep(0, Time), tau_u[,2]*diag(Time))})#
	U = lapply(1:Time , function(tp){cbind(U1[tp,], U2[tp,])})#
	D = sapply(1:2, function(r){rmvnorm(1, rep(0, Time), tau_r[r] * matrix(Exponential(dist_ij, kappas[3]), Time, Time, byrow = TRUE))})#
	#while (sum(c(D) > 0) > 0) {#
	#  D = sapply(1:2, function(r){rmvnorm(1, rep(0, Time), matrix(Exponential(dist_ij, kappas[3]), Time, Time, byrow = TRUE))})#
	#}#
	s2 = 1 / rgamma(1, 2, 1)#
	U2= array(0, dim = c(Time, N, R))#
    for (tp in 1:Time) { U2[tp, , ] = U[[tp]]}#
	UDU = lapply(1:Time , function(tp){U[[tp]] %*% diag(D[tp,]) %*% t(U[[tp]])})#
	UDUstats = t(sapply(1:Time , function(tp){c(sum(UDU[[tp]][upper.tri(UDU[[tp]])]), sd(UDU[[tp]][upper.tri(UDU[[tp]])]))}))#
	Ys = array(NA, dim = c(Time , N, N))#
	Errormat = array(0, dim = c(Time, N, N))#
	errors = rnorm(Time * N * (N-1) / 2, 0, sqrt(s2))#
	for (tp in 1:Time) {#
	  Errormat[tp, , ][upper.tri(Errormat[tp, , ])] = errors[((tp-1)*N*(N-1)/2+1):(tp*N*(N-1)/2)]#
	  Errormat[tp, , ] = (Errormat[tp, , ] + t(Errormat[tp, , ]))#
	Ys[tp, , ] = Reduce("+", lapply(1:1, function(p) {#
                    1 * beta[tp, p]#
                  })) + outer(theta[tp, ], theta[tp, ], "+") + UDU[[tp]] + Errormat[tp,,]#
	diag(Ys[tp,,]) = 0   #
	}#
Xnew = array(1, dim = c(Time , N, N, 1))#
set.seed(s)#
M1 = DAME_fix(Ys, Xnew, RE = c("additive", "multiplicative"), gammapriors = c(2, 1), dist = "Exponential", avail = matrix(1, Time , N), R =2, burn = 1000, nscan = 5000, odens = 10, kappas = rep(0.001, 4))#
set.seed(s)#
M2 = DAME_MH(Ys, Xnew, RE = c("additive", "multiplicative"), gammapriors = c(2, 1), dist = "Exponential", avail = matrix(1, Time , N), R =2, burn = 1000, nscan = 5000, odens = 10)#
}#
Degrees = vapply(1:Time, function(tp) {rowSums(Ys[tp,,])}, rep(0, N))#
p = list()#
cordata = data.frame(rbind(M1$corr[,1:3],M2$corr[,1:3]), c(rep("Indepence", 500), rep("DAME", 500)))#
colnames(cordata) = c("Lag1", "Lag2", "Lag3", "Model")#
p[[1]] = ggplot(cordata, aes(x = Lag1, fill = Model, color = Model)) + geom_histogram(position = "identity", alpha = 0.5) + geom_vline(aes(xintercept = vapply(1:1, function(l) {cor(Degrees[1:(N*(Time - l))], Degrees[(1 + N*l):(N*Time)], use = "complete")}, 0)), col = "blue", size = 1) +theme_minimal() +theme(legend.position = "bottom", legend.title = element_blank()) #
p[[2]] = ggplot(cordata, aes(x = Lag2, fill = Model, color = Model)) + geom_histogram(position = "identity", alpha = 0.5) + geom_vline(aes(xintercept = vapply(2:2, function(l) {cor(Degrees[1:(N*(Time - l))], Degrees[(1 + N*l):(N*Time)], use = "complete")}, 0)), col = "blue", size = 1)  + theme_minimal()#
p[[3]] = ggplot(cordata, aes(x = Lag3, fill = Model, color = Model)) + geom_histogram(position = "identity", alpha = 0.5) + geom_vline(aes(xintercept = vapply(3:3, function(l) {cor(Degrees[1:(N*(Time - l))], Degrees[(1 + N*l):(N*Time)], use = "complete")}, 0)), col = "blue", size = 1) +theme_minimal()+ theme(legend.position = "top")#
#marrangeGrob(p[1:3], nrow = 1, ncol = 3, top = NULL)#
g_legend<-function(a.gplot){#
  tmp <- ggplot_gtable(ggplot_build(a.gplot))#
  leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")#
  legend <- tmp$grobs[[leg]]#
  return(legend)}#
#
mylegend<-g_legend(p[[1]])#
p3 <- grid.arrange(arrangeGrob(p[[1]] + theme(legend.position="none"),#
                         p[[2]] + theme(legend.position="none"),#
                         p[[3]] + theme(legend.position="none"), nrow=1),#
             mylegend, heights=c(10, 1))
plot(M2$tau[,1], type = 'l')
plot(M2$tau[,2], type = 'l')
plot(M2$tau[,3], type = 'l')
plot(M2$tau[,4], type = 'l')
plot(M2$tau[,5], type = 'l')
kappas
plot(M2$tau[,6], type = 'l')
plot(M2$tau[,7], type = 'l')
plot(M2$kappas[,1], type = 'l')
plot(M2$kappas[,2], type = 'l')
plot(M2$kappas[,3], type = 'l')
plot(M2$kappas[,4], type = 'l')
plot(M2$kappas[,5], type = 'l')
colMeans(M2$tau)
colMeans(M2$kappas)
s2
summary(M2$s2)
summary(M1$s2)
load_all()
M2 = DAME_MH(Ys, Xnew, RE = c("additive", "multiplicative"), gammapriors = c(2, 1), dist = "Exponential", avail = matrix(1, Time , N), R =2, burn = 1000, nscan = 5000, odens = 10)
summary(M2$s2)
plot(M2$kappas[,5], type = 'l')
plot(M2$kappas[,4], type = 'l')
plot(M2$kappas[,3], type = 'l')
plot(M2$kappas[,2], type = 'l')
plot(M2$kappas[,1], type = 'l')
colMeans(M2$tau)
colMeans(M2$kappa)
plot(M2$kappas[,1], type = 'l')
plot(M2$kappas[,2], type = 'l')
plot(M2$kappas[,3], type = 'l')
plot(M2$kappas[,4], type = 'l')
plot(M2$kappas[,5], type = 'l')
plot(M2$kappas[,3], type = 'l')
library(devtools)
load_all()
load("/Users/bomin8319/Desktop/DAME/UNdatafull2.RData")#
attach(UNdatafull)#
library(FastGP)#
library(mvtnorm)#
library(fields)#
library(reshape)#
library(MCMCpack)#
library(expm)#
library(igraph)#
library(DLFM2)#
library(coda)#
library(ggplot2)#
library(gridExtra)#
ggplotColours <- function(n = 6, h = c(0, 360) + 15){#
  if ((diff(h) %% 360) < 1) h[2] <- h[2] - 360/n#
  hcl(h = (seq(h[1], h[2], length = n)), c = 100, l = 65)#
}#
number_ticks <- function(n) {function(limits) pretty(limits, n)}
library(DAME)
# 97 country version#
Time = 32#
N = 97#
#
# not existing countries -> all missing values imputed using model (biased)#
avail1 = matrix(1, Time, N)#
colnames(avail1) = colnames(UNdatafull$Y)#
avail1[1:8, which(colnames(avail1) %in% c("ROK", "PRK"))] =0 #North and South Korea did not joined UN voting until 1990#
avail1[1:9, which(colnames(avail1) %in% c("RUS"))] = 0 #RUS X variables not existed until 1991#
avail1[13:21, which(colnames(avail1) %in% c("IRQ"))] = 0 #IRQ under sanction#
#
#avail1[9:14, which(colnames(avail1) %in% c("IRQ"))] = 0 #Under the rule of Saddam, economic data were considered state secrets; thus, reliable data for the era was limited. (From 1990 until Saddam accepted the terms and conditions of UN Resolution 986 in 1996 the GDP in Iraq remained at less than 30 percent of the 1989 value.)#
#
Degrees = vapply(1:Time, function(tp) {rowSums(Y[tp,,], na.rm = TRUE)}, rep(0, N))#
corr = vapply(1:31, function(l) {cor(Degrees[1:(N*(Time - l))], Degrees[(1 + N*l):(N*Time)], use = "complete")}, 0)#
plot(corr, type = 'l')#
#
# secondDegrees = sapply(1:Time, function(tp) {rowSums(Y[tp,which(avail1[tp,]==1),which(avail1[tp,]==1)] %*% Y[tp,which(avail1[tp,]==1),which(avail1[tp,]==1)], na.rm = TRUE)})#
# corr2 = vapply(1:31, function(l) {#
	# a = unlist(secondDegrees[1:(Time - l)])#
	# b = unlist(secondDegrees[(1 +l):Time])#
	# lengthab = min(length(a), length(b))#
	# cor(a[1:lengthab],b[1:lengthab] , use = "complete")}, 0)
UN = DAME_MH(Y[1:Time,,], X[1:Time,,,c(1,3,4,5,6)], RE = c("additive", "multiplicative"), R = 2, avail = avail1, burn =5000, nscan = 25000, odens = 50)
dtruncnorm
library(truncnorm)
dtruncnorm
dtruncnorm(c(1,2), 0, Inf, 0, 1)
log(dtruncnorm(c(1,2), 0, Inf, 0, 1))
load_all()
library(fields)#
library(matrixStats)#
library(mvtnorm)#
library(FastGP)#
library(LaplacesDemon)#
library(MCMCpack)#
library(DLFM2)#
library(coda)#
library(ggplot2)#
library(gridExtra)#
#
nsim = 1#
kappas = rep(10, 4)#
Time = 10#
N = 20#
R = 2#
dist_ij = c()#
 for (i in 1:Time) {#
 for (j in 1:Time) {#
 dist_ij = c(dist_ij, abs(i-j))#
 }#
 }#
dist_ij = matrix(dist_ij, Time, Time)#
BETA = lapply(1:4, function(m){matrix(0, 1, Time)})#
THETA = lapply(1:4, function(m){matrix(0, N, Time)})#
UDUstat = lapply(1:4, function(m){matrix(0, 2, Time)})#
Error = rep(0, 5)#
Error2 = rep(0, 5)#
Error3 = rep(0, 5)#
Error4 = rep(0, 5)#
Kappa = rep(0, 3)
s
s =1
print(s)#
set.seed(s+2000)#
    tau_p = 1/rgamma(1, 2, 1)#
    tau_i = 1/rgamma(1, 2, 1)#
    tau_r = 1/rgamma(2, 2, 1)#
    tau_u = matrix(1/rgamma(Time*R, 2, 1), Time, R)#
	beta = sapply(1:1, function(p){rmvnorm(1, rep(0, Time), tau_p * matrix(Exponential(dist_ij, kappas[p]), Time, Time, byrow = TRUE))})#
	theta = sapply(1:N, function(i){rmvnorm(1, rep(0, Time), tau_i * matrix(Exponential(dist_ij, kappas[2]), Time, Time, byrow = TRUE))}) #
	U1 = sapply(1:N, function(i){rmvnorm(1, rep(0, Time), tau_u[,1]*diag(Time))}) #
	U2 = sapply(1:N, function(i){rmvnorm(1, rep(0, Time), tau_u[,2]*diag(Time))})#
	U = lapply(1:Time , function(tp){cbind(U1[tp,], U2[tp,])})#
	D = sapply(1:2, function(r){rmvnorm(1, rep(0, Time), tau_r[r] * matrix(Exponential(dist_ij, kappas[3]), Time, Time, byrow = TRUE))})#
	#while (sum(c(D) > 0) > 0) {#
	#  D = sapply(1:2, function(r){rmvnorm(1, rep(0, Time), matrix(Exponential(dist_ij, kappas[3]), Time, Time, byrow = TRUE))})#
	#}#
	s2 = 1 / rgamma(1, 2, 1)#
	U2= array(0, dim = c(Time, N, R))#
    for (tp in 1:Time) { U2[tp, , ] = U[[tp]]}#
	UDU = lapply(1:Time , function(tp){U[[tp]] %*% diag(D[tp,]) %*% t(U[[tp]])})#
	UDUstats = t(sapply(1:Time , function(tp){c(sum(UDU[[tp]][upper.tri(UDU[[tp]])]), sd(UDU[[tp]][upper.tri(UDU[[tp]])]))}))#
	Ys = array(NA, dim = c(Time , N, N))#
	Errormat = array(0, dim = c(Time, N, N))#
	errors = rnorm(Time * N * (N-1) / 2, 0, sqrt(s2))#
	for (tp in 1:Time) {#
	  Errormat[tp, , ][upper.tri(Errormat[tp, , ])] = errors[((tp-1)*N*(N-1)/2+1):(tp*N*(N-1)/2)]#
	  Errormat[tp, , ] = (Errormat[tp, , ] + t(Errormat[tp, , ]))#
	Ys[tp, , ] = Reduce("+", lapply(1:1, function(p) {#
                    1 * beta[tp, p]#
                  })) + outer(theta[tp, ], theta[tp, ], "+") + UDU[[tp]] + Errormat[tp,,]#
	diag(Ys[tp,,]) = 0   #
	}#
Xnew = array(1, dim = c(Time , N, N, 1))#
set.seed(s)
set.seed(s)#
M2 = DAME_MH(Ys, Xnew, RE = c("additive", "multiplicative"), gammapriors = c(2, 1), dist = "Exponential", avail = matrix(1, Time , N), R =2, burn = 1000, nscan = 5000, odens = 10)
plot(M2$tau[,1], type = 'l')
tau
tau_p
plot(M2$tau[,2], type = 'l')
plot(M2$tau[,3], type = 'l')
plot(M2$tau[,4], type = 'l')
plot(M2$tau[,5], type = 'l')
plot(M2$tau[,6], type = 'l')
plot(M2$tau[,7], type = 'l')
plot(M2$kappas[,1], type = 'l')
plot(M2$kappas[,2], type = 'l')
plot(M2$kappas[,3], type = 'l')
plot(M2$kappas[,4], type = 'l')
plot(M2$kappas[,5], type = 'l')
plot(M2$s2, type = 'l')
s2
load("/Users/bomin8319/Desktop/DAME/UNdatafull2.RData")#
attach(UNdatafull)#
library(FastGP)#
library(mvtnorm)#
library(fields)#
library(reshape)#
library(MCMCpack)#
library(expm)#
library(igraph)#
library(DLFM2)#
library(coda)#
library(ggplot2)#
library(gridExtra)#
ggplotColours <- function(n = 6, h = c(0, 360) + 15){#
  if ((diff(h) %% 360) < 1) h[2] <- h[2] - 360/n#
  hcl(h = (seq(h[1], h[2], length = n)), c = 100, l = 65)#
}#
number_ticks <- function(n) {function(limits) pretty(limits, n)}
Time = 32#
N = 97#
#
# not existing countries -> all missing values imputed using model (biased)#
avail1 = matrix(1, Time, N)#
colnames(avail1) = colnames(UNdatafull$Y)#
avail1[1:8, which(colnames(avail1) %in% c("ROK", "PRK"))] =0 #North and South Korea did not joined UN voting until 1990#
avail1[1:9, which(colnames(avail1) %in% c("RUS"))] = 0 #RUS X variables not existed until 1991#
avail1[13:21, which(colnames(avail1) %in% c("IRQ"))] = 0 #IRQ under sanction
UN = DAME_MH(Y[1:Time,,], X[1:Time,,,c(1,2,3,4,5,6)], RE = c("additive", "multiplicative"), R = 2, avail = avail1, burn =5000, nscan = 25000, odens = 50)
names(UN)
plot(UN$tau[,1], type = 'l')
plot(UN$tau[,2], type = 'l')
plot(UN$tau[,3], type = 'l')
plot(UN$tau[,4], type = 'l')
plot(UN$tau[,5], type = 'l')
plot(UN$tau[,6], type = 'l')
plot(UN$tau[,7], type = 'l')
plot(UN$tau[,8], type = 'l')
plot(UN$tau[,9], type = 'l')
plot(UN$tau[,10], type = 'l')
plot(UN$tau[,11], type = 'l')
plot(UN$tau[,12], type = 'l')
plot(UN$kapaps[,1], type = 'l')
plot(UN$kappas[,1], type = 'l')
plot(UN$kappas[,2], type = 'l')
plot(UN$kappas[,3], type = 'l')
plot(UN$kappas[,4], type = 'l')
plot(UN$kappas[,5], type = 'l')
plot(UN$kappas[,6], type = 'l')
plot(UN$kappas[,7], type = 'l')
plot(UN$kappas[,8], type = 'l')
plot(UN$kappas[,9], type = 'l')
plot(UN$kappas[,10], type = 'l')
beta = lapply(1:Time, function(t){summary(mcmc(UN$BETA[[t]][1:500,]))[[2]]})#
betas = list()#
for (i in 1:6) {betas[[i]] = sapply(1:Time, function(t){beta[[t]][i,]})}#
betacols= ggplotColours(6)#
plots = list()#
i= 1#
years = c(1983:2014)#
data = data.frame(cbind(years,t(betas[[i]])))#
 colnames(data)[4] = "beta"#
 f = ggplot(data, aes(x = years))#
plots[[1]]=f + geom_line(aes(y = beta), colour=betacols[1]) + geom_ribbon(aes(ymin = X2.5., ymax = X97.5.), alpha = 0.1) + scale_x_continuous(breaks=number_ticks(8))+ylab("Intercept") + theme_minimal()#
#
color =betacols[-1]#
varname = c("log(distance)", "Polity", "Alliance", "Lower trade-to-GDP ratio", "Common Language")#
for (i in 2:6){#
years = c(1983:2014)#
data = data.frame(cbind(years,t(betas[[i]])))#
 colnames(data)[4] = "beta"#
 f = ggplot(data, aes(x = years))#
 plots[[i]] <- f + geom_line(aes(y = beta), colour=color[i-1]) + geom_ribbon(aes(ymin = X2.5., ymax = X97.5.), alpha = 0.1) + ylab(varname[i-1]) + scale_x_continuous(breaks=number_ticks(8)) + geom_hline(yintercept = 0) + theme_minimal()#
#
 }#
 marrangeGrob(plots[1:6], nrow = 2, ncol = 3, top = NULL)
summary(UN$s2)
#thetaplot#
colors = sort(rownames(UN$U[[Time]]))#
colors[which(colors == "GFR")] = "GMY"#
rownames(UN$U[[Time]])[31] = "GMY"#
	thetanew = t(sapply(1:Time, function(t){colMeans(UN$theta[[t]])}))#
	colnames(thetanew) = colnames(avail1)#
	orders = sapply(1:N, function(n){which(colors[n]== rownames(UN$U[[Time]]))})#
	thetanew = thetanew[,orders]#
	data3 = data.frame(years = years, theta = thetanew)#
	colnames(data3)[-1] = colors#
	data3new = melt(data3, id = "years")#
	colnames(data3new)[3] = "theta"#
	f <- ggplot(data3new, aes(years, theta, colour = variable, label = variable))#
	f + geom_line(size = 0.2)+#
geom_text(data = data3new[data3new$years=="1983", ], aes(label = variable), check_overlap = F, hjust = 1.3, vjust = 1, size =3, show.legend = F )+#
geom_text(data = data3new[data3new$years=="2014", ], aes(label = variable), check_overlap = F, hjust = -0.3, vjust = 1, size =3, show.legend = F )+ scale_x_continuous(breaks=number_ticks(8)) + scale_colour_discrete(name = "countries") + theme_minimal()#
#thetaplot_reduced#
ggcolors = ggplotColours(21)#
colors = sort(rownames(UN$U[[Time]])[which(rownames(UN$U[[Time]]) %in% c("USA", "CHN", "IND", "ROK","PRK","IRQ","RUS","GRG","UKR","UKG", "FRN", "GMY", "TUR", "JPN", "ISR", "SYR", "LEB", "SUD", "IRN", "AUL", "PAK", "EGY","AFG"))])#
data4new = data3new[data3new$variable %in% c("USA", "CHN", "IND", "ROK","PRK","IRQ","RUS","GRG","UKR","UKG", "FRN", "GMY", "TUR", "JPN", "ISR", "SYR", "LEB", "SUD", "IRN", "AUL", "PAK", "EGY","AFG"),]#
#
f <- ggplot(data4new, aes(years, theta, color = variable, label = variable))#
f + geom_line(size = 0.5, aes(linetype =as.factor(c(sapply(c(6:1,5:1,5:1,5:1), function(x){rep(x, Time)})))))+geom_point(size =1, aes(shape =as.factor(c(sapply(c(1:6,1:5,1:5,1:5), function(x){rep(x, Time)})))))+ scale_x_continuous(breaks=number_ticks(8)) + theme_minimal() + #
  geom_text(data = data4new[data4new$years=="1983", ], aes(label = variable), check_overlap = T, hjust = 1.3, vjust = 1, size =3, show.legend = F )+#
geom_text(data = data4new[data4new$years=="2014", ], aes(label = variable), check_overlap = T, hjust = -0.3, vjust = 1, size =3, show.legend = F )+#
  scale_color_manual(values = ggplotColours(21), name = "countries")+scale_linetype(guide = FALSE)+scale_shape(guide = FALSE)+#
  guides(colour = guide_legend(override.aes = list(shape = c(1:6,1:5,1:5,1:5), linetype = c(6:1,5:1,5:1,5:1)))) #
#
f <- ggplot(data4new, aes(years, theta, color = variable, label = variable))#
f + geom_line( aes(linetype =as.factor(c(sapply(c(6:1,5:1,5:1,5:1), function(x){rep(x, Time)})))))+ scale_x_continuous(breaks=number_ticks(8)) + theme_minimal() + #
  geom_text(data = data4new[data4new$years=="1983", ], aes(label = variable), check_overlap = F, hjust = 1.3, vjust = 1, size =3, show.legend = F )+#
  geom_text(data = data4new[data4new$years=="1988", ], aes(label = variable), check_overlap = F, hjust = 0, vjust = 1.2, size =3, show.legend = F )+#
  geom_text(data = data4new[data4new$years=="2009", ], aes(label = variable), check_overlap = F, hjust = 0, vjust = 1.2, size =3, show.legend = F )+#
  geom_text(data = data4new[data4new$years=="2014", ], aes(label = variable), check_overlap = F, hjust = -0.3, vjust = 1, size =3, show.legend = F )+#
  scale_color_manual(values = ggplotColours(21), name = "countries")+scale_linetype(guide = FALSE)+scale_shape(guide = FALSE)+#
  guides(colour = guide_legend(override.aes = list(linetype = c(6:1,5:1,5:1,5:1))))
