#coverage probability
M1_BETA = lapply(1:Time, function(t){HPDinterval(mcmc(M1$BETA[[t]]))[1,]})
BETA[[1]] = BETA[[1]] + sapply(1:Time, function(t){as.numeric(M1_BETA[[t]][1]<= beta[t,] & M1_BETA[[t]][2]>= beta[t,])})
M1_theta = lapply(1:Time, function(t){HPDinterval(mcmc(M1$theta[[t]]))[1:N,]})
THETA[[1]] = THETA[[1]] + sapply(1:Time, function(t){as.numeric(M1_theta[[t]][,1]<= theta[t,] & M1_theta[[t]][,2]>= theta[t,])})
M1_UDU = lapply(1:Time, function(t){HPDinterval(mcmc(cbind(rowSums(M1$UDUstat[[t]]), rowSds(M1$UDUstat[[t]]))))[1:2,]})
UDUstat[[1]] = UDUstat[[1]] + sapply(1:Time, function(t){as.numeric(M1_UDU[[t]][,1]<= UDUstats[t,] & M1_UDU[[t]][,2]>= UDUstats[t,])})
Error[1] = Error[1] + as.numeric(HPDinterval(mcmc(M1$s2))[1,1]<= s2 & HPDinterval(mcmc(M1$s2))[1,2]>= s2)
Error[2] = Error[2] + as.numeric(HPDinterval(mcmc(M1$tau[,1]))[,1]<= tau_p & HPDinterval(mcmc(M1$tau[,1]))[,2]>= tau_p)
Error[3] = Error[3] + as.numeric(HPDinterval(mcmc(M1$tau[,2]))[,1]<= tau_i &HPDinterval(mcmc(M1$tau[,2]))[,2]>= tau_i)
Error[4] = Error[4] + as.numeric(HPDinterval(mcmc(M1$tau[,3]))[,1]<= tau_r[1] &HPDinterval(mcmc(M1$tau[,3]))[,2]>= tau_r[1])
Error[5] = Error[5] + as.numeric(HPDinterval(mcmc(M1$tau[,4]))[,1]<= tau_r[2] &HPDinterval(mcmc(M1$tau[,4]))[,2]>= tau_r[2])
M2_BETA = lapply(1:Time, function(t){HPDinterval(mcmc(M2$BETA[[t]]))[1,]})
BETA[[2]] = BETA[[2]] + sapply(1:Time, function(t){as.numeric(M2_BETA[[t]][1]<= beta[t,] & M2_BETA[[t]][2]>= beta[t,])})
M2_theta = lapply(1:Time, function(t){HPDinterval(mcmc(M2$theta[[t]]))[1:N,]})
THETA[[2]] = THETA[[2]] + sapply(1:Time, function(t){as.numeric(M2_theta[[t]][,1]<= theta[t,] & M2_theta[[t]][,2]>= theta[t,])})
M2_UDU = lapply(1:Time, function(t){HPDinterval(mcmc(cbind(rowSums(M2$UDUstat[[t]]), rowSds(M2$UDUstat[[t]]))))[1:2,]})
UDUstat[[2]] = UDUstat[[2]] + sapply(1:Time, function(t){as.numeric(M2_UDU[[t]][,1]<= UDUstats[t,] & M2_UDU[[t]][,2]>= UDUstats[t,])})
Error2[1] = Error2[1] + as.numeric(HPDinterval(mcmc(M2$s2))[1,1]<= s2 & HPDinterval(mcmc(M2$s2))[1,2]>= s2)
Error2[2] = Error2[2] + as.numeric(HPDinterval(mcmc(M2$tau[,1]))[,1]<= tau_p & HPDinterval(mcmc(M2$tau[,1]))[,2]>= tau_p)
Error2[3] = Error2[3] + as.numeric(HPDinterval(mcmc(M2$tau[,2]))[,1]<= tau_i & HPDinterval(mcmc(M2$tau[,2]))[,2]>= tau_i)
Error2[4] = Error2[4] + as.numeric(HPDinterval(mcmc(M2$tau[,3]))[,1]<= tau_r[1] &HPDinterval(mcmc(M2$tau[,3]))[,2]>= tau_r[1])
Error2[5] = Error2[5] + as.numeric(HPDinterval(mcmc(M2$tau[,4]))[,1]<= tau_r[2] &HPDinterval(mcmc(M2$tau[,4]))[,2]>= tau_r[2])
sim = list(BETA = BETA, THETA = THETA, UDU = UDUstat, Var = rbind(Error, Error2), Kappa = Kappa)
#save(sim, file = "sim5.RData")
}
sim1 = sim
sim1
warnings()
#simulation
library(devtools)
setwd('/Users/bomin8319/Desktop/DAME/pkg/R')
load_all()
library(fields)
library(matrixStats)
library(mvtnorm)
library(FastGP)
library(LaplacesDemon)
library(MCMCpack)
library(DLFM2)
library(coda)
nsim = 1
kappas = rep(0.001, 3)
Time = 10
N = 20
R = 2
dist_ij = c()
for (i in 1:Time) {
for (j in 1:Time) {
dist_ij = c(dist_ij, abs(i-j))
}
}
dist_ij = matrix(dist_ij, Time, Time)
BETA = lapply(1:2, function(m){matrix(0, 1, Time)})
THETA = lapply(1:2, function(m){matrix(0, N, Time)})
UDUstat = lapply(1:2, function(m){matrix(0, 2, Time)})
Error = rep(0, 5)
Error2 = rep(0, 5)
#Error3 = rep(0, 5)
#Error4 = rep(0, 5)
Kappa = rep(0, 3)
for (s in 1:nsim){
print(s)
set.seed(s+2000)
tau_p = 1/rgamma(1, 2, 1)
tau_i = 1/rgamma(1, 2, 1)
tau_r = 1/rgamma(2, 2, 1)
beta = sapply(1:1, function(p){rmvnorm(1, rep(0, Time), tau_p * matrix(Exponential(dist_ij, kappas[p]), Time, Time, byrow = TRUE))})
theta = sapply(1:N, function(i){rmvnorm(1, rep(0, Time), tau_i * matrix(Exponential(dist_ij, kappas[2]), Time, Time, byrow = TRUE))})
U1 = sapply(1:N, function(i){rmvnorm(1, rep(0, Time), diag(Time))})
U2 = sapply(1:N, function(i){rmvnorm(1, rep(0, Time), diag(Time))})
U = lapply(1:Time , function(tp){cbind(U1[tp,], U2[tp,])})
D = sapply(1:2, function(r){rmvnorm(1, rep(1, Time), tau_r[r] * matrix(Exponential(dist_ij, kappas[3]), Time, Time, byrow = TRUE))})
while (sum(c(D) < 0) > 0) {
D = sapply(1:2, function(r){rmvnorm(1, rep(1, Time), tau_r[r] * matrix(Exponential(dist_ij, kappas[3]), Time, Time, byrow = TRUE))})
}
s2 = 1 / rgamma(1, 2, 1)
U2= array(0, dim = c(Time, N, R))
for (tp in 1:Time) { U2[tp, , ] = U[[tp]]}
UDU = lapply(1:Time , function(tp){U[[tp]] %*% diag(D[tp,]) %*% t(U[[tp]])})
UDUstats = t(sapply(1:Time , function(tp){c(sum(UDU[[tp]][upper.tri(UDU[[tp]])]), sd(UDU[[tp]][upper.tri(UDU[[tp]])]))}))
Ys = array(NA, dim = c(Time , N, N))
Errormat = array(0, dim = c(Time, N, N))
errors = rnorm(Time * N * (N-1) / 2, 0, sqrt(s2))
for (tp in 1:Time) {
Errormat[tp, , ][upper.tri(Errormat[tp, , ])] = errors[((tp-1)*N*(N-1)/2+1):(tp*N*(N-1)/2)]
Errormat[tp, , ] = (Errormat[tp, , ] + t(Errormat[tp, , ]))
Ys[tp, , ] = Reduce("+", lapply(1:1, function(p) {
1 * beta[tp, p]
})) + outer(theta[tp, ], theta[tp, ], "+") + UDU[[tp]] + Errormat[tp,,]
diag(Ys[tp,,]) = 0
}
Xnew = array(1, dim = c(Time , N, N, 1))
set.seed(s)
M1 = DLFM_fix2(Ys, Xnew, RE = c("additive", "multiplicative"), gammapriors = rep(c(2, 1), 5), dist = "Exponential", avail = matrix(1, Time , N), R =2, burn = 1000, nscan = 5000, odens = 10, plot =FALSE, kappas = rep(0.001, 3))
set.seed(s)
M2 = DLFM_MH2(Ys, Xnew, RE = c("additive", "multiplicative"), gammapriors = rep(c(2, 1), 5), dist = "Exponential", avail = matrix(1, Time , N), R =2, burn = 1000, nscan = 5000, odens = 10, plot =FALSE)
#coverage probability
M1_BETA = lapply(1:Time, function(t){HPDinterval(mcmc(M1$BETA[[t]]))[1,]})
BETA[[1]] = BETA[[1]] + sapply(1:Time, function(t){as.numeric(M1_BETA[[t]][1]<= beta[t,] & M1_BETA[[t]][2]>= beta[t,])})
M1_theta = lapply(1:Time, function(t){HPDinterval(mcmc(M1$theta[[t]]))[1:N,]})
THETA[[1]] = THETA[[1]] + sapply(1:Time, function(t){as.numeric(M1_theta[[t]][,1]<= theta[t,] & M1_theta[[t]][,2]>= theta[t,])})
M1_UDU = lapply(1:Time, function(t){HPDinterval(mcmc(cbind(rowSums(M1$UDUstat[[t]]), rowSds(M1$UDUstat[[t]]))))[1:2,]})
UDUstat[[1]] = UDUstat[[1]] + sapply(1:Time, function(t){as.numeric(M1_UDU[[t]][,1]<= UDUstats[t,] & M1_UDU[[t]][,2]>= UDUstats[t,])})
Error[1] = Error[1] + as.numeric(HPDinterval(mcmc(M1$s2))[1,1]<= s2 & HPDinterval(mcmc(M1$s2))[1,2]>= s2)
Error[2] = Error[2] + as.numeric(HPDinterval(mcmc(M1$tau[,1]))[,1]<= tau_p & HPDinterval(mcmc(M1$tau[,1]))[,2]>= tau_p)
Error[3] = Error[3] + as.numeric(HPDinterval(mcmc(M1$tau[,2]))[,1]<= tau_i &HPDinterval(mcmc(M1$tau[,2]))[,2]>= tau_i)
Error[4] = Error[4] + as.numeric(HPDinterval(mcmc(M1$tau[,3]))[,1]<= tau_r[1] &HPDinterval(mcmc(M1$tau[,3]))[,2]>= tau_r[1])
Error[5] = Error[5] + as.numeric(HPDinterval(mcmc(M1$tau[,4]))[,1]<= tau_r[2] &HPDinterval(mcmc(M1$tau[,4]))[,2]>= tau_r[2])
M2_BETA = lapply(1:Time, function(t){HPDinterval(mcmc(M2$BETA[[t]]))[1,]})
BETA[[2]] = BETA[[2]] + sapply(1:Time, function(t){as.numeric(M2_BETA[[t]][1]<= beta[t,] & M2_BETA[[t]][2]>= beta[t,])})
M2_theta = lapply(1:Time, function(t){HPDinterval(mcmc(M2$theta[[t]]))[1:N,]})
THETA[[2]] = THETA[[2]] + sapply(1:Time, function(t){as.numeric(M2_theta[[t]][,1]<= theta[t,] & M2_theta[[t]][,2]>= theta[t,])})
M2_UDU = lapply(1:Time, function(t){HPDinterval(mcmc(cbind(rowSums(M2$UDUstat[[t]]), rowSds(M2$UDUstat[[t]]))))[1:2,]})
UDUstat[[2]] = UDUstat[[2]] + sapply(1:Time, function(t){as.numeric(M2_UDU[[t]][,1]<= UDUstats[t,] & M2_UDU[[t]][,2]>= UDUstats[t,])})
Error2[1] = Error2[1] + as.numeric(HPDinterval(mcmc(M2$s2))[1,1]<= s2 & HPDinterval(mcmc(M2$s2))[1,2]>= s2)
Error2[2] = Error2[2] + as.numeric(HPDinterval(mcmc(M2$tau[,1]))[,1]<= tau_p & HPDinterval(mcmc(M2$tau[,1]))[,2]>= tau_p)
Error2[3] = Error2[3] + as.numeric(HPDinterval(mcmc(M2$tau[,2]))[,1]<= tau_i & HPDinterval(mcmc(M2$tau[,2]))[,2]>= tau_i)
Error2[4] = Error2[4] + as.numeric(HPDinterval(mcmc(M2$tau[,3]))[,1]<= tau_r[1] &HPDinterval(mcmc(M2$tau[,3]))[,2]>= tau_r[1])
Error2[5] = Error2[5] + as.numeric(HPDinterval(mcmc(M2$tau[,4]))[,1]<= tau_r[2] &HPDinterval(mcmc(M2$tau[,4]))[,2]>= tau_r[2])
sim = list(BETA = BETA, THETA = THETA, UDU = UDUstat, Var = rbind(Error, Error2), Kappa = Kappa)
#save(sim, file = "sim5.RData")
}
sim1 = sim
warnings()
#simulation
library(devtools)
setwd('/Users/bomin8319/Desktop/DAME/pkg/R')
load_all()
library(fields)
library(matrixStats)
library(mvtnorm)
library(FastGP)
library(LaplacesDemon)
library(MCMCpack)
library(DLFM2)
library(coda)
nsim = 1
kappas = rep(0.001, 3)
Time = 10
N = 20
R = 2
dist_ij = c()
for (i in 1:Time) {
for (j in 1:Time) {
dist_ij = c(dist_ij, abs(i-j))
}
}
dist_ij = matrix(dist_ij, Time, Time)
BETA = lapply(1:2, function(m){matrix(0, 1, Time)})
THETA = lapply(1:2, function(m){matrix(0, N, Time)})
UDUstat = lapply(1:2, function(m){matrix(0, 2, Time)})
Error = rep(0, 5)
Error2 = rep(0, 5)
#Error3 = rep(0, 5)
#Error4 = rep(0, 5)
Kappa = rep(0, 3)
for (s in 1:nsim){
print(s)
set.seed(s+2000)
tau_p = 1/rgamma(1, 2, 1)
tau_i = 1/rgamma(1, 2, 1)
tau_r = 1/rgamma(2, 2, 1)
beta = sapply(1:1, function(p){rmvnorm(1, rep(0, Time), tau_p * matrix(Exponential(dist_ij, kappas[p]), Time, Time, byrow = TRUE))})
theta = sapply(1:N, function(i){rmvnorm(1, rep(0, Time), tau_i * matrix(Exponential(dist_ij, kappas[2]), Time, Time, byrow = TRUE))})
U1 = sapply(1:N, function(i){rmvnorm(1, rep(0, Time), diag(Time))})
U2 = sapply(1:N, function(i){rmvnorm(1, rep(0, Time), diag(Time))})
U = lapply(1:Time , function(tp){cbind(U1[tp,], U2[tp,])})
D = sapply(1:2, function(r){rmvnorm(1, rep(1, Time), tau_r[r] * matrix(Exponential(dist_ij, kappas[3]), Time, Time, byrow = TRUE))})
while (sum(c(D) < 0) > 0) {
D = sapply(1:2, function(r){rmvnorm(1, rep(1, Time), tau_r[r] * matrix(Exponential(dist_ij, kappas[3]), Time, Time, byrow = TRUE))})
}
s2 = 1 / rgamma(1, 2, 1)
U2= array(0, dim = c(Time, N, R))
for (tp in 1:Time) { U2[tp, , ] = U[[tp]]}
UDU = lapply(1:Time , function(tp){U[[tp]] %*% diag(D[tp,]) %*% t(U[[tp]])})
UDUstats = t(sapply(1:Time , function(tp){c(sum(UDU[[tp]][upper.tri(UDU[[tp]])]), sd(UDU[[tp]][upper.tri(UDU[[tp]])]))}))
Ys = array(NA, dim = c(Time , N, N))
Errormat = array(0, dim = c(Time, N, N))
errors = rnorm(Time * N * (N-1) / 2, 0, sqrt(s2))
for (tp in 1:Time) {
Errormat[tp, , ][upper.tri(Errormat[tp, , ])] = errors[((tp-1)*N*(N-1)/2+1):(tp*N*(N-1)/2)]
Errormat[tp, , ] = (Errormat[tp, , ] + t(Errormat[tp, , ]))
Ys[tp, , ] = Reduce("+", lapply(1:1, function(p) {
1 * beta[tp, p]
})) + outer(theta[tp, ], theta[tp, ], "+") + UDU[[tp]] + Errormat[tp,,]
diag(Ys[tp,,]) = 0
}
Xnew = array(1, dim = c(Time , N, N, 1))
set.seed(s)
M1 = DLFM_fix2(Ys, Xnew, RE = c("additive", "multiplicative"), gammapriors = rep(c(2, 1), 5), dist = "Exponential", avail = matrix(1, Time , N), R =2, burn = 1000, nscan = 5000, odens = 10, plot =FALSE, kappas = rep(0.001, 3))
set.seed(s)
M2 = DLFM_MH2(Ys, Xnew, RE = c("additive", "multiplicative"), gammapriors = rep(c(2, 1), 5), dist = "Exponential", avail = matrix(1, Time , N), R =2, burn = 1000, nscan = 5000, odens = 10, plot =FALSE)
#coverage probability
M1_BETA = lapply(1:Time, function(t){HPDinterval(mcmc(M1$BETA[[t]]))[1,]})
BETA[[1]] = BETA[[1]] + sapply(1:Time, function(t){as.numeric(M1_BETA[[t]][1]<= beta[t,] & M1_BETA[[t]][2]>= beta[t,])})
M1_theta = lapply(1:Time, function(t){HPDinterval(mcmc(M1$theta[[t]]))[1:N,]})
THETA[[1]] = THETA[[1]] + sapply(1:Time, function(t){as.numeric(M1_theta[[t]][,1]<= theta[t,] & M1_theta[[t]][,2]>= theta[t,])})
M1_UDU = lapply(1:Time, function(t){HPDinterval(mcmc(cbind(rowSums(M1$UDUstat[[t]]), rowSds(M1$UDUstat[[t]]))))[1:2,]})
UDUstat[[1]] = UDUstat[[1]] + sapply(1:Time, function(t){as.numeric(M1_UDU[[t]][,1]<= UDUstats[t,] & M1_UDU[[t]][,2]>= UDUstats[t,])})
Error[1] = Error[1] + as.numeric(HPDinterval(mcmc(M1$s2))[1,1]<= s2 & HPDinterval(mcmc(M1$s2))[1,2]>= s2)
Error[2] = Error[2] + as.numeric(HPDinterval(mcmc(M1$tau[,1]))[,1]<= tau_p & HPDinterval(mcmc(M1$tau[,1]))[,2]>= tau_p)
Error[3] = Error[3] + as.numeric(HPDinterval(mcmc(M1$tau[,2]))[,1]<= tau_i &HPDinterval(mcmc(M1$tau[,2]))[,2]>= tau_i)
Error[4] = Error[4] + as.numeric(HPDinterval(mcmc(M1$tau[,3]))[,1]<= tau_r[1] &HPDinterval(mcmc(M1$tau[,3]))[,2]>= tau_r[1])
Error[5] = Error[5] + as.numeric(HPDinterval(mcmc(M1$tau[,4]))[,1]<= tau_r[2] &HPDinterval(mcmc(M1$tau[,4]))[,2]>= tau_r[2])
M2_BETA = lapply(1:Time, function(t){HPDinterval(mcmc(M2$BETA[[t]]))[1,]})
BETA[[2]] = BETA[[2]] + sapply(1:Time, function(t){as.numeric(M2_BETA[[t]][1]<= beta[t,] & M2_BETA[[t]][2]>= beta[t,])})
M2_theta = lapply(1:Time, function(t){HPDinterval(mcmc(M2$theta[[t]]))[1:N,]})
THETA[[2]] = THETA[[2]] + sapply(1:Time, function(t){as.numeric(M2_theta[[t]][,1]<= theta[t,] & M2_theta[[t]][,2]>= theta[t,])})
M2_UDU = lapply(1:Time, function(t){HPDinterval(mcmc(cbind(rowSums(M2$UDUstat[[t]]), rowSds(M2$UDUstat[[t]]))))[1:2,]})
UDUstat[[2]] = UDUstat[[2]] + sapply(1:Time, function(t){as.numeric(M2_UDU[[t]][,1]<= UDUstats[t,] & M2_UDU[[t]][,2]>= UDUstats[t,])})
Error2[1] = Error2[1] + as.numeric(HPDinterval(mcmc(M2$s2))[1,1]<= s2 & HPDinterval(mcmc(M2$s2))[1,2]>= s2)
Error2[2] = Error2[2] + as.numeric(HPDinterval(mcmc(M2$tau[,1]))[,1]<= tau_p & HPDinterval(mcmc(M2$tau[,1]))[,2]>= tau_p)
Error2[3] = Error2[3] + as.numeric(HPDinterval(mcmc(M2$tau[,2]))[,1]<= tau_i & HPDinterval(mcmc(M2$tau[,2]))[,2]>= tau_i)
Error2[4] = Error2[4] + as.numeric(HPDinterval(mcmc(M2$tau[,3]))[,1]<= tau_r[1] &HPDinterval(mcmc(M2$tau[,3]))[,2]>= tau_r[1])
Error2[5] = Error2[5] + as.numeric(HPDinterval(mcmc(M2$tau[,4]))[,1]<= tau_r[2] &HPDinterval(mcmc(M2$tau[,4]))[,2]>= tau_r[2])
sim = list(BETA = BETA, THETA = THETA, UDU = UDUstat, Var = rbind(Error, Error2), Kappa = Kappa)
#save(sim, file = "sim5.RData")
}
warnings()
#simulation
library(devtools)
setwd('/Users/bomin8319/Desktop/DAME/pkg/R')
load_all()
library(fields)
library(matrixStats)
library(mvtnorm)
library(FastGP)
library(LaplacesDemon)
library(MCMCpack)
library(DLFM2)
library(coda)
nsim = 1
kappas = rep(0.001, 3)
Time = 10
N = 20
R = 2
dist_ij = c()
for (i in 1:Time) {
for (j in 1:Time) {
dist_ij = c(dist_ij, abs(i-j))
}
}
dist_ij = matrix(dist_ij, Time, Time)
BETA = lapply(1:2, function(m){matrix(0, 1, Time)})
THETA = lapply(1:2, function(m){matrix(0, N, Time)})
UDUstat = lapply(1:2, function(m){matrix(0, 2, Time)})
Error = rep(0, 5)
Error2 = rep(0, 5)
#Error3 = rep(0, 5)
#Error4 = rep(0, 5)
Kappa = rep(0, 3)
for (s in 1:nsim){
print(s)
set.seed(s+2000)
tau_p = 1/rgamma(1, 2, 1)
tau_i = 1/rgamma(1, 2, 1)
tau_r = 1/rgamma(2, 2, 1)
beta = sapply(1:1, function(p){rmvnorm(1, rep(0, Time), tau_p * matrix(Exponential(dist_ij, kappas[p]), Time, Time, byrow = TRUE))})
theta = sapply(1:N, function(i){rmvnorm(1, rep(0, Time), tau_i * matrix(Exponential(dist_ij, kappas[2]), Time, Time, byrow = TRUE))})
U1 = sapply(1:N, function(i){rmvnorm(1, rep(0, Time), diag(Time))})
U2 = sapply(1:N, function(i){rmvnorm(1, rep(0, Time), diag(Time))})
U = lapply(1:Time , function(tp){cbind(U1[tp,], U2[tp,])})
D = sapply(1:2, function(r){rmvnorm(1, rep(1, Time), tau_r[r] * matrix(Exponential(dist_ij, kappas[3]), Time, Time, byrow = TRUE))})
while (sum(c(D) < 0) > 0) {
D = sapply(1:2, function(r){rmvnorm(1, rep(1, Time), tau_r[r] * matrix(Exponential(dist_ij, kappas[3]), Time, Time, byrow = TRUE))})
}
s2 = 1 / rgamma(1, 2, 1)
U2= array(0, dim = c(Time, N, R))
for (tp in 1:Time) { U2[tp, , ] = U[[tp]]}
UDU = lapply(1:Time , function(tp){U[[tp]] %*% diag(D[tp,]) %*% t(U[[tp]])})
UDUstats = t(sapply(1:Time , function(tp){c(sum(UDU[[tp]][upper.tri(UDU[[tp]])]), sd(UDU[[tp]][upper.tri(UDU[[tp]])]))}))
Ys = array(NA, dim = c(Time , N, N))
Errormat = array(0, dim = c(Time, N, N))
errors = rnorm(Time * N * (N-1) / 2, 0, sqrt(s2))
for (tp in 1:Time) {
Errormat[tp, , ][upper.tri(Errormat[tp, , ])] = errors[((tp-1)*N*(N-1)/2+1):(tp*N*(N-1)/2)]
Errormat[tp, , ] = (Errormat[tp, , ] + t(Errormat[tp, , ]))
Ys[tp, , ] = Reduce("+", lapply(1:1, function(p) {
1 * beta[tp, p]
})) + outer(theta[tp, ], theta[tp, ], "+") + UDU[[tp]] + Errormat[tp,,]
diag(Ys[tp,,]) = 0
}
Xnew = array(1, dim = c(Time , N, N, 1))
set.seed(s)
M1 = DLFM_fix2(Ys, Xnew, RE = c("additive", "multiplicative"), gammapriors = rep(c(2, 1), 5), dist = "Exponential", avail = matrix(1, Time , N), R =2, burn = 1000, nscan = 5000, odens = 10, plot =FALSE, kappas = rep(0.001, 3))
set.seed(s)
M2 = DLFM_MH2(Ys, Xnew, RE = c("additive", "multiplicative"), gammapriors = rep(c(2, 1), 5), dist = "Exponential", avail = matrix(1, Time , N), R =2, burn = 1000, nscan = 5000, odens = 10, plot =FALSE)
#coverage probability
M1_BETA = lapply(1:Time, function(t){HPDinterval(mcmc(M1$BETA[[t]]))[1,]})
BETA[[1]] = BETA[[1]] + sapply(1:Time, function(t){as.numeric(M1_BETA[[t]][1]<= beta[t,] & M1_BETA[[t]][2]>= beta[t,])})
M1_theta = lapply(1:Time, function(t){HPDinterval(mcmc(M1$theta[[t]]))[1:N,]})
THETA[[1]] = THETA[[1]] + sapply(1:Time, function(t){as.numeric(M1_theta[[t]][,1]<= theta[t,] & M1_theta[[t]][,2]>= theta[t,])})
M1_UDU = lapply(1:Time, function(t){HPDinterval(mcmc(cbind(rowSums(M1$UDUstat[[t]]), rowSds(M1$UDUstat[[t]]))))[1:2,]})
UDUstat[[1]] = UDUstat[[1]] + sapply(1:Time, function(t){as.numeric(M1_UDU[[t]][,1]<= UDUstats[t,] & M1_UDU[[t]][,2]>= UDUstats[t,])})
Error[1] = Error[1] + as.numeric(HPDinterval(mcmc(M1$s2))[1,1]<= s2 & HPDinterval(mcmc(M1$s2))[1,2]>= s2)
Error[2] = Error[2] + as.numeric(HPDinterval(mcmc(M1$tau[,1]))[,1]<= tau_p & HPDinterval(mcmc(M1$tau[,1]))[,2]>= tau_p)
Error[3] = Error[3] + as.numeric(HPDinterval(mcmc(M1$tau[,2]))[,1]<= tau_i &HPDinterval(mcmc(M1$tau[,2]))[,2]>= tau_i)
Error[4] = Error[4] + as.numeric(HPDinterval(mcmc(M1$tau[,3]))[,1]<= tau_r[1] &HPDinterval(mcmc(M1$tau[,3]))[,2]>= tau_r[1])
Error[5] = Error[5] + as.numeric(HPDinterval(mcmc(M1$tau[,4]))[,1]<= tau_r[2] &HPDinterval(mcmc(M1$tau[,4]))[,2]>= tau_r[2])
M2_BETA = lapply(1:Time, function(t){HPDinterval(mcmc(M2$BETA[[t]]))[1,]})
BETA[[2]] = BETA[[2]] + sapply(1:Time, function(t){as.numeric(M2_BETA[[t]][1]<= beta[t,] & M2_BETA[[t]][2]>= beta[t,])})
M2_theta = lapply(1:Time, function(t){HPDinterval(mcmc(M2$theta[[t]]))[1:N,]})
THETA[[2]] = THETA[[2]] + sapply(1:Time, function(t){as.numeric(M2_theta[[t]][,1]<= theta[t,] & M2_theta[[t]][,2]>= theta[t,])})
M2_UDU = lapply(1:Time, function(t){HPDinterval(mcmc(cbind(rowSums(M2$UDUstat[[t]]), rowSds(M2$UDUstat[[t]]))))[1:2,]})
UDUstat[[2]] = UDUstat[[2]] + sapply(1:Time, function(t){as.numeric(M2_UDU[[t]][,1]<= UDUstats[t,] & M2_UDU[[t]][,2]>= UDUstats[t,])})
Error2[1] = Error2[1] + as.numeric(HPDinterval(mcmc(M2$s2))[1,1]<= s2 & HPDinterval(mcmc(M2$s2))[1,2]>= s2)
Error2[2] = Error2[2] + as.numeric(HPDinterval(mcmc(M2$tau[,1]))[,1]<= tau_p & HPDinterval(mcmc(M2$tau[,1]))[,2]>= tau_p)
Error2[3] = Error2[3] + as.numeric(HPDinterval(mcmc(M2$tau[,2]))[,1]<= tau_i & HPDinterval(mcmc(M2$tau[,2]))[,2]>= tau_i)
Error2[4] = Error2[4] + as.numeric(HPDinterval(mcmc(M2$tau[,3]))[,1]<= tau_r[1] &HPDinterval(mcmc(M2$tau[,3]))[,2]>= tau_r[1])
Error2[5] = Error2[5] + as.numeric(HPDinterval(mcmc(M2$tau[,4]))[,1]<= tau_r[2] &HPDinterval(mcmc(M2$tau[,4]))[,2]>= tau_r[2])
sim = list(BETA = BETA, THETA = THETA, UDU = UDUstat, Var = rbind(Error, Error2), Kappa = Kappa)
#save(sim, file = "sim5.RData")
}
sim1 = sim
warnings()
rtaur_fc
dim(d)
dim(D)
setwd('/Users/bomin8319/Desktop/DAME/pkg/R')
load_all()
UN = DLFM_MH2(Y[1:32,,], X[1:32,,,1:6], RE = c("additive", "multiplicative"), R = 2, avail = avail1, burn =0, nscan = 100, odens = 1, plot = FALSE)
load("/Users/bomin8319/Desktop/DAME/UNdatafull.RData")
attach(UNdatafull)
library(FastGP)
library(mvtnorm)
library(fields)
library(reshape)
library(MCMCpack)
library(expm)
library(igraph)
library(DLFM2)
library(coda)
library(ggplot2)
library(gridExtra)
ggplotColours <- function(n = 6, h = c(0, 360) + 15){
if ((diff(h) %% 360) < 1) h[2] <- h[2] - 360/n
hcl(h = (seq(h[1], h[2], length = n)), c = 100, l = 65)
}
number_ticks <- function(n) {function(limits) pretty(limits, n)}
# 74 country version
# not existing countries -> all missing values imputed using model (biased)
avail1 = matrix(1, 32, 74)
avail1[1:8, c(71, 36)] =0 #North and South Korea did not joined UN voting until 1990
avail1[1:10, 72] = 0 #GRG no voted until 1992
avail1[1:9, 73] = 0 #RUS X variables not existed until 1991
avail1[1:9, 74] = 0 #UKR not existed until 1991
avail1[13:21, 29] = 0 #IRQ under sanction
Time = 32
N = 74
Degrees = vapply(1:Time, function(tp) {rowSums(Y[tp,,], na.rm = TRUE)}, rep(0, N))
corr = vapply(1:31, function(l) {cor(Degrees[1:(N*(Time - l))], Degrees[(1 + N*l):(N*Time)], use = "complete")}, 0)
plot(corr, type = 'l')
# secondDegrees = sapply(1:Time, function(tp) {rowSums(Y[tp,which(avail1[tp,]==1),which(avail1[tp,]==1)] %*% Y[tp,which(avail1[tp,]==1),which(avail1[tp,]==1)], na.rm = TRUE)})
# corr2 = vapply(1:31, function(l) {
# a = unlist(secondDegrees[1:(Time - l)])
# b = unlist(secondDegrees[(1 +l):Time])
# lengthab = min(length(a), length(b))
# cor(a[1:lengthab],b[1:lengthab] , use = "complete")}, 0)
# thirdDegrees = sapply(1:Time, function(tp) {rowSums(Y[tp,which(avail1[tp,]==1),which(avail1[tp,]==1)] %*% Y[tp,which(avail1[tp,]==1),which(avail1[tp,]==1)]%*% Y[tp,which(avail1[tp,]==1),which(avail1[tp,]==1)], na.rm = TRUE)})
# corr2 = vapply(1:31, function(l) {
# a = unlist(thirdDegrees[1:(Time - l)])
# b = unlist(thirdDegrees[(1 +l):Time])
# lengthab = min(length(a), length(b))
# cor(a[1:lengthab],b[1:lengthab] , use = "complete")}, 0)
setwd("/Users/bomin8319/Desktop")
UN = DLFM_MH2(Y[1:32,,], X[1:32,,,1:6], RE = c("additive", "multiplicative"), R = 2, avail = avail1, burn = 1000, nscan = 5000, odens = 10, plot = FALSE)
#simulation
library(devtools)
setwd('/Users/bomin8319/Desktop/DAME/pkg/R')
load_all()
library(fields)
library(matrixStats)
library(mvtnorm)
library(FastGP)
library(LaplacesDemon)
library(MCMCpack)
library(DLFM2)
library(coda)
nsim = 1
kappas = rep(0.001, 3)
Time = 10
N = 20
R = 2
dist_ij = c()
for (i in 1:Time) {
for (j in 1:Time) {
dist_ij = c(dist_ij, abs(i-j))
}
}
dist_ij = matrix(dist_ij, Time, Time)
BETA = lapply(1:2, function(m){matrix(0, 1, Time)})
THETA = lapply(1:2, function(m){matrix(0, N, Time)})
UDUstat = lapply(1:2, function(m){matrix(0, 2, Time)})
Error = rep(0, 5)
Error2 = rep(0, 5)
#Error3 = rep(0, 5)
#Error4 = rep(0, 5)
Kappa = rep(0, 3)
for (s in 1:nsim){
print(s)
set.seed(s+2000)
tau_p = 1/rgamma(1, 2, 1)
tau_i = 1/rgamma(1, 2, 1)
tau_r = 1/rgamma(2, 2, 1)
beta = sapply(1:1, function(p){rmvnorm(1, rep(0, Time), tau_p * matrix(Exponential(dist_ij, kappas[p]), Time, Time, byrow = TRUE))})
theta = sapply(1:N, function(i){rmvnorm(1, rep(0, Time), tau_i * matrix(Exponential(dist_ij, kappas[2]), Time, Time, byrow = TRUE))})
U1 = sapply(1:N, function(i){rmvnorm(1, rep(0, Time), diag(Time))})
U2 = sapply(1:N, function(i){rmvnorm(1, rep(0, Time), diag(Time))})
U = lapply(1:Time , function(tp){cbind(U1[tp,], U2[tp,])})
D = sapply(1:2, function(r){rmvnorm(1, rep(1, Time), tau_r[r] * matrix(Exponential(dist_ij, kappas[3]), Time, Time, byrow = TRUE))})
while (sum(c(D) < 0) > 0) {
D = sapply(1:2, function(r){rmvnorm(1, rep(1, Time), tau_r[r] * matrix(Exponential(dist_ij, kappas[3]), Time, Time, byrow = TRUE))})
}
s2 = 1 / rgamma(1, 2, 1)
U2= array(0, dim = c(Time, N, R))
for (tp in 1:Time) { U2[tp, , ] = U[[tp]]}
UDU = lapply(1:Time , function(tp){U[[tp]] %*% diag(D[tp,]) %*% t(U[[tp]])})
UDUstats = t(sapply(1:Time , function(tp){c(sum(UDU[[tp]][upper.tri(UDU[[tp]])]), sd(UDU[[tp]][upper.tri(UDU[[tp]])]))}))
Ys = array(NA, dim = c(Time , N, N))
Errormat = array(0, dim = c(Time, N, N))
errors = rnorm(Time * N * (N-1) / 2, 0, sqrt(s2))
for (tp in 1:Time) {
Errormat[tp, , ][upper.tri(Errormat[tp, , ])] = errors[((tp-1)*N*(N-1)/2+1):(tp*N*(N-1)/2)]
Errormat[tp, , ] = (Errormat[tp, , ] + t(Errormat[tp, , ]))
Ys[tp, , ] = Reduce("+", lapply(1:1, function(p) {
1 * beta[tp, p]
})) + outer(theta[tp, ], theta[tp, ], "+") + UDU[[tp]] + Errormat[tp,,]
diag(Ys[tp,,]) = 0
}
Xnew = array(1, dim = c(Time , N, N, 1))
set.seed(s)
M1 = DLFM_fix2(Ys, Xnew, RE = c("additive", "multiplicative"), gammapriors = rep(c(2, 1), 5), dist = "Exponential", avail = matrix(1, Time , N), R =2, burn = 1000, nscan = 5000, odens = 10, plot =FALSE, kappas = rep(0.001, 3))
#simulation
library(devtools)
setwd('/Users/bomin8319/Desktop/DAME/pkg/R')
load_all()
library(fields)
library(matrixStats)
library(mvtnorm)
library(FastGP)
library(LaplacesDemon)
library(MCMCpack)
library(DLFM2)
library(coda)
nsim = 1
kappas = rep(0.001, 3)
Time = 10
N = 20
R = 2
dist_ij = c()
for (i in 1:Time) {
for (j in 1:Time) {
dist_ij = c(dist_ij, abs(i-j))
}
}
dist_ij = matrix(dist_ij, Time, Time)
BETA = lapply(1:2, function(m){matrix(0, 1, Time)})
THETA = lapply(1:2, function(m){matrix(0, N, Time)})
UDUstat = lapply(1:2, function(m){matrix(0, 2, Time)})
Error = rep(0, 5)
Error2 = rep(0, 5)
#Error3 = rep(0, 5)
#Error4 = rep(0, 5)
Kappa = rep(0, 3)
s =1
print(s)
set.seed(s+2000)
tau_p = 1/rgamma(1, 2, 1)
tau_i = 1/rgamma(1, 2, 1)
tau_r = 1/rgamma(2, 2, 1)
beta = sapply(1:1, function(p){rmvnorm(1, rep(0, Time), tau_p * matrix(Exponential(dist_ij, kappas[p]), Time, Time, byrow = TRUE))})
theta = sapply(1:N, function(i){rmvnorm(1, rep(0, Time), tau_i * matrix(Exponential(dist_ij, kappas[2]), Time, Time, byrow = TRUE))})
U1 = sapply(1:N, function(i){rmvnorm(1, rep(0, Time), diag(Time))})
U2 = sapply(1:N, function(i){rmvnorm(1, rep(0, Time), diag(Time))})
U = lapply(1:Time , function(tp){cbind(U1[tp,], U2[tp,])})
D = sapply(1:2, function(r){rmvnorm(1, rep(1, Time), tau_r[r] * matrix(Exponential(dist_ij, kappas[3]), Time, Time, byrow = TRUE))})
while (sum(c(D) < 0) > 0) {
D = sapply(1:2, function(r){rmvnorm(1, rep(1, Time), tau_r[r] * matrix(Exponential(dist_ij, kappas[3]), Time, Time, byrow = TRUE))})
}
s2 = 1 / rgamma(1, 2, 1)
U2= array(0, dim = c(Time, N, R))
for (tp in 1:Time) { U2[tp, , ] = U[[tp]]}
UDU = lapply(1:Time , function(tp){U[[tp]] %*% diag(D[tp,]) %*% t(U[[tp]])})
UDUstats = t(sapply(1:Time , function(tp){c(sum(UDU[[tp]][upper.tri(UDU[[tp]])]), sd(UDU[[tp]][upper.tri(UDU[[tp]])]))}))
Ys = array(NA, dim = c(Time , N, N))
Errormat = array(0, dim = c(Time, N, N))
errors = rnorm(Time * N * (N-1) / 2, 0, sqrt(s2))
for (tp in 1:Time) {
Errormat[tp, , ][upper.tri(Errormat[tp, , ])] = errors[((tp-1)*N*(N-1)/2+1):(tp*N*(N-1)/2)]
Errormat[tp, , ] = (Errormat[tp, , ] + t(Errormat[tp, , ]))
Ys[tp, , ] = Reduce("+", lapply(1:1, function(p) {
1 * beta[tp, p]
})) + outer(theta[tp, ], theta[tp, ], "+") + UDU[[tp]] + Errormat[tp,,]
diag(Ys[tp,,]) = 0
}
Xnew = array(1, dim = c(Time , N, N, 1))
set.seed(s)
M1 = DLFM_fix2(Ys, Xnew, RE = c("additive", "multiplicative"), gammapriors = rep(c(2, 1), 5), dist = "Exponential", avail = matrix(1, Time , N), R =2, burn = 1000, nscan = 5000, odens = 10, plot =FALSE, kappas = rep(0.001, 3))
M1 = DLFM_fix2(Ys, Xnew, RE = c("additive", "multiplicative"), gammapriors = rep(c(2, 1), 5), dist = "Exponential", avail = matrix(1, Time , N), R =2, burn = 0, nscan = 100, odens = 1, plot =FALSE, kappas = rep(0.001, 3))
warnings()
setwd('/Users/bomin8319/Desktop/DAME/pkg/R')
load_all()
M1 = DLFM_fix2(Ys, Xnew, RE = c("additive", "multiplicative"), gammapriors = rep(c(2, 1), 5), dist = "Exponential", avail = matrix(1, Time , N), R =2, burn = 0, nscan = 100, odens = 1, plot =FALSE, kappas = rep(0.001, 3))
warnings()
setwd('/Users/bomin8319/Desktop/DAME/pkg/R')
load_all()
M1 = DLFM_fix2(Ys, Xnew, RE = c("additive", "multiplicative"), gammapriors = rep(c(2, 1), 5), dist = "Exponential", avail = matrix(1, Time , N), R =2, burn = 0, nscan = 100, odens = 1, plot =FALSE, kappas = rep(0.001, 3))
setwd('/Users/bomin8319/Desktop/DAME/pkg')
load_all()
M1 = DLFM_fix2(Ys, Xnew, RE = c("additive", "multiplicative"), gammapriors = rep(c(2, 1), 5), dist = "Exponential", avail = matrix(1, Time , N), R =2, burn = 0, nscan = 100, odens = 1, plot =FALSE, kappas = rep(0.001, 3))
DLFM_fix2
