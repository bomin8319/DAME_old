v(net)
network.vertex.names(net)
head(edge)
head(as.matrix(PSU[,1:2]))
dim(as.matrix(PSU[,1:2]))
edgelist = as.matrix(PSU[,1:2])
dim(edgelist)
net= network(edgelist, directed = FALSE)
net
net = network.initialize(length(unique(union(PSU[,1], PSU[,2]))))
net
network.vertex.names(net) = node_names
network.vertex.names(net) = unique(union(PSU[,1], PSU[,2]))
net[as.matrix(PSU[,1:2])] = 1
net
net = network.initialize(length(unique(union(PSU[,1], PSU[,2]))), directed = FALSE)
network.vertex.names(net) = unique(union(PSU[,1], PSU[,2]))#
net[as.matrix(PSU[,1:2])] = 1#
#
edgelist = as.matrix(PSU[,1:2])
net
network.vertex.names(net)
as.matrix(PSU[,1:2])
net = network.initialize(length(unique(union(PSU[,1], PSU[,2]))), directed = FALSE)#
network.vertex.names(net) = unique(union(PSU[,1], PSU[,2]))#
#
edgelist = as.matrix(PSU[,1:2])#
rownames(edgelist) = NULL#
net[edgelist] = 1
net
net = network.initialize(length(unique(union(PSU[,1], PSU[,2]))), directed = FALSE, mutliple = TRUE)#
network.vertex.names(net) = unique(union(PSU[,1], PSU[,2]))#
#
edgelist = as.matrix(PSU[,1:2])#
rownames(edgelist) = NULL#
net[edgelist] = 1
net
net = network.initialize(length(unique(union(PSU[,1], PSU[,2]))), directed = FALSE, mutliple = TRUE, loops = TRUE)
?network.initialize
net = network.initialize(length(unique(union(PSU[,1], PSU[,2]))), directed = FALSE, hyper = TRUE, loops = TRUE, multiple = TRUE)
net
network.vertex.names(net) = unique(union(PSU[,1], PSU[,2]))#
#
edgelist = as.matrix(PSU[,1:2])
rownames(edgelist) = NULL#
net[edgelist] = 1
library(ggnet2)
adjacency = matrix(0, length(unique(union(PSU[,1], PSU[,2])), length(unique(union(PSU[,1], PSU[,2])))
)
N = length(unique(union(PSU[,1], PSU[,2])))
N
adjacency = matrix(0, N, N)
G = graph.data.frame(edgelist, directed = FALSE)
G
A <- as_adjacency_matrix(G,type="both",names=TRUE,sparse=FALSE)
A
ã…Ž
G
net = network(G)
?network
net = network(G, directed = FALSE)
net = network(edgelist, directed = FALSE)
net
plot(G)
library(ggnet)
library(network)#
library(sna)#
library(ggplot2)
install.packages("GGally")#
library(GGally)
library(ggnet2)
ggnet2
load("/Users/bomin8319/Desktop/PointProcess/edge.RData")#
edge = PSU#
load("/Users/bomin8319/Desktop/PointProcess/node.RData")#
#
UPHershey = unique(node$College)[-c(2,5,8,9,13,15,19,21,22,26,27,28,31,37,38,40,41,44,47,49)]#
node_UPHershey = node[which(node$College %in% UPHershey),]#
#
edge_UPHershey = edge[which(edge$Source %in% node_UPHershey$Id & edge$Target %in% node_UPHershey$Id),]#
#
edge = edge_UPHershey#
node = node_UPHershey
head(edge)
head(Nod)
head(node)
node = node_UPHershey[,c(1:5)]
head(node)
dim(node)
length(unique(node$Depat))
length(unique(node$Department))
uniqdept = unique(node$Department)
hi = node[node$Department == uniqdept[d],]
uniqdept = unique(node$Department)
d
d = 1
hi = node[node$Department == uniqdept[d],]
hi
#some dept got different key code although same college -> unify them#
uniqdept = unique(node$Department)#
for (d in 1:length(uniqdept)) {#
	hi = node[node$Department == uniqdept[d],]#
	if (length(unique(hi$Dept)) >1) browser()#
}
d
hi
unique(hi[,-c(1:2)])
Q
#some dept got different key code although same college -> unify them#
uniqdept = unique(node$Department)#
for (d in 1:length(uniqdept)) {#
	hi = node[node$Department == uniqdept[d],-1]#
	if (length(unique(hi$Dept.Key)) >1) {#
	}#
}
#some dept got different key code although same college -> unify them#
uniqdept = unique(node$Department)#
for (d in 1:length(uniqdept)) {#
	hi = node[node$Department == uniqdept[d],-1]#
	if (length(unique(hi$Dept.Key)) >1) {#
		browser()#
	}#
}
d
Q
uniqdept = unique(node$Department)#
for (d in 1:length(uniqdept)) {#
	hi = node[node$Department == uniqdept[d],-1]#
	if (length(unique(hi$Dept.Key)) >1) {#
		browser()#
	}#
}
d
hi
d = 4
hi = node[node$Department == uniqdept[d],-1]
hi
length(unique(hi$Dept.Key))
(length(unique(hi$Dept.Key)) >1)
Q
#some dept got different key code although same college -> unify them#
uniqdept = unique(node$Department)#
for (d in 1:length(uniqdept)) {#
	hi = node[node$Department == uniqdept[d],-1]#
	if (length(unique(hi$Dept.Key)) >1) {#
		browser()#
	}#
}
d
length(uniqdept)
Q
uniqdept = unique(node$Department)#
for (d in 1:length(uniqdept)) {#
	hi = node[node$Department == uniqdept[d],-1]#
	if (length(unique(hi$Dept.Key)) >1) {#
		browser()#
	}#
}
d
uniqdept = unique(node$Department)#
weird = c()#
iter = 1#
for (d in 1:length(uniqdept)) {#
	hi = node[node$Department == uniqdept[d],-1]#
	if (length(unique(hi$Dept.Key)) >1) {#
		weird[iter] = d#
		iter = iter+1#
	}#
}
Q
uniqdept = unique(node$Department)#
weird = c()#
iter = 1#
for (d in 1:length(uniqdept)) {#
	hi = node[node$Department == uniqdept[d],-1]#
	if (length(unique(hi$Dept.Key)) >1) {#
		weird[iter] = d#
		iter = iter+1#
	}#
}
weird
uniqdept[4]
node[node$Department == "OUTREACH",]
node[node$Department == "OUTREACH" & node$College.Key == 89,2]
min(node[node$Department == "OUTREACH" & node$College.Key == 89,2])
node[node$Department == "OUTREACH" & node$College.Key == 28,2] = min(node[node$Department == "OUTREACH" & node$College.Key == 28,2])
node[node$Department == "OUTREACH" & node$College.Key == 89,2] = min(node[node$Department == "OUTREACH" & node$College.Key == 89,2])
node[node$Department == "OUTREACH",]
node[node$Department == "OUTREACH" & node$College.Key == 1338,2] = min(node[node$Department == "OUTREACH" & node$College.Key == 1338,2])
node[node$Department == "OUTREACH",]
uniqdept = unique(node$Department)#
weird = c()#
iter = 1#
for (d in 1:length(uniqdept)) {#
	hi = node[node$Department == uniqdept[d],-1]#
	if (length(unique(hi$Dept.Key)) >1) {#
		weird[iter] = d#
		iter = iter+1#
	}#
}
weird
node[node$Department == "OUTREACH",]
unique(node[node$Department == "OUTREACH",-1])
weird
uniqdept[25]
node[node$Department == uniqdept[25],]
node[node$Department == uniqdept[25],2] = min(node[node$Department == uniqdept[25],2])
node[node$Department == uniqdept[25],]
node[node$Department == uniqdept[38],]
unique(node[node$Department == uniqdept[38],])
unique(node[node$Department == uniqdept[38],-1])
weird
node[node$Department == uniqdept[60],]
unique(node[node$Department == uniqdept[60],])
node[node$Department == uniqdept[60] & node$College.Key == 3,2]
unique(node[node$Department == uniqdept[60],-1])
weird
unique(node[node$Department == uniqdept[66],-1])
node[node$Department == uniqdept[66] & node$College.Key == 80,2] = min(node[node$Department == uniqdept[66] & node$College.Key == 80,2])
unique(node[node$Department == uniqdept[66],-1])
weird
unique(node[node$Department == uniqdept[81],-1])
node[node$Department == uniqdept[81] & node$College.Key == 23,2] = min(node[node$Department == uniqdept[81] & node$College.Key == 23,2])
unique(node[node$Department == uniqdept[81],-1])
unique(node[node$Department == uniqdept[84],-1])
node[node$Department == uniqdept[84] & node$College.Key == 3,2] = min(node[node$Department == uniqdept[84] & node$College.Key == 3,2])
unique(node[node$Department == uniqdept[84],-1])
unique(node[node$Department == uniqdept[91],-1])
unique(node[node$Department == uniqdept[4],-1])
unique(node[node$Department == uniqdept[104],-1])
node[node$Department == uniqdept[104] & node$College.Key == 32,2] = min(node[node$Department == uniqdept[104] & node$College.Key == 32,2])
unique(node[node$Department == uniqdept[104],-1])
unique(node[node$Department == uniqdept[119],-1])
node[node$Department == uniqdept[119] & node$College.Key == 14,2] = min(node[node$Department == uniqdept[119] & node$College.Key == 14,2])
unique(node[node$Department == uniqdept[119],-1])
unique(node[node$Department == uniqdept[123],-1])
node[node$Department == uniqdept[123] & node$College.Key == 4,2] = min(node[node$Department == uniqdept[123] & node$College.Key == 4,2])
unique(node[node$Department == uniqdept[123],-1])
unique(node[node$Department == uniqdept[138],-1])
node[node$Department == uniqdept[138] & node$College.Key == 3,2] = min(node[node$Department == uniqdept[138] & node$College.Key == 3,2])
unique(node[node$Department == uniqdept[138],-1])
uniqdept = unique(node$Department)#
weird = c()#
iter = 1#
for (d in 1:length(uniqdept)) {#
	hi = node[node$Department == uniqdept[d],-1]#
	if (length(unique(hi$Dept.Key)) >1) {#
		weird[iter] = d#
		iter = iter+1#
	}#
}
weir
weird
uniqdept[weird]
##############################
#dept level#
for (d in 1:nrow(edge)) {#
	a = node[which(node$Id == edge[d,1]), 2]#
	b = node[which(node$Id == edge[d,2]), 2]#
	edge[d,1] = min(a,b)#
	edge[d,2] = max(a,b)#
}#
edge2 = edge[-which(edge[,1]==edge[,2]),]#
edge3 = edge[which(edge[,1]==edge[,2]),]
head(edge2)
dept = edge2
dim(dept)
dept = unique(dept)
dim(dept)
dept = dept[,c(1,2,4,6,7,8)]
head(dept)
trimE = c(min(which(dept[,3]>=365)):nrow(dept))#
#exclude department less than 0.1% of collaboration#
activenode = as.numeric(names(table(c(dept[trimE,1], dept[trimE,2])))[which(table(c(dept[trimE,1], dept[trimE,2])) >= 25)])
activenode
length(activenode)
dept_reduced = matrix(NA, nrow = 0, ncol = 3)#
for (d in 1:nrow(dept)) {#
	if (dept[d,1] %in% activenode & dept[d,2] %in% activenode) {#
	dept1 = which(activenode == dept[d,1])#
	dept2 = which(activenode == dept[d,2])#
	dept_reduced = rbind(dept_reduced, c(min(dept1, dept2), max(dept1, dept2), dept[d,3]))		#
	}#
}#
colnames(dept_reduced) = c("i", "j", "Day")#
save(dept_reduced, file = "dept_reduced.RData")#
#
nodenew = unique(node[,2:5])#
node_reduced = data.frame(Id = 1:127, OriginalId = activenode)#
node_reduced$Name = sapply(1:127, function(i) {as.character(unique(nodenew[which(nodenew$Dept.Key==node_reduced[i,2]),2])[1])})
head(dept_reduced)
head(node_reduced)
dim(node_reduced)
node_reduced[,2]
dim(dept)
25255*0.001
dim(dept)
length(unique(union(dept[,1], dept[,2])))
nodenew = unique(node[,2:5])#
node_reduced = data.frame(Id = 1:length(activenode), OriginalId = activenode)#
node_reduced$Name = sapply(1:length(activenode), function(i) {as.character(unique(nodenew[which(nodenew$Dept.Key==node_reduced[i,2]),2])[1])})
tail(node_reduced)
node_reduced = data.frame(Id = 1:length(activenode), OriginalId = activenode)
head(Node_reduced)
head(node_reduced)
head(nodenew)
node_reduced = cbind(node_reduced, nodenew[sapply(1:length(activenode), function(i) {which(nodenew$Dept.Key == activenode[i])}),])
head(node_reduced)
nodenew = unique(node[,2:5])#
node_reduced = data.frame(Id = 1:length(activenode), OriginalId = activenode)#
node_reduced = cbind(node_reduced, nodenew[sapply(1:length(activenode), function(i) {which(nodenew$Dept.Key == activenode[i])}),-1])
head(node_reduced)
tail(node_reduced)
unique(node_reduced[,4:5])
head(dept_reduced)
head(Dept)
head(dept)
load("/Users/bomin8319/Desktop/PointProcess/edge.RData")#
edge = PSU#
load("/Users/bomin8319/Desktop/PointProcess/node.RData")#
#
UPHershey = unique(node$College)[-c(2,5,8,9,13,15,19,21,22,26,27,28,31,37,38,40,41,44,47,49)]#
node_UPHershey = node[which(node$College %in% UPHershey),]#
#
edge_UPHershey = edge[which(edge$Source %in% node_UPHershey$Id & edge$Target %in% node_UPHershey$Id),]#
#
edge = edge_UPHershey#
node = node_UPHershey[,c(1:5)]#
#
#some dept got different key code although same college -> unify them#
uniqdept = unique(node$Department)#
weird = c()#
iter = 1#
for (d in 1:length(uniqdept)) {#
	hi = node[node$Department == uniqdept[d],-1]#
	if (length(unique(hi$Dept.Key)) >1) {#
		weird[iter] = d#
		iter = iter+1#
	}#
}#
#
node[node$Department == "OUTREACH" & node$College.Key == 1338,2] = min(node[node$Department == "OUTREACH" & node$College.Key == 1338,2])#
node[node$Department == "OUTREACH" & node$College.Key == 28,2] = min(node[node$Department == "OUTREACH" & node$College.Key == 28,2])#
node[node$Department == "OUTREACH" & node$College.Key == 89,2] = min(node[node$Department == "OUTREACH" & node$College.Key == 89,2])#
node[node$Department == uniqdept[25],2] = min(node[node$Department == uniqdept[25],2])#
node[node$Department == uniqdept[66] & node$College.Key == 80,2] = min(node[node$Department == uniqdept[66] & node$College.Key == 80,2])#
node[node$Department == uniqdept[81] & node$College.Key == 23,2] = min(node[node$Department == uniqdept[81] & node$College.Key == 23,2])#
node[node$Department == uniqdept[84] & node$College.Key == 3,2] = min(node[node$Department == uniqdept[84] & node$College.Key == 3,2])#
node[node$Department == uniqdept[104] & node$College.Key == 32,2] = min(node[node$Department == uniqdept[104] & node$College.Key == 32,2])#
node[node$Department == uniqdept[119] & node$College.Key == 14,2] = min(node[node$Department == uniqdept[119] & node$College.Key == 14,2])#
node[node$Department == uniqdept[123] & node$College.Key == 4,2] = min(node[node$Department == uniqdept[123] & node$College.Key == 4,2])#
node[node$Department == uniqdept[138] & node$College.Key == 3,2] = min(node[node$Department == uniqdept[138] & node$College.Key == 3,2])#
#
##############################
#dept level#
for (d in 1:nrow(edge)) {#
	a = node[which(node$Id == edge[d,1]), 2]#
	b = node[which(node$Id == edge[d,2]), 2]#
	edge[d,1] = min(a,b)#
	edge[d,2] = max(a,b)#
}#
edge2 = edge[-which(edge[,1]==edge[,2]),]#
edge3 = edge[which(edge[,1]==edge[,2]),]#
#
#samecollege#
dept = edge2#
dept = unique(dept)#
dept = dept[,c(1,2,4,6,7,8)]#
#
#delete departments which appears less than 25 collaborations#
trimE = c(min(which(dept[,3]>=365)):nrow(dept))#
#exclude department less than 0.1% of collaboration#
activenode = as.numeric(names(table(c(dept[trimE,1], dept[trimE,2])))[which(table(c(dept[trimE,1], dept[trimE,2])) >= 25)])#
#
dept_reduced = matrix(NA, nrow = 0, ncol = 6)#
for (d in 1:nrow(dept)) {#
	if (dept[d,1] %in% activenode & dept[d,2] %in% activenode) {#
	dept1 = which(activenode == dept[d,1])#
	dept2 = which(activenode == dept[d,2])#
	dept_reduced = rbind(dept_reduced, c(min(dept1, dept2), max(dept1, dept2), dept[d,3:6]))		#
	}#
}#
colnames(dept_reduced) = c("i", "j", "Day")#
save(dept_reduced, file = "dept_reduced.RData")#
#
nodenew = unique(node[,2:5])#
node_reduced = data.frame(Id = 1:length(activenode), OriginalId = activenode)#
node_reduced = cbind(node_reduced, nodenew[sapply(1:length(activenode), function(i) {which(nodenew$Dept.Key == activenode[i])}),-1])
head(dept_reduced)
dept_reduced = matrix(NA, nrow = 0, ncol = 6)#
for (d in 1:nrow(dept)) {#
	if (dept[d,1] %in% activenode & dept[d,2] %in% activenode) {#
	dept1 = which(activenode == dept[d,1])#
	dept2 = which(activenode == dept[d,2])#
	dept_reduced = rbind(dept_reduced, c(min(dept1, dept2), max(dept1, dept2), dept[d,3:6]))		#
	}#
}
head(dept_reduced)
dept_reduced = data.frame(NA, nrow = 0, ncol = 6)
head(dept_reduced)
dept_reduced = matrix(NA, nrow = 0, ncol = 5)#
for (d in 1:nrow(dept)) {#
	if (dept[d,1] %in% activenode & dept[d,2] %in% activenode) {#
	dept1 = which(activenode == dept[d,1])#
	dept2 = which(activenode == dept[d,2])#
	dept_reduced = rbind(dept_reduced, c(min(dept1, dept2), max(dept1, dept2), dept[d,c(3,5,6)]))		#
	}#
}
head(dept_reduced)
colnames(dept_reduced)
colnames(dept_reduced)[1:2] = c("i", "j")
head(dept_reduced)
save(dept_reduced, file = "dept_reduced.RData")#
#
nodenew = unique(node[,2:5])#
node_reduced = data.frame(Id = 1:length(activenode), OriginalId = activenode)#
node_reduced = cbind(node_reduced, nodenew[sapply(1:length(activenode), function(i) {which(nodenew$Dept.Key == activenode[i])}),-1])
head(node_reduced)
head(node)
node_reduced$faculty = 0#
for (d in 1:nrow(node_reduced)) {#
	fac1 = sum(node$Dept.Key == node_reduced[d,2])#
	node_reduced$faculty[d] =fac1#
}
head(node_reduced)
node_reduced$faculty
node_reduced[82,]
load("/Users/bomin8319/Desktop/PointProcess/edge.RData")#
edge = PSU#
load("/Users/bomin8319/Desktop/PointProcess/node.RData")#
#
UPHershey = unique(node$College)[-c(2,5,8,9,13,15,19,21,22,26,27,28,31,37,38,40,41,44,47,49)]#
node_UPHershey = node[which(node$College %in% UPHershey),]#
#
edge_UPHershey = edge[which(edge$Source %in% node_UPHershey$Id & edge$Target %in% node_UPHershey$Id),]#
#
edge = edge_UPHershey#
node = node_UPHershey[,c(1:5)]#
#
#some dept got different key code although same college -> unify them#
uniqdept = unique(node$Department)#
weird = c()#
iter = 1#
for (d in 1:length(uniqdept)) {#
	hi = node[node$Department == uniqdept[d],-1]#
	if (length(unique(hi$Dept.Key)) >1) {#
		weird[iter] = d#
		iter = iter+1#
	}#
}#
#
node[node$Department == "OUTREACH" & node$College.Key == 1338,2] = min(node[node$Department == "OUTREACH" & node$College.Key == 1338,2])#
node[node$Department == "OUTREACH" & node$College.Key == 28,2] = min(node[node$Department == "OUTREACH" & node$College.Key == 28,2])#
node[node$Department == "OUTREACH" & node$College.Key == 89,2] = min(node[node$Department == "OUTREACH" & node$College.Key == 89,2])#
node[node$Department == uniqdept[25],2] = min(node[node$Department == uniqdept[25],2])#
node[node$Department == uniqdept[66] & node$College.Key == 80,2] = min(node[node$Department == uniqdept[66] & node$College.Key == 80,2])#
node[node$Department == uniqdept[81] & node$College.Key == 23,2] = min(node[node$Department == uniqdept[81] & node$College.Key == 23,2])#
node[node$Department == uniqdept[84] & node$College.Key == 3,2] = min(node[node$Department == uniqdept[84] & node$College.Key == 3,2])#
node[node$Department == uniqdept[104] & node$College.Key == 32,2] = min(node[node$Department == uniqdept[104] & node$College.Key == 32,2])#
node[node$Department == uniqdept[119] & node$College.Key == 14,2] = min(node[node$Department == uniqdept[119] & node$College.Key == 14,2])#
node[node$Department == uniqdept[123] & node$College.Key == 4,2] = min(node[node$Department == uniqdept[123] & node$College.Key == 4,2])#
node[node$Department == uniqdept[138] & node$College.Key == 3,2] = min(node[node$Department == uniqdept[138] & node$College.Key == 3,2])#
#
##############################
#dept level#
for (d in 1:nrow(edge)) {#
	a = node[which(node$Id == edge[d,1]), 2]#
	b = node[which(node$Id == edge[d,2]), 2]#
	edge[d,1] = min(a,b)#
	edge[d,2] = max(a,b)#
}#
edge2 = edge[-which(edge[,1]==edge[,2]),]#
edge3 = edge[which(edge[,1]==edge[,2]),]#
#
#samecollege#
dept = edge2#
dept = unique(dept)#
dept = dept[,c(1,2,4,6,7,8)]#
#
#delete departments which appears less than 25 collaborations#
trimE = c(min(which(dept[,3]>=365)):nrow(dept))#
#exclude department less than 0.1% of collaboration#
activenode = as.numeric(names(table(c(dept[trimE,1], dept[trimE,2])))[which(table(c(dept[trimE,1], dept[trimE,2])) >= 25)])#
#
dept_reduced = matrix(NA, nrow = 0, ncol = 5)#
for (d in 1:nrow(dept)) {#
	if (dept[d,1] %in% activenode & dept[d,2] %in% activenode) {#
	dept1 = which(activenode == dept[d,1])#
	dept2 = which(activenode == dept[d,2])#
	dept_reduced = rbind(dept_reduced, c(min(dept1, dept2), max(dept1, dept2), dept[d,c(3,5,6)]))		#
	}#
}#
save(dept_reduced, file = "dept_reduced.RData")#
#
nodenew = unique(node[,2:5])#
node_reduced = data.frame(Id = 1:length(activenode), OriginalId = activenode)#
node_reduced = cbind(node_reduced, nodenew[sapply(1:length(activenode), function(i) {which(nodenew$Dept.Key == activenode[i])}),-1])#
#size of faculty#
node_reduced$faculty = 0#
for (d in 1:nrow(node_reduced)) {#
	fac1 = sum(node$Dept.Key == node_reduced[d,2])#
	node_reduced$faculty[d] =fac1#
}#
#
save(node_reduced, file = "node_reduced.RData")
head(dept_reduced)
dim(dept_reduced)
colnames(dept_reduced)[1:2] = c("i", "j")
save(dept_reduced, file = "dept_reduced.RData")
head(dept_reduced)
dim(dept_reduced)
dim(node_reduced)
unique(dept_reduced$day)
unique(dept_reduced[,3])
class(dept_reduced)
class(dept_reduced$day)
head(dept_reduced)
colnames(dept_reduced) = c("i", "j", "day", "amt.awarded", "collaborator")
class(dept_reduced$day)
head(dept_reduced)
colnames(dept_reduced)
save(dept_reduced, file = "dept_reduced.RData")
length(unique(dept_reduced$day))
unique(dept_reduced$day)
length(unique(dept_reduced[,3]))
dim(node_reduced)
length(unique(union(dept_reduced[,1], dept_reduced[,2])))
dim(dept_reduced)
dim(unique(dept_reduced))
hi = unique(dept_reduced)
hi
dim(hi)
dim(dept_reduced)
dim(dept)
dim(unique(dept))
load("/Users/bomin8319/Desktop/PointProcess/edge.RData")#
edge = PSU#
load("/Users/bomin8319/Desktop/PointProcess/node.RData")#
#
UPHershey = unique(node$College)[-c(2,5,8,9,13,15,19,21,22,26,27,28,31,37,38,40,41,44,47,49)]#
node_UPHershey = node[which(node$College %in% UPHershey),]#
#
edge_UPHershey = edge[which(edge$Source %in% node_UPHershey$Id & edge$Target %in% node_UPHershey$Id),]#
#
edge = edge_UPHershey#
node = node_UPHershey[,c(1:5)]#
#
#some dept got different key code although same college -> unify them#
uniqdept = unique(node$Department)#
weird = c()#
iter = 1#
for (d in 1:length(uniqdept)) {#
	hi = node[node$Department == uniqdept[d],-1]#
	if (length(unique(hi$Dept.Key)) >1) {#
		weird[iter] = d#
		iter = iter+1#
	}#
}#
#
node[node$Department == "OUTREACH" & node$College.Key == 1338,2] = min(node[node$Department == "OUTREACH" & node$College.Key == 1338,2])#
node[node$Department == "OUTREACH" & node$College.Key == 28,2] = min(node[node$Department == "OUTREACH" & node$College.Key == 28,2])#
node[node$Department == "OUTREACH" & node$College.Key == 89,2] = min(node[node$Department == "OUTREACH" & node$College.Key == 89,2])#
node[node$Department == uniqdept[25],2] = min(node[node$Department == uniqdept[25],2])#
node[node$Department == uniqdept[66] & node$College.Key == 80,2] = min(node[node$Department == uniqdept[66] & node$College.Key == 80,2])#
node[node$Department == uniqdept[81] & node$College.Key == 23,2] = min(node[node$Department == uniqdept[81] & node$College.Key == 23,2])#
node[node$Department == uniqdept[84] & node$College.Key == 3,2] = min(node[node$Department == uniqdept[84] & node$College.Key == 3,2])#
node[node$Department == uniqdept[104] & node$College.Key == 32,2] = min(node[node$Department == uniqdept[104] & node$College.Key == 32,2])#
node[node$Department == uniqdept[119] & node$College.Key == 14,2] = min(node[node$Department == uniqdept[119] & node$College.Key == 14,2])#
node[node$Department == uniqdept[123] & node$College.Key == 4,2] = min(node[node$Department == uniqdept[123] & node$College.Key == 4,2])#
node[node$Department == uniqdept[138] & node$College.Key == 3,2] = min(node[node$Department == uniqdept[138] & node$College.Key == 3,2])#
#
##############################
#dept level#
for (d in 1:nrow(edge)) {#
	a = node[which(node$Id == edge[d,1]), 2]#
	b = node[which(node$Id == edge[d,2]), 2]#
	edge[d,1] = min(a,b)#
	edge[d,2] = max(a,b)#
}#
edge2 = edge[-which(edge[,1]==edge[,2]),]#
edge3 = edge[which(edge[,1]==edge[,2]),]#
#
#samecollege#
dept = edge2#
dept = unique(dept)#
dept = dept[,c(1,2,4,6,7,8)]#
#
#delete departments which appears less than 25 collaborations#
trimE = c(min(which(dept[,3]>=365)):nrow(dept))#
#exclude department less than 0.1% of collaboration#
activenode = as.numeric(names(table(c(dept[trimE,1], dept[trimE,2])))[which(table(c(dept[trimE,1], dept[trimE,2])) >= 25)])#
#
dept_reduced = matrix(NA, nrow = 0, ncol = 5)#
for (d in 1:nrow(dept)) {#
	if (dept[d,1] %in% activenode & dept[d,2] %in% activenode) {#
	dept1 = which(activenode == dept[d,1])#
	dept2 = which(activenode == dept[d,2])#
	dept_reduced = rbind(dept_reduced, c(min(dept1, dept2), max(dept1, dept2), dept[d,c(3,5,6)]))		#
	}#
}#
colnames(dept_reduced) = c("i", "j", "day", "amt.awarded", "collaborator")#
dept_reduced = unique(dept_reduced)#
save(dept_reduced, file = "dept_reduced.RData")#
#
nodenew = unique(node[,2:5])#
node_reduced = data.frame(Id = 1:length(activenode), OriginalId = activenode)#
node_reduced = cbind(node_reduced, nodenew[sapply(1:length(activenode), function(i) {which(nodenew$Dept.Key == activenode[i])}),-1])#
#size of faculty#
node_reduced$faculty = 0#
for (d in 1:nrow(node_reduced)) {#
	fac1 = sum(node$Dept.Key == node_reduced[d,2])#
	node_reduced$faculty[d] =fac1#
}#
#
save(node_reduced, file = "node_reduced.RData")
dim(dept_reduced)
dim(node_reduced)
head(dept_reduced)
length(unique(dept_reduced[,3]))
#fix lambda#
lambda = 3#
#
#fix t#
time = 100#
#
#fix mu#
mu = 10#
#
nsim = 10000#
X_t = c()#
for (n in 1:nsim) {#
	N_t = rpois(1, lambda * time)#
	S = sort(runif(N_t, 0, time))#
	# S = cumsum(rexp(N_t, lambda))#
	A = rexp(N_t, mu)	#
	X_t[n] = sum(A*exp(-(time-S))*sin(time-S))#
}#
hist(X_t, breaks = 100)#
expected = -1/2 * lambda*mu * (exp(-time)*(sin(time)+cos(time))-1)#
abline(v = expected, col = 'red')
-1/2 * lambda*mu * (exp(-time)*(sin(time)+cos(time))-1)
#simulation 1#
library(devtools)#
setwd('/Users/bomin8319/Desktop/DAME/pkg/R')#
load_all()#
library(fields)#
library(matrixStats)#
library(mvtnorm)#
library(FastGP)#
library(LaplacesDemon)#
library(MCMCpack)#
library(DLFM2)#
library(coda)#
library(ggplot2)#
library(gridExtra)#
#
nsim = 1
# simulation 2#
kappas = rep(0.001, 4)#
Time = 10#
N = 20#
R = 2#
dist_ij = c()#
 for (i in 1:Time) {#
 for (j in 1:Time) {#
 dist_ij = c(dist_ij, abs(i-j))#
 }#
 }#
dist_ij = matrix(dist_ij, Time, Time)#
BETA = lapply(1:4, function(m){matrix(0, 1, Time)})#
THETA = lapply(1:4, function(m){matrix(0, N, Time)})#
UDUstat = lapply(1:4, function(m){matrix(0, 2, Time)})#
Error = rep(0, 5)#
Error2 = rep(0, 5)#
Error3 = rep(0, 5)#
Error4 = rep(0, 5)#
Kappa = rep(0, 3)#
#
for (s in 1:nsim){#
print(s)#
set.seed(s+200)#
    tau_p = 1/rgamma(1, 2, 1)#
    tau_i = 1/rgamma(1, 2, 1)#
    tau_r = 1/rgamma(2, 2, 1)#
    tau_u = matrix(1/rgamma(Time*R, 2, 1), Time, R)#
	beta = sapply(1:1, function(p){rmvnorm(1, rep(0, Time), tau_p * matrix(Exponential(dist_ij, kappas[p]), Time, Time, byrow = TRUE))})#
	theta = sapply(1:N, function(i){rmvnorm(1, rep(0, Time), tau_i * matrix(Exponential(dist_ij, kappas[2]), Time, Time, byrow = TRUE))}) #
	U1 = sapply(1:N, function(i){rmvnorm(1, rep(0, Time), tau_u[,1]*diag(Time))}) #
	U2 = sapply(1:N, function(i){rmvnorm(1, rep(0, Time), tau_u[,2]*diag(Time))})#
	U = lapply(1:Time , function(tp){cbind(U1[tp,], U2[tp,])})#
	D = sapply(1:2, function(r){rep(-2, Time)})#
	#while (sum(c(D) > 0) > 0) {#
	#  D = sapply(1:2, function(r){rmvnorm(1, rep(-1, Time), tau_r[r] * matrix(Exponential(dist_ij, kappas[3]), Time, Time, byrow = TRUE))})#
	#}#
	s2 = 1 / rgamma(1, 2, 1)#
	U2= array(0, dim = c(Time, N, R))#
    for (tp in 1:Time) { U2[tp, , ] = U[[tp]]}#
	UDU = lapply(1:Time , function(tp){U[[tp]] %*% diag(D[tp,]) %*% t(U[[tp]])})#
	UDUstats = t(sapply(1:Time , function(tp){c(sum(UDU[[tp]][upper.tri(UDU[[tp]])]), sd(UDU[[tp]][upper.tri(UDU[[tp]])]))}))#
	Ys = array(NA, dim = c(Time , N, N))#
	Errormat = array(0, dim = c(Time, N, N))#
	errors = rnorm(Time * N * (N-1) / 2, 0, sqrt(s2))#
	for (tp in 1:Time) {#
	  Errormat[tp, , ][upper.tri(Errormat[tp, , ])] = errors[((tp-1)*N*(N-1)/2+1):(tp*N*(N-1)/2)]#
	  Errormat[tp, , ] = (Errormat[tp, , ] + t(Errormat[tp, , ]))#
	Ys[tp, , ] = Reduce("+", lapply(1:1, function(p) {#
                    1 * beta[tp, p]#
                  })) + outer(theta[tp, ], theta[tp, ], "+") + UDU[[tp]] + Errormat[tp,,]#
	diag(Ys[tp,,]) = 0   #
	}	#
Xnew = array(1, dim = c(Time , N, N, 1))#
set.seed(s)#
M1 = DLFM_fix(Ys, Xnew, RE = c("additive", "multiplicative"), gammapriors = c(2, 1), dist = "Exponential", avail = matrix(1, Time , N), R =2, burn = 4000, nscan = 20000, odens = 40,kappas = rep(0.001, 4))#
#
set.seed(s)#
M3 = DLFM_Dunson_fixed(Ys, Xnew, RE = c("additive", "multiplicative"), gammapriors = c(2, 1), dist = "Exponential", avail = matrix(1, Time , N), R =2, burn = 2000, nscan = 10000, odens = 20, kappas = rep(0.001, 4))#
#
}#
Degrees = vapply(1:Time, function(tp) {rowSums(Ys[tp,,])}, rep(0, N))#
ggplotColours <- function(n = 6, h = c(0, 360) + 15){#
  if ((diff(h) %% 360) < 1) h[2] <- h[2] - 360/n#
  hcl(h = (seq(h[1], h[2], length = n)), c = 100, l = 65)#
}
# simulation 2#
kappas = rep(0.001, 4)#
Time = 10#
N = 20#
R = 2#
dist_ij = c()#
 for (i in 1:Time) {#
 for (j in 1:Time) {#
 dist_ij = c(dist_ij, abs(i-j))#
 }#
 }#
dist_ij = matrix(dist_ij, Time, Time)#
BETA = lapply(1:4, function(m){matrix(0, 1, Time)})#
THETA = lapply(1:4, function(m){matrix(0, N, Time)})#
UDUstat = lapply(1:4, function(m){matrix(0, 2, Time)})#
Error = rep(0, 5)#
Error2 = rep(0, 5)#
Error3 = rep(0, 5)#
Error4 = rep(0, 5)#
Kappa = rep(0, 3)#
#
for (s in 1:nsim){#
print(s)#
set.seed(s+200)#
    tau_p = 1/rgamma(1, 2, 1)#
    tau_i = 1/rgamma(1, 2, 1)#
    tau_r = 1/rgamma(2, 2, 1)#
    tau_u = matrix(1/rgamma(Time*R, 2, 1), Time, R)#
	beta = sapply(1:1, function(p){rmvnorm(1, rep(0, Time), tau_p * matrix(Exponential(dist_ij, kappas[p]), Time, Time, byrow = TRUE))})#
	theta = sapply(1:N, function(i){rmvnorm(1, rep(0, Time), tau_i * matrix(Exponential(dist_ij, kappas[2]), Time, Time, byrow = TRUE))}) #
	U1 = sapply(1:N, function(i){rmvnorm(1, rep(0, Time), tau_u[,1]*diag(Time))}) #
	U2 = sapply(1:N, function(i){rmvnorm(1, rep(0, Time), tau_u[,2]*diag(Time))})#
	U = lapply(1:Time , function(tp){cbind(U1[tp,], U2[tp,])})#
	D = sapply(1:2, function(r){rep(-2, Time)})#
	#while (sum(c(D) > 0) > 0) {#
	#  D = sapply(1:2, function(r){rmvnorm(1, rep(-1, Time), tau_r[r] * matrix(Exponential(dist_ij, kappas[3]), Time, Time, byrow = TRUE))})#
	#}#
	s2 = 1 / rgamma(1, 2, 1)#
	U2= array(0, dim = c(Time, N, R))#
    for (tp in 1:Time) { U2[tp, , ] = U[[tp]]}#
	UDU = lapply(1:Time , function(tp){U[[tp]] %*% diag(D[tp,]) %*% t(U[[tp]])})#
	UDUstats = t(sapply(1:Time , function(tp){c(sum(UDU[[tp]][upper.tri(UDU[[tp]])]), sd(UDU[[tp]][upper.tri(UDU[[tp]])]))}))#
	Ys = array(NA, dim = c(Time , N, N))#
	Errormat = array(0, dim = c(Time, N, N))#
	errors = rnorm(Time * N * (N-1) / 2, 0, sqrt(s2))#
	for (tp in 1:Time) {#
	  Errormat[tp, , ][upper.tri(Errormat[tp, , ])] = errors[((tp-1)*N*(N-1)/2+1):(tp*N*(N-1)/2)]#
	  Errormat[tp, , ] = (Errormat[tp, , ] + t(Errormat[tp, , ]))#
	Ys[tp, , ] = Reduce("+", lapply(1:1, function(p) {#
                    1 * beta[tp, p]#
                  })) + outer(theta[tp, ], theta[tp, ], "+") + UDU[[tp]] + Errormat[tp,,]#
	diag(Ys[tp,,]) = 0   #
	}	#
Xnew = array(1, dim = c(Time , N, N, 1))#
set.seed(s)#
M1 = DLFM_fix(Ys, Xnew, RE = c("additive", "multiplicative"), gammapriors = c(2, 1), dist = "Exponential", avail = matrix(1, Time , N), R =2, burn = 4000, nscan = 20000, odens = 40,kappas = rep(0.001, 4))#
#
set.seed(s)#
M3 = DLFM_Dunson_fixed(Ys, Xnew, RE = c("additive", "multiplicative"), gammapriors = c(2, 1), dist = "Exponential", avail = matrix(1, Time , N), R =2, burn = 2000, nscan = 10000, odens = 20, kappas = rep(0.001, 4))#
#
}#
Degrees = vapply(1:Time, function(tp) {rowSums(Ys[tp,,])}, rep(0, N))#
ggplotColours <- function(n = 6, h = c(0, 360) + 15){#
  if ((diff(h) %% 360) < 1) h[2] <- h[2] - 360/n#
  hcl(h = (seq(h[1], h[2], length = n)), c = 100, l = 65)#
}#
ggplotColours(2)#
#
q = list()#
for (i in 1:N) {#
	M1_degree = lapply(1:Time, function(tp) {M1$Degree[[tp]][,i]})#
	M3_degree = lapply(1:Time, function(tp) {M3$Degree[[tp]][,i]})#
	q_degree = data.frame(c(unlist(M1_degree), unlist(M3_degree)), as.factor(c(vapply(1:Time, function(tp) {rep(tp, 500)}, rep(0, 500)))), as.factor(c(rep("UDU", 5000), rep("UU", 5000))))#
	q_degree$observed = c(vapply(1:Time, function(tp) {rep(Degrees[i, tp], 500)}, rep(0, 500)))#
	colnames(q_degree) = c("Degree", "Time", "Model", "Observed")#
	q[[i]] = ggplot(q_degree, aes(x = Time, y = Degree, fill= Model,color= Model)) + geom_boxplot(outlier.size = 0.5, position = position_dodge()) + theme_minimal() + scale_color_manual(values = c("#F8766D" ,"#00BFC4", "blue")) + scale_fill_manual(values = alpha(c("#F8766D" ,"#00BFC4"), 0.5)) + geom_point(data = q_degree, aes(x = Time, y = Observed), color = "blue", size = 2, group = 1)+geom_line(data = q_degree, aes(x = Time, y = Observed), color = "blue", size = 0.2, group = 1)+theme(legend.position = "bottom", legend.title = element_blank())+guides(colour = guide_legend(override.aes = list(shape = NA)))#
}#
#
secondDegrees = vapply(1:Time, function(tp) {rowSums(Ys[tp,,] %*% Ys[tp,,])}, rep(0, N))#
q2 = list()#
for (i in 1:N) {#
	M1_degree = lapply(1:Time, function(tp) {M1$secondDegree[[tp]][,i]})#
	M3_degree = lapply(1:Time, function(tp) {M3$secondDegree[[tp]][,i]})#
	q_degree = data.frame(c(unlist(M1_degree), unlist(M3_degree)), as.factor(c(vapply(1:Time, function(tp) {rep(tp, 500)}, rep(0, 500)))), as.factor(c(rep("UDU", 5000), rep("UU", 5000))))#
	q_degree$observed = c(vapply(1:Time, function(tp) {rep(secondDegrees[i, tp], 500)}, rep(0, 500)))#
	colnames(q_degree) = c("SecondDegree", "Time", "Model", "Observed")#
	q2[[i]] = ggplot(q_degree, aes(x = Time, y = SecondDegree, fill= Model,color= Model)) + geom_boxplot(outlier.size = 0.5, position = position_dodge()) + theme_minimal() + scale_color_manual(values = c("#F8766D" ,"#00BFC4", "blue")) + scale_fill_manual(values = alpha(c("#F8766D" ,"#00BFC4"), 0.5)) + geom_point(data = q_degree, aes(x = Time, y = Observed), color = "blue", size = 2, group = 1)+geom_line(data = q_degree, aes(x = Time, y = Observed), color = "blue", size = 0.2, group = 1)#
}#
#
thirdDegrees = vapply(1:Time, function(tp) {rowSums(Ys[tp,,] %*% Ys[tp,,]%*% Ys[tp,,])}, rep(0, N))#
q3 = list()#
for (i in 1:N) {#
	M1_degree = lapply(1:Time, function(tp) {M1$thirdDegree[[tp]][,i]})#
	M3_degree = lapply(1:Time, function(tp) {M3$thirdDegree[[tp]][,i]})#
	q_degree = data.frame(c(unlist(M1_degree), unlist(M3_degree)), as.factor(c(vapply(1:Time, function(tp) {rep(tp, 500)}, rep(0, 500)))), as.factor(c(rep("UDU", 5000), rep("UU", 5000))))#
	q_degree$observed = c(vapply(1:Time, function(tp) {rep(thirdDegrees[i, tp], 500)}, rep(0, 500)))#
	colnames(q_degree) = c("ThirdDegree", "Time", "Model", "Observed")#
	q3[[i]] = ggplot(q_degree, aes(x = Time, y = ThirdDegree, fill= Model,color= Model)) + geom_boxplot(outlier.size = 0.5, position = position_dodge()) + theme_minimal() + scale_color_manual(values = c("#F8766D","#00BFC4", "blue")) + scale_fill_manual(values = alpha(c("#F8766D" ,"#00BFC4"), 0.5)) + geom_point(data = q_degree, aes(x = Time, y = Observed), color = "blue", size = 2, group = 1)+geom_line(data = q_degree, aes(x = Time, y = Observed), color = "blue", size = 0.2, group = 1)#
}#
#
g_legend<-function(a.gplot){#
  tmp <- ggplot_gtable(ggplot_build(a.gplot))#
  leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")#
  legend <- tmp$grobs[[leg]]#
  return(legend)}#
#
mylegend<-g_legend(q[[1]])#
p3 <- grid.arrange(arrangeGrob(q[[2]] + theme(legend.position="none"),#
                         q2[[2]] + theme(legend.position="none"),#
                         q3[[2]] + theme(legend.position="none"), nrow=1),mylegend,#
             heights=c(10, 1))
kappas = rep(0.001, 4)#
Time = 10#
N = 20#
R = 2#
dist_ij = c()#
 for (i in 1:Time) {#
 for (j in 1:Time) {#
 dist_ij = c(dist_ij, abs(i-j))#
 }#
 }#
dist_ij = matrix(dist_ij, Time, Time)#
BETA = lapply(1:4, function(m){matrix(0, 1, Time)})#
THETA = lapply(1:4, function(m){matrix(0, N, Time)})#
UDUstat = lapply(1:4, function(m){matrix(0, 2, Time)})#
Error = rep(0, 5)#
Error2 = rep(0, 5)#
Error3 = rep(0, 5)#
Error4 = rep(0, 5)#
Kappa = rep(0, 3)#
#
for (s in 1:nsim){#
print(s)#
set.seed(s+200)#
   tau_p = 1/rgamma(1, 2, 1)#
    tau_i = 1/rgamma(1, 2, 1)#
    tau_r = 1/rgamma(2, 2, 1)#
    tau_u = matrix(1/rgamma(Time*R, 2, 1), Time, R)#
	beta = sapply(1:1, function(p){rmvnorm(1, rep(0, Time), tau_p * matrix(Exponential(dist_ij, kappas[p]), Time, Time, byrow = TRUE))})#
	theta = sapply(1:N, function(i){rmvnorm(1, rep(0, Time), tau_i * matrix(Exponential(dist_ij, kappas[2]), Time, Time, byrow = TRUE))}) #
	U1 = sapply(1:N, function(i){rmvnorm(1, rep(0, Time), tau_u[,1]*diag(Time))}) #
	U2 = sapply(1:N, function(i){rmvnorm(1, rep(0, Time), tau_u[,2]*diag(Time))})#
	U = lapply(1:Time , function(tp){cbind(U1[tp,], U2[tp,])})#
	D = sapply(1:2, function(r){rep((-1)^r*2, Time)})#
	#while (sum(c(D) < 0) > 0) {#
	#  D = sapply(1:2, function(r){rmvnorm(1, rep(1, Time), tau_u[r] *matrix(Exponential(dist_ij, kappas[3]), Time, Time, byrow = TRUE))})#
	#}#
	s2 = 1 / rgamma(1, 2, 1)#
	U2= array(0, dim = c(Time, N, R))#
    for (tp in 1:Time) { U2[tp, , ] = U[[tp]]}#
	UDU = lapply(1:Time , function(tp){U[[tp]] %*% diag(D[tp,]) %*% t(U[[tp]])})#
	UDUstats = t(sapply(1:Time , function(tp){c(sum(UDU[[tp]][upper.tri(UDU[[tp]])]), sd(UDU[[tp]][upper.tri(UDU[[tp]])]))}))#
	Ys = array(NA, dim = c(Time , N, N))#
	Errormat = array(0, dim = c(Time, N, N))#
	errors = rnorm(Time * N * (N-1) / 2, 0, sqrt(s2))#
	for (tp in 1:Time) {#
	  Errormat[tp, , ][upper.tri(Errormat[tp, , ])] = errors[((tp-1)*N*(N-1)/2+1):(tp*N*(N-1)/2)]#
	  Errormat[tp, , ] = (Errormat[tp, , ] + t(Errormat[tp, , ]))#
	Ys[tp, , ] = Reduce("+", lapply(1:1, function(p) {#
                    1 * beta[tp, p]#
                  })) + outer(theta[tp, ], theta[tp, ], "+") + UDU[[tp]] + Errormat[tp,,]#
	diag(Ys[tp,,]) = 0   #
	}	#
Xnew = array(1, dim = c(Time , N, N, 1))#
set.seed(s)#
M1 = DLFM_fix(Ys, Xnew, RE = c("additive", "multiplicative"), gammapriors = c(2, 1), dist = "Exponential", avail = matrix(1, Time , N), R =2, burn = 4000, nscan = 20000, odens = 40, plot =FALSE, kappas = rep(0.001, 4))#
#
set.seed(s)#
M3 = DLFM_Dunson_fixed(Ys, Xnew, RE = c("additive", "multiplicative"), gammapriors = c(2, 1), dist = "Exponential", avail = matrix(1, Time , N), R =2, burn = 2000, nscan = 10000, odens = 20, plot =FALSE, kappas = rep(0.001, 4))#
#
}#
Degrees2 = vapply(1:Time, function(tp) {rowSums(Ys[tp,,])}, rep(0, N))#
#
m = list()#
for (i in 1:N) {#
	M1_degree = lapply(1:Time, function(tp) {M1$Degree[[tp]][,i]})#
	M3_degree = lapply(1:Time, function(tp) {M3$Degree[[tp]][,i]})#
	q_degree = data.frame(c(unlist(M1_degree), unlist(M3_degree)), as.factor(c(vapply(1:Time, function(tp) {rep(tp, 500)}, rep(0, 500)))), as.factor(c(rep("DAME", 5000), rep("UU", 5000))))#
	q_degree$observed = c(vapply(1:Time, function(tp) {rep(Degrees2[i, tp], 500)}, rep(0, 500)))#
	colnames(q_degree) = c("Degree", "Time", "Model", "Observed")#
	m[[i]] = ggplot(q_degree, aes(x = Time, y = Degree, fill= Model,color= Model)) + geom_boxplot(outlier.size = 0.5, position = position_dodge()) + theme_minimal() + scale_color_manual(values = c("#F8766D","#00BFC4", "blue")) + scale_fill_manual(values = alpha(c("#F8766D","#00BFC4"), 0.5)) + geom_point(data = q_degree, aes(x = Time, y = Observed), color = "blue",size = 2, group = 1)+geom_line(data = q_degree, aes(x = Time, y = Observed), color = "blue",size = 0.2, group = 1)+theme(legend.position = "bottom", legend.title = element_blank())+guides(colour = guide_legend(override.aes = list(shape = NA)))#
}#
#
secondDegrees2 = vapply(1:Time, function(tp) {rowSums(Ys[tp,,] %*% Ys[tp,,])}, rep(0, N))#
m2 = list()#
for (i in 1:N) {#
	M1_degree = lapply(1:Time, function(tp) {M1$secondDegree[[tp]][,i]})#
	M3_degree = lapply(1:Time, function(tp) {M3$secondDegree[[tp]][,i]})#
	q_degree = data.frame(c(unlist(M1_degree), unlist(M3_degree)), as.factor(c(vapply(1:Time, function(tp) {rep(tp, 500)}, rep(0, 500)))), as.factor(c(rep("DAME", 5000), rep("UU", 5000))))#
	q_degree$observed = c(vapply(1:Time, function(tp) {rep(secondDegrees2[i, tp], 500)}, rep(0, 500)))#
	colnames(q_degree) = c("SecondDegree", "Time", "Model", "Observed")#
	m2[[i]] = ggplot(q_degree, aes(x = Time, y = SecondDegree, fill= Model,color= Model)) + geom_boxplot(outlier.size = 0.5, position = position_dodge()) + theme_minimal() + scale_color_manual(values = c("#F8766D","#00BFC4","blue")) + scale_fill_manual(values = alpha(c("#F8766D","#00BFC4"), 0.5)) + geom_line(data = q_degree, aes(x = Time, y = Observed), color = "blue", size = 0.2, group = 1) + geom_point(data = q_degree, aes(x = Time, y = Observed), color = "blue",size = 2, group = 1)#
}#
#
thirdDegrees2 = vapply(1:Time, function(tp) {rowSums(Ys[tp,,] %*% Ys[tp,,]%*% Ys[tp,,])}, rep(0, N))#
m3 = list()#
for (i in 1:N) {#
	M1_degree = lapply(1:Time, function(tp) {M1$thirdDegree[[tp]][,i]})#
	M3_degree = lapply(1:Time, function(tp) {M3$thirdDegree[[tp]][,i]})#
	q_degree = data.frame(c(unlist(M1_degree), unlist(M3_degree)), as.factor(c(vapply(1:Time, function(tp) {rep(tp, 500)}, rep(0, 500)))), as.factor(c(rep("DAME", 5000), rep("UU", 5000))))#
	q_degree$observed = c(vapply(1:Time, function(tp) {rep(thirdDegrees2[i, tp], 500)}, rep(0, 500)))#
	colnames(q_degree) = c("ThirdDegree", "Time", "Model", "Observed")#
	m3[[i]] = ggplot(q_degree, aes(x = Time, y = ThirdDegree, fill= Model,color= Model)) + geom_boxplot(outlier.size = 0.5, position = position_dodge()) + theme_minimal() + scale_color_manual(values = c("#F8766D", "#00BFC4", "blue")) + scale_fill_manual(values = alpha(c("#F8766D", "#00BFC4"), 0.5)) + geom_line(data = q_degree, aes(x = Time, y = Observed), color = "blue", size = 0.2, group = 1) + geom_point(data = q_degree, aes(x = Time, y = Observed), color = "blue",size = 2, group = 1)#
}#
g_legend<-function(a.gplot){#
  tmp <- ggplot_gtable(ggplot_build(a.gplot))#
  leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")#
  legend <- tmp$grobs[[leg]]#
  return(legend)}#
#
mylegend<-g_legend(m[[1]])#
p3 <- grid.arrange(arrangeGrob(#
						m[[2]] + theme(legend.position="none"),#
                         m2[[2]] + theme(legend.position="none"),#
                         m3[[2]] + theme(legend.position="none"), #
                       nrow=1),#
        heights=c(10, 1))
#simulation 1#
library(devtools)#
setwd('/Users/bomin8319/Desktop/DAME/pkg/R')#
load_all()#
library(fields)#
library(matrixStats)#
library(mvtnorm)#
library(FastGP)#
library(LaplacesDemon)#
library(MCMCpack)#
library(DLFM2)#
library(coda)#
library(ggplot2)#
library(gridExtra)
nsim = 1#
kappas = rep(10, 4)#
Time = 10#
N = 20#
R = 2#
dist_ij = c()#
 for (i in 1:Time) {#
 for (j in 1:Time) {#
 dist_ij = c(dist_ij, abs(i-j))#
 }#
 }#
dist_ij = matrix(dist_ij, Time, Time)#
BETA = lapply(1:4, function(m){matrix(0, 1, Time)})#
THETA = lapply(1:4, function(m){matrix(0, N, Time)})#
UDUstat = lapply(1:4, function(m){matrix(0, 2, Time)})#
Error = rep(0, 5)#
Error2 = rep(0, 5)#
Error3 = rep(0, 5)#
Error4 = rep(0, 5)#
Kappa = rep(0, 3)#
#
for (s in 1:nsim){#
print(s)#
set.seed(s+2000)#
    tau_p = 1/rgamma(1, 2, 1)#
    tau_i = 1/rgamma(1, 2, 1)#
    tau_r = 1/rgamma(2, 2, 1)#
    tau_u = matrix(1/rgamma(Time*R, 2, 1), Time, R)#
	beta = sapply(1:1, function(p){rmvnorm(1, rep(0, Time), tau_p * matrix(Exponential(dist_ij, kappas[p]), Time, Time, byrow = TRUE))})#
	theta = sapply(1:N, function(i){rmvnorm(1, rep(0, Time), tau_i * matrix(Exponential(dist_ij, kappas[2]), Time, Time, byrow = TRUE))}) #
	U1 = sapply(1:N, function(i){rmvnorm(1, rep(0, Time), tau_u[,1]*diag(Time))}) #
	U2 = sapply(1:N, function(i){rmvnorm(1, rep(0, Time), tau_u[,2]*diag(Time))})#
	U = lapply(1:Time , function(tp){cbind(U1[tp,], U2[tp,])})#
	D = sapply(1:2, function(r){rmvnorm(1, rep(0, Time), tau_r[r] * matrix(Exponential(dist_ij, kappas[3]), Time, Time, byrow = TRUE))})#
	#while (sum(c(D) > 0) > 0) {#
	#  D = sapply(1:2, function(r){rmvnorm(1, rep(0, Time), matrix(Exponential(dist_ij, kappas[3]), Time, Time, byrow = TRUE))})#
	#}#
	s2 = 1 / rgamma(1, 2, 1)#
	U2= array(0, dim = c(Time, N, R))#
    for (tp in 1:Time) { U2[tp, , ] = U[[tp]]}#
	UDU = lapply(1:Time , function(tp){U[[tp]] %*% diag(D[tp,]) %*% t(U[[tp]])})#
	UDUstats = t(sapply(1:Time , function(tp){c(sum(UDU[[tp]][upper.tri(UDU[[tp]])]), sd(UDU[[tp]][upper.tri(UDU[[tp]])]))}))#
	Ys = array(NA, dim = c(Time , N, N))#
	Errormat = array(0, dim = c(Time, N, N))#
	errors = rnorm(Time * N * (N-1) / 2, 0, sqrt(s2))#
	for (tp in 1:Time) {#
	  Errormat[tp, , ][upper.tri(Errormat[tp, , ])] = errors[((tp-1)*N*(N-1)/2+1):(tp*N*(N-1)/2)]#
	  Errormat[tp, , ] = (Errormat[tp, , ] + t(Errormat[tp, , ]))#
	Ys[tp, , ] = Reduce("+", lapply(1:1, function(p) {#
                    1 * beta[tp, p]#
                  })) + outer(theta[tp, ], theta[tp, ], "+") + UDU[[tp]] + Errormat[tp,,]#
	diag(Ys[tp,,]) = 0   #
	}#
Xnew = array(1, dim = c(Time , N, N, 1))#
set.seed(s)#
M1 = DAME_fix(Ys, Xnew, RE = c("additive", "multiplicative"), gammapriors = c(2, 1), dist = "Exponential", avail = matrix(1, Time , N), R =2, burn = 1000, nscan = 5000, odens = 10, kappas = rep(0.001, 4))#
set.seed(s)#
M2 = DAME_MH(Ys, Xnew, RE = c("additive", "multiplicative"), gammapriors = c(2, 1), dist = "Exponential", avail = matrix(1, Time , N), R =2, burn = 1000, nscan = 5000, odens = 10)#
}#
Degrees = vapply(1:Time, function(tp) {rowSums(Ys[tp,,])}, rep(0, N))#
p = list()#
cordata = data.frame(rbind(M1$corr[,1:3],M2$corr[,1:3]), c(rep("Indepence", 500), rep("DAME", 500)))#
colnames(cordata) = c("Lag1", "Lag2", "Lag3", "Model")#
p[[1]] = ggplot(cordata, aes(x = Lag1, fill = Model, color = Model)) + geom_histogram(position = "identity", alpha = 0.5) + geom_vline(aes(xintercept = vapply(1:1, function(l) {cor(Degrees[1:(N*(Time - l))], Degrees[(1 + N*l):(N*Time)], use = "complete")}, 0)), col = "blue", size = 1) +theme_minimal() +theme(legend.position = "bottom", legend.title = element_blank()) #
p[[2]] = ggplot(cordata, aes(x = Lag2, fill = Model, color = Model)) + geom_histogram(position = "identity", alpha = 0.5) + geom_vline(aes(xintercept = vapply(2:2, function(l) {cor(Degrees[1:(N*(Time - l))], Degrees[(1 + N*l):(N*Time)], use = "complete")}, 0)), col = "blue", size = 1)  + theme_minimal()#
p[[3]] = ggplot(cordata, aes(x = Lag3, fill = Model, color = Model)) + geom_histogram(position = "identity", alpha = 0.5) + geom_vline(aes(xintercept = vapply(3:3, function(l) {cor(Degrees[1:(N*(Time - l))], Degrees[(1 + N*l):(N*Time)], use = "complete")}, 0)), col = "blue", size = 1) +theme_minimal()+ theme(legend.position = "top")#
#marrangeGrob(p[1:3], nrow = 1, ncol = 3, top = NULL)#
g_legend<-function(a.gplot){#
  tmp <- ggplot_gtable(ggplot_build(a.gplot))#
  leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")#
  legend <- tmp$grobs[[leg]]#
  return(legend)}#
#
mylegend<-g_legend(p[[1]])#
p3 <- grid.arrange(arrangeGrob(p[[1]] + theme(legend.position="none"),#
                         p[[2]] + theme(legend.position="none"),#
                         p[[3]] + theme(legend.position="none"), nrow=1),#
             mylegend, heights=c(10, 1))#
# simulation 2#
kappas = rep(0.001, 4)#
Time = 10#
N = 20#
R = 2#
dist_ij = c()#
 for (i in 1:Time) {#
 for (j in 1:Time) {#
 dist_ij = c(dist_ij, abs(i-j))#
 }#
 }#
dist_ij = matrix(dist_ij, Time, Time)#
BETA = lapply(1:4, function(m){matrix(0, 1, Time)})#
THETA = lapply(1:4, function(m){matrix(0, N, Time)})#
UDUstat = lapply(1:4, function(m){matrix(0, 2, Time)})#
Error = rep(0, 5)#
Error2 = rep(0, 5)#
Error3 = rep(0, 5)#
Error4 = rep(0, 5)#
Kappa = rep(0, 3)#
#
for (s in 1:nsim){#
print(s)#
set.seed(s+200)#
    tau_p = 1/rgamma(1, 2, 1)#
    tau_i = 1/rgamma(1, 2, 1)#
    tau_r = 1/rgamma(2, 2, 1)#
    tau_u = matrix(1/rgamma(Time*R, 2, 1), Time, R)#
	beta = sapply(1:1, function(p){rmvnorm(1, rep(0, Time), tau_p * matrix(Exponential(dist_ij, kappas[p]), Time, Time, byrow = TRUE))})#
	theta = sapply(1:N, function(i){rmvnorm(1, rep(0, Time), tau_i * matrix(Exponential(dist_ij, kappas[2]), Time, Time, byrow = TRUE))}) #
	U1 = sapply(1:N, function(i){rmvnorm(1, rep(0, Time), tau_u[,1]*diag(Time))}) #
	U2 = sapply(1:N, function(i){rmvnorm(1, rep(0, Time), tau_u[,2]*diag(Time))})#
	U = lapply(1:Time , function(tp){cbind(U1[tp,], U2[tp,])})#
	D = sapply(1:2, function(r){rep(-2, Time)})#
	#while (sum(c(D) > 0) > 0) {#
	#  D = sapply(1:2, function(r){rmvnorm(1, rep(-1, Time), tau_r[r] * matrix(Exponential(dist_ij, kappas[3]), Time, Time, byrow = TRUE))})#
	#}#
	s2 = 1 / rgamma(1, 2, 1)#
	U2= array(0, dim = c(Time, N, R))#
    for (tp in 1:Time) { U2[tp, , ] = U[[tp]]}#
	UDU = lapply(1:Time , function(tp){U[[tp]] %*% diag(D[tp,]) %*% t(U[[tp]])})#
	UDUstats = t(sapply(1:Time , function(tp){c(sum(UDU[[tp]][upper.tri(UDU[[tp]])]), sd(UDU[[tp]][upper.tri(UDU[[tp]])]))}))#
	Ys = array(NA, dim = c(Time , N, N))#
	Errormat = array(0, dim = c(Time, N, N))#
	errors = rnorm(Time * N * (N-1) / 2, 0, sqrt(s2))#
	for (tp in 1:Time) {#
	  Errormat[tp, , ][upper.tri(Errormat[tp, , ])] = errors[((tp-1)*N*(N-1)/2+1):(tp*N*(N-1)/2)]#
	  Errormat[tp, , ] = (Errormat[tp, , ] + t(Errormat[tp, , ]))#
	Ys[tp, , ] = Reduce("+", lapply(1:1, function(p) {#
                    1 * beta[tp, p]#
                  })) + outer(theta[tp, ], theta[tp, ], "+") + UDU[[tp]] + Errormat[tp,,]#
	diag(Ys[tp,,]) = 0   #
	}	#
Xnew = array(1, dim = c(Time , N, N, 1))#
set.seed(s)#
M1 = DLFM_fix(Ys, Xnew, RE = c("additive", "multiplicative"), gammapriors = c(2, 1), dist = "Exponential", avail = matrix(1, Time , N), R =2, burn = 4000, nscan = 20000, odens = 40,kappas = rep(0.001, 4))#
#
set.seed(s)#
M3 = DLFM_Dunson_fixed(Ys, Xnew, RE = c("additive", "multiplicative"), gammapriors = c(2, 1), dist = "Exponential", avail = matrix(1, Time , N), R =2, burn = 2000, nscan = 10000, odens = 20, kappas = rep(0.001, 4))#
#
}#
Degrees = vapply(1:Time, function(tp) {rowSums(Ys[tp,,])}, rep(0, N))#
ggplotColours <- function(n = 6, h = c(0, 360) + 15){#
  if ((diff(h) %% 360) < 1) h[2] <- h[2] - 360/n#
  hcl(h = (seq(h[1], h[2], length = n)), c = 100, l = 65)#
}#
ggplotColours(2)#
#
q = list()#
for (i in 1:N) {#
	M1_degree = lapply(1:Time, function(tp) {M1$Degree[[tp]][,i]})#
	M3_degree = lapply(1:Time, function(tp) {M3$Degree[[tp]][,i]})#
	q_degree = data.frame(c(unlist(M1_degree), unlist(M3_degree)), as.factor(c(vapply(1:Time, function(tp) {rep(tp, 500)}, rep(0, 500)))), as.factor(c(rep("UDU", 5000), rep("UU", 5000))))#
	q_degree$observed = c(vapply(1:Time, function(tp) {rep(Degrees[i, tp], 500)}, rep(0, 500)))#
	colnames(q_degree) = c("Degree", "Time", "Model", "Observed")#
	q[[i]] = ggplot(q_degree, aes(x = Time, y = Degree, fill= Model,color= Model)) + geom_boxplot(outlier.size = 0.5, position = position_dodge()) + theme_minimal() + scale_color_manual(values = c("#F8766D" ,"#00BFC4", "blue")) + scale_fill_manual(values = alpha(c("#F8766D" ,"#00BFC4"), 0.5)) + geom_point(data = q_degree, aes(x = Time, y = Observed), color = "blue", size = 2, group = 1)+geom_line(data = q_degree, aes(x = Time, y = Observed), color = "blue", size = 0.2, group = 1)+theme(legend.position = "bottom", legend.title = element_blank())+guides(colour = guide_legend(override.aes = list(shape = NA)))#
}#
#
secondDegrees = vapply(1:Time, function(tp) {rowSums(Ys[tp,,] %*% Ys[tp,,])}, rep(0, N))#
q2 = list()#
for (i in 1:N) {#
	M1_degree = lapply(1:Time, function(tp) {M1$secondDegree[[tp]][,i]})#
	M3_degree = lapply(1:Time, function(tp) {M3$secondDegree[[tp]][,i]})#
	q_degree = data.frame(c(unlist(M1_degree), unlist(M3_degree)), as.factor(c(vapply(1:Time, function(tp) {rep(tp, 500)}, rep(0, 500)))), as.factor(c(rep("UDU", 5000), rep("UU", 5000))))#
	q_degree$observed = c(vapply(1:Time, function(tp) {rep(secondDegrees[i, tp], 500)}, rep(0, 500)))#
	colnames(q_degree) = c("SecondDegree", "Time", "Model", "Observed")#
	q2[[i]] = ggplot(q_degree, aes(x = Time, y = SecondDegree, fill= Model,color= Model)) + geom_boxplot(outlier.size = 0.5, position = position_dodge()) + theme_minimal() + scale_color_manual(values = c("#F8766D" ,"#00BFC4", "blue")) + scale_fill_manual(values = alpha(c("#F8766D" ,"#00BFC4"), 0.5)) + geom_point(data = q_degree, aes(x = Time, y = Observed), color = "blue", size = 2, group = 1)+geom_line(data = q_degree, aes(x = Time, y = Observed), color = "blue", size = 0.2, group = 1)#
}#
#
thirdDegrees = vapply(1:Time, function(tp) {rowSums(Ys[tp,,] %*% Ys[tp,,]%*% Ys[tp,,])}, rep(0, N))#
q3 = list()#
for (i in 1:N) {#
	M1_degree = lapply(1:Time, function(tp) {M1$thirdDegree[[tp]][,i]})#
	M3_degree = lapply(1:Time, function(tp) {M3$thirdDegree[[tp]][,i]})#
	q_degree = data.frame(c(unlist(M1_degree), unlist(M3_degree)), as.factor(c(vapply(1:Time, function(tp) {rep(tp, 500)}, rep(0, 500)))), as.factor(c(rep("UDU", 5000), rep("UU", 5000))))#
	q_degree$observed = c(vapply(1:Time, function(tp) {rep(thirdDegrees[i, tp], 500)}, rep(0, 500)))#
	colnames(q_degree) = c("ThirdDegree", "Time", "Model", "Observed")#
	q3[[i]] = ggplot(q_degree, aes(x = Time, y = ThirdDegree, fill= Model,color= Model)) + geom_boxplot(outlier.size = 0.5, position = position_dodge()) + theme_minimal() + scale_color_manual(values = c("#F8766D","#00BFC4", "blue")) + scale_fill_manual(values = alpha(c("#F8766D" ,"#00BFC4"), 0.5)) + geom_point(data = q_degree, aes(x = Time, y = Observed), color = "blue", size = 2, group = 1)+geom_line(data = q_degree, aes(x = Time, y = Observed), color = "blue", size = 0.2, group = 1)#
}#
#
g_legend<-function(a.gplot){#
  tmp <- ggplot_gtable(ggplot_build(a.gplot))#
  leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")#
  legend <- tmp$grobs[[leg]]#
  return(legend)}#
#
mylegend<-g_legend(q[[1]])#
p3 <- grid.arrange(arrangeGrob(q[[2]] + theme(legend.position="none"),#
                         q2[[2]] + theme(legend.position="none"),#
                         q3[[2]] + theme(legend.position="none"), nrow=1),mylegend,#
             heights=c(10, 1))#
#
kappas = rep(0.001, 4)#
Time = 10#
N = 20#
R = 2#
dist_ij = c()#
 for (i in 1:Time) {#
 for (j in 1:Time) {#
 dist_ij = c(dist_ij, abs(i-j))#
 }#
 }#
dist_ij = matrix(dist_ij, Time, Time)#
BETA = lapply(1:4, function(m){matrix(0, 1, Time)})#
THETA = lapply(1:4, function(m){matrix(0, N, Time)})#
UDUstat = lapply(1:4, function(m){matrix(0, 2, Time)})#
Error = rep(0, 5)#
Error2 = rep(0, 5)#
Error3 = rep(0, 5)#
Error4 = rep(0, 5)#
Kappa = rep(0, 3)#
#
for (s in 1:nsim){#
print(s)#
set.seed(s+200)#
   tau_p = 1/rgamma(1, 2, 1)#
    tau_i = 1/rgamma(1, 2, 1)#
    tau_r = 1/rgamma(2, 2, 1)#
    tau_u = matrix(1/rgamma(Time*R, 2, 1), Time, R)#
	beta = sapply(1:1, function(p){rmvnorm(1, rep(0, Time), tau_p * matrix(Exponential(dist_ij, kappas[p]), Time, Time, byrow = TRUE))})#
	theta = sapply(1:N, function(i){rmvnorm(1, rep(0, Time), tau_i * matrix(Exponential(dist_ij, kappas[2]), Time, Time, byrow = TRUE))}) #
	U1 = sapply(1:N, function(i){rmvnorm(1, rep(0, Time), tau_u[,1]*diag(Time))}) #
	U2 = sapply(1:N, function(i){rmvnorm(1, rep(0, Time), tau_u[,2]*diag(Time))})#
	U = lapply(1:Time , function(tp){cbind(U1[tp,], U2[tp,])})#
	D = sapply(1:2, function(r){rep((-1)^r*2, Time)})#
	#while (sum(c(D) < 0) > 0) {#
	#  D = sapply(1:2, function(r){rmvnorm(1, rep(1, Time), tau_u[r] *matrix(Exponential(dist_ij, kappas[3]), Time, Time, byrow = TRUE))})#
	#}#
	s2 = 1 / rgamma(1, 2, 1)#
	U2= array(0, dim = c(Time, N, R))#
    for (tp in 1:Time) { U2[tp, , ] = U[[tp]]}#
	UDU = lapply(1:Time , function(tp){U[[tp]] %*% diag(D[tp,]) %*% t(U[[tp]])})#
	UDUstats = t(sapply(1:Time , function(tp){c(sum(UDU[[tp]][upper.tri(UDU[[tp]])]), sd(UDU[[tp]][upper.tri(UDU[[tp]])]))}))#
	Ys = array(NA, dim = c(Time , N, N))#
	Errormat = array(0, dim = c(Time, N, N))#
	errors = rnorm(Time * N * (N-1) / 2, 0, sqrt(s2))#
	for (tp in 1:Time) {#
	  Errormat[tp, , ][upper.tri(Errormat[tp, , ])] = errors[((tp-1)*N*(N-1)/2+1):(tp*N*(N-1)/2)]#
	  Errormat[tp, , ] = (Errormat[tp, , ] + t(Errormat[tp, , ]))#
	Ys[tp, , ] = Reduce("+", lapply(1:1, function(p) {#
                    1 * beta[tp, p]#
                  })) + outer(theta[tp, ], theta[tp, ], "+") + UDU[[tp]] + Errormat[tp,,]#
	diag(Ys[tp,,]) = 0   #
	}	#
Xnew = array(1, dim = c(Time , N, N, 1))#
set.seed(s)#
M1 = DLFM_fix(Ys, Xnew, RE = c("additive", "multiplicative"), gammapriors = c(2, 1), dist = "Exponential", avail = matrix(1, Time , N), R =2, burn = 4000, nscan = 20000, odens = 40, plot =FALSE, kappas = rep(0.001, 4))#
#
set.seed(s)#
M3 = DLFM_Dunson_fixed(Ys, Xnew, RE = c("additive", "multiplicative"), gammapriors = c(2, 1), dist = "Exponential", avail = matrix(1, Time , N), R =2, burn = 2000, nscan = 10000, odens = 20, plot =FALSE, kappas = rep(0.001, 4))#
#
}#
Degrees2 = vapply(1:Time, function(tp) {rowSums(Ys[tp,,])}, rep(0, N))#
#
m = list()#
for (i in 1:N) {#
	M1_degree = lapply(1:Time, function(tp) {M1$Degree[[tp]][,i]})#
	M3_degree = lapply(1:Time, function(tp) {M3$Degree[[tp]][,i]})#
	q_degree = data.frame(c(unlist(M1_degree), unlist(M3_degree)), as.factor(c(vapply(1:Time, function(tp) {rep(tp, 500)}, rep(0, 500)))), as.factor(c(rep("DAME", 5000), rep("UU", 5000))))#
	q_degree$observed = c(vapply(1:Time, function(tp) {rep(Degrees2[i, tp], 500)}, rep(0, 500)))#
	colnames(q_degree) = c("Degree", "Time", "Model", "Observed")#
	m[[i]] = ggplot(q_degree, aes(x = Time, y = Degree, fill= Model,color= Model)) + geom_boxplot(outlier.size = 0.5, position = position_dodge()) + theme_minimal() + scale_color_manual(values = c("#F8766D","#00BFC4", "blue")) + scale_fill_manual(values = alpha(c("#F8766D","#00BFC4"), 0.5)) + geom_point(data = q_degree, aes(x = Time, y = Observed), color = "blue",size = 2, group = 1)+geom_line(data = q_degree, aes(x = Time, y = Observed), color = "blue",size = 0.2, group = 1)+theme(legend.position = "bottom", legend.title = element_blank())+guides(colour = guide_legend(override.aes = list(shape = NA)))#
}#
#
secondDegrees2 = vapply(1:Time, function(tp) {rowSums(Ys[tp,,] %*% Ys[tp,,])}, rep(0, N))#
m2 = list()#
for (i in 1:N) {#
	M1_degree = lapply(1:Time, function(tp) {M1$secondDegree[[tp]][,i]})#
	M3_degree = lapply(1:Time, function(tp) {M3$secondDegree[[tp]][,i]})#
	q_degree = data.frame(c(unlist(M1_degree), unlist(M3_degree)), as.factor(c(vapply(1:Time, function(tp) {rep(tp, 500)}, rep(0, 500)))), as.factor(c(rep("DAME", 5000), rep("UU", 5000))))#
	q_degree$observed = c(vapply(1:Time, function(tp) {rep(secondDegrees2[i, tp], 500)}, rep(0, 500)))#
	colnames(q_degree) = c("SecondDegree", "Time", "Model", "Observed")#
	m2[[i]] = ggplot(q_degree, aes(x = Time, y = SecondDegree, fill= Model,color= Model)) + geom_boxplot(outlier.size = 0.5, position = position_dodge()) + theme_minimal() + scale_color_manual(values = c("#F8766D","#00BFC4","blue")) + scale_fill_manual(values = alpha(c("#F8766D","#00BFC4"), 0.5)) + geom_line(data = q_degree, aes(x = Time, y = Observed), color = "blue", size = 0.2, group = 1) + geom_point(data = q_degree, aes(x = Time, y = Observed), color = "blue",size = 2, group = 1)#
}#
#
thirdDegrees2 = vapply(1:Time, function(tp) {rowSums(Ys[tp,,] %*% Ys[tp,,]%*% Ys[tp,,])}, rep(0, N))#
m3 = list()#
for (i in 1:N) {#
	M1_degree = lapply(1:Time, function(tp) {M1$thirdDegree[[tp]][,i]})#
	M3_degree = lapply(1:Time, function(tp) {M3$thirdDegree[[tp]][,i]})#
	q_degree = data.frame(c(unlist(M1_degree), unlist(M3_degree)), as.factor(c(vapply(1:Time, function(tp) {rep(tp, 500)}, rep(0, 500)))), as.factor(c(rep("DAME", 5000), rep("UU", 5000))))#
	q_degree$observed = c(vapply(1:Time, function(tp) {rep(thirdDegrees2[i, tp], 500)}, rep(0, 500)))#
	colnames(q_degree) = c("ThirdDegree", "Time", "Model", "Observed")#
	m3[[i]] = ggplot(q_degree, aes(x = Time, y = ThirdDegree, fill= Model,color= Model)) + geom_boxplot(outlier.size = 0.5, position = position_dodge()) + theme_minimal() + scale_color_manual(values = c("#F8766D", "#00BFC4", "blue")) + scale_fill_manual(values = alpha(c("#F8766D", "#00BFC4"), 0.5)) + geom_line(data = q_degree, aes(x = Time, y = Observed), color = "blue", size = 0.2, group = 1) + geom_point(data = q_degree, aes(x = Time, y = Observed), color = "blue",size = 2, group = 1)#
}#
g_legend<-function(a.gplot){#
  tmp <- ggplot_gtable(ggplot_build(a.gplot))#
  leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")#
  legend <- tmp$grobs[[leg]]#
  return(legend)}#
#
mylegend<-g_legend(m[[1]])#
p3 <- grid.arrange(arrangeGrob(#
						m[[2]] + theme(legend.position="none"),#
                         m2[[2]] + theme(legend.position="none"),#
                         m3[[2]] + theme(legend.position="none"), #
                       nrow=1),#
        heights=c(10, 1))#
kappas = rep(0.001, 4)#
Time = 10#
N = 20#
R = 2#
dist_ij = c()#
 for (i in 1:Time) {#
 for (j in 1:Time) {#
 dist_ij = c(dist_ij, abs(i-j))#
 }#
 }#
dist_ij = matrix(dist_ij, Time, Time)#
BETA = lapply(1:4, function(m){matrix(0, 1, Time)})#
THETA = lapply(1:4, function(m){matrix(0, N, Time)})#
UDUstat = lapply(1:4, function(m){matrix(0, 2, Time)})#
Error = rep(0, 5)#
Error2 = rep(0, 5)#
Error3 = rep(0, 5)#
Error4 = rep(0, 5)#
Kappa = rep(0, 3)#
#
for (s in 1:nsim){#
print(s)#
set.seed(s+200)#
   tau_p = 1/rgamma(1, 2, 1)#
    tau_i = 1/rgamma(1, 2, 1)#
    tau_r = 1/rgamma(2, 2, 1)#
    tau_u = matrix(1/rgamma(Time*R, 2, 1), Time, R)#
	beta = sapply(1:1, function(p){rmvnorm(1, rep(0, Time), tau_p * matrix(Exponential(dist_ij, kappas[p]), Time, Time, byrow = TRUE))})#
	theta = sapply(1:N, function(i){rmvnorm(1, rep(0, Time), tau_i * matrix(Exponential(dist_ij, kappas[2]), Time, Time, byrow = TRUE))}) #
	U1 = sapply(1:N, function(i){rmvnorm(1, rep(0, Time), tau_u[,1]*diag(Time))}) #
	U2 = sapply(1:N, function(i){rmvnorm(1, rep(0, Time), tau_u[,2]*diag(Time))})#
	U = lapply(1:Time , function(tp){cbind(U1[tp,], U2[tp,])})#
	D = sapply(1:2, function(r){rep(2, Time)})#
	#while (sum(c(D) < 0) > 0) {#
	#  D = sapply(1:2, function(r){rmvnorm(1, rep(1, Time), tau_u[r] *matrix(Exponential(dist_ij, kappas[3]), Time, Time, byrow = TRUE))})#
	#}#
	s2 = 1 / rgamma(1, 2, 1)#
	U2= array(0, dim = c(Time, N, R))#
    for (tp in 1:Time) { U2[tp, , ] = U[[tp]]}#
	UDU = lapply(1:Time , function(tp){U[[tp]] %*% diag(D[tp,]) %*% t(U[[tp]])})#
	UDUstats = t(sapply(1:Time , function(tp){c(sum(UDU[[tp]][upper.tri(UDU[[tp]])]), sd(UDU[[tp]][upper.tri(UDU[[tp]])]))}))#
	Ys = array(NA, dim = c(Time , N, N))#
	Errormat = array(0, dim = c(Time, N, N))#
	errors = rnorm(Time * N * (N-1) / 2, 0, sqrt(s2))#
	for (tp in 1:Time) {#
	  Errormat[tp, , ][upper.tri(Errormat[tp, , ])] = errors[((tp-1)*N*(N-1)/2+1):(tp*N*(N-1)/2)]#
	  Errormat[tp, , ] = (Errormat[tp, , ] + t(Errormat[tp, , ]))#
	Ys[tp, , ] = Reduce("+", lapply(1:1, function(p) {#
                    1 * beta[tp, p]#
                  })) + outer(theta[tp, ], theta[tp, ], "+") + UDU[[tp]] + Errormat[tp,,]#
	diag(Ys[tp,,]) = 0   #
	}	#
Xnew = array(1, dim = c(Time , N, N, 1))#
set.seed(s)#
M1 = DLFM_fix(Ys, Xnew, RE = c("additive", "multiplicative"), gammapriors = c(2, 1), dist = "Exponential", avail = matrix(1, Time , N), R =2, burn = 4000, nscan = 20000, odens = 40, plot =FALSE, kappas = rep(0.001, 4))#
#
set.seed(s)#
M3 = DLFM_Dunson_fixed(Ys, Xnew, RE = c("additive", "multiplicative"), gammapriors = c(2, 1), dist = "Exponential", avail = matrix(1, Time , N), R =2, burn = 2000, nscan = 10000, odens = 20, plot =FALSE, kappas = rep(0.001, 4))#
#
}#
Degrees2 = vapply(1:Time, function(tp) {rowSums(Ys[tp,,])}, rep(0, N))#
#
k = list()#
for (i in 1:N) {#
	M1_degree = lapply(1:Time, function(tp) {M1$Degree[[tp]][,i]})#
	M3_degree = lapply(1:Time, function(tp) {M3$Degree[[tp]][,i]})#
	q_degree = data.frame(c(unlist(M1_degree), unlist(M3_degree)), as.factor(c(vapply(1:Time, function(tp) {rep(tp, 500)}, rep(0, 500)))), as.factor(c(rep("DAME", 5000), rep("UU", 5000))))#
	q_degree$observed = c(vapply(1:Time, function(tp) {rep(Degrees2[i, tp], 500)}, rep(0, 500)))#
	colnames(q_degree) = c("Degree", "Time", "Model", "Observed")#
	k[[i]] = ggplot(q_degree, aes(x = Time, y = Degree, fill= Model,color= Model)) + geom_boxplot(outlier.size = 0.5, position = position_dodge()) + theme_minimal() + scale_color_manual(values = c("#F8766D","#00BFC4", "blue")) + scale_fill_manual(values = alpha(c("#F8766D","#00BFC4"), 0.5)) + geom_point(data = q_degree, aes(x = Time, y = Observed), color = "blue",size = 2, group = 1)+geom_line(data = q_degree, aes(x = Time, y = Observed), color = "blue",size = 0.2, group = 1)+theme(legend.position = "bottom", legend.title = element_blank())+guides(colour = guide_legend(override.aes = list(shape = NA)))#
}#
#
secondDegrees2 = vapply(1:Time, function(tp) {rowSums(Ys[tp,,] %*% Ys[tp,,])}, rep(0, N))#
k2 = list()#
for (i in 1:N) {#
	M1_degree = lapply(1:Time, function(tp) {M1$secondDegree[[tp]][,i]})#
	M3_degree = lapply(1:Time, function(tp) {M3$secondDegree[[tp]][,i]})#
	q_degree = data.frame(c(unlist(M1_degree), unlist(M3_degree)), as.factor(c(vapply(1:Time, function(tp) {rep(tp, 500)}, rep(0, 500)))), as.factor(c(rep("DAME", 5000), rep("UU", 5000))))#
	q_degree$observed = c(vapply(1:Time, function(tp) {rep(secondDegrees2[i, tp], 500)}, rep(0, 500)))#
	colnames(q_degree) = c("SecondDegree", "Time", "Model", "Observed")#
	k2[[i]] = ggplot(q_degree, aes(x = Time, y = SecondDegree, fill= Model,color= Model)) + geom_boxplot(outlier.size = 0.5, position = position_dodge()) + theme_minimal() + scale_color_manual(values = c("#F8766D","#00BFC4","blue")) + scale_fill_manual(values = alpha(c("#F8766D","#00BFC4"), 0.5)) + geom_line(data = q_degree, aes(x = Time, y = Observed), color = "blue", size = 0.2, group = 1) + geom_point(data = q_degree, aes(x = Time, y = Observed), color = "blue",size = 2, group = 1)#
}#
#
thirdDegrees2 = vapply(1:Time, function(tp) {rowSums(Ys[tp,,] %*% Ys[tp,,]%*% Ys[tp,,])}, rep(0, N))#
k3 = list()#
for (i in 1:N) {#
	M1_degree = lapply(1:Time, function(tp) {M1$thirdDegree[[tp]][,i]})#
	M3_degree = lapply(1:Time, function(tp) {M3$thirdDegree[[tp]][,i]})#
	q_degree = data.frame(c(unlist(M1_degree), unlist(M3_degree)), as.factor(c(vapply(1:Time, function(tp) {rep(tp, 500)}, rep(0, 500)))), as.factor(c(rep("DAME", 5000), rep("UU", 5000))))#
	q_degree$observed = c(vapply(1:Time, function(tp) {rep(thirdDegrees2[i, tp], 500)}, rep(0, 500)))#
	colnames(q_degree) = c("ThirdDegree", "Time", "Model", "Observed")#
	k3[[i]] = ggplot(q_degree, aes(x = Time, y = ThirdDegree, fill= Model,color= Model)) + geom_boxplot(outlier.size = 0.5, position = position_dodge()) + theme_minimal() + scale_color_manual(values = c("#F8766D", "#00BFC4", "blue")) + scale_fill_manual(values = alpha(c("#F8766D", "#00BFC4"), 0.5)) + geom_line(data = q_degree, aes(x = Time, y = Observed), color = "blue", size = 0.2, group = 1) + geom_point(data = q_degree, aes(x = Time, y = Observed), color = "blue",size = 2, group = 1)#
}#
g_legend<-function(a.gplot){#
  tmp <- ggplot_gtable(ggplot_build(a.gplot))#
  leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")#
  legend <- tmp$grobs[[leg]]#
  return(legend)}#
#
mylegend<-g_legend(k[[1]])#
p3 <- grid.arrange(arrangeGrob(#
						k[[2]] + theme(legend.position="none"),#
                         k2[[2]] + theme(legend.position="none"),#
                         k3[[2]] + theme(legend.position="none"), #
                       nrow=1),#
        heights=c(10, 1))
#simulation 1#
library(devtools)#
setwd('/Users/bomin8319/Desktop/DAME/pkg/R')#
load_all()#
library(fields)#
library(matrixStats)#
library(mvtnorm)#
library(FastGP)#
library(LaplacesDemon)#
library(MCMCpack)#
library(DLFM2)#
library(coda)#
library(ggplot2)#
library(gridExtra)#
#
nsim = 1#
kappas = rep(10, 4)#
Time = 10#
N = 20#
R = 2#
dist_ij = c()#
 for (i in 1:Time) {#
 for (j in 1:Time) {#
 dist_ij = c(dist_ij, abs(i-j))#
 }#
 }#
dist_ij = matrix(dist_ij, Time, Time)#
BETA = lapply(1:4, function(m){matrix(0, 1, Time)})#
THETA = lapply(1:4, function(m){matrix(0, N, Time)})#
UDUstat = lapply(1:4, function(m){matrix(0, 2, Time)})#
Error = rep(0, 5)#
Error2 = rep(0, 5)#
Error3 = rep(0, 5)#
Error4 = rep(0, 5)#
Kappa = rep(0, 3)#
#
for (s in 1:nsim){#
print(s)#
set.seed(s+2000)#
    tau_p = 1/rgamma(1, 2, 1)#
    tau_i = 1/rgamma(1, 2, 1)#
    tau_r = 1/rgamma(2, 2, 1)#
    tau_u = matrix(1/rgamma(Time*R, 2, 1), Time, R)#
	beta = sapply(1:1, function(p){rmvnorm(1, rep(0, Time), tau_p * matrix(Exponential(dist_ij, kappas[p]), Time, Time, byrow = TRUE))})#
	theta = sapply(1:N, function(i){rmvnorm(1, rep(0, Time), tau_i * matrix(Exponential(dist_ij, kappas[2]), Time, Time, byrow = TRUE))}) #
	U1 = sapply(1:N, function(i){rmvnorm(1, rep(0, Time), tau_u[,1]*diag(Time))}) #
	U2 = sapply(1:N, function(i){rmvnorm(1, rep(0, Time), tau_u[,2]*diag(Time))})#
	U = lapply(1:Time , function(tp){cbind(U1[tp,], U2[tp,])})#
	D = sapply(1:2, function(r){rmvnorm(1, rep(0, Time), tau_r[r] * matrix(Exponential(dist_ij, kappas[3]), Time, Time, byrow = TRUE))})#
	#while (sum(c(D) > 0) > 0) {#
	#  D = sapply(1:2, function(r){rmvnorm(1, rep(0, Time), matrix(Exponential(dist_ij, kappas[3]), Time, Time, byrow = TRUE))})#
	#}#
	s2 = 1 / rgamma(1, 2, 1)#
	U2= array(0, dim = c(Time, N, R))#
    for (tp in 1:Time) { U2[tp, , ] = U[[tp]]}#
	UDU = lapply(1:Time , function(tp){U[[tp]] %*% diag(D[tp,]) %*% t(U[[tp]])})#
	UDUstats = t(sapply(1:Time , function(tp){c(sum(UDU[[tp]][upper.tri(UDU[[tp]])]), sd(UDU[[tp]][upper.tri(UDU[[tp]])]))}))#
	Ys = array(NA, dim = c(Time , N, N))#
	Errormat = array(0, dim = c(Time, N, N))#
	errors = rnorm(Time * N * (N-1) / 2, 0, sqrt(s2))#
	for (tp in 1:Time) {#
	  Errormat[tp, , ][upper.tri(Errormat[tp, , ])] = errors[((tp-1)*N*(N-1)/2+1):(tp*N*(N-1)/2)]#
	  Errormat[tp, , ] = (Errormat[tp, , ] + t(Errormat[tp, , ]))#
	Ys[tp, , ] = Reduce("+", lapply(1:1, function(p) {#
                    1 * beta[tp, p]#
                  })) + outer(theta[tp, ], theta[tp, ], "+") + UDU[[tp]] + Errormat[tp,,]#
	diag(Ys[tp,,]) = 0   #
	}#
Xnew = array(1, dim = c(Time , N, N, 1))#
set.seed(s)#
M1 = DLFM_fix(Ys, Xnew, RE = c("additive", "multiplicative"), gammapriors = c(2, 1), dist = "Exponential", avail = matrix(1, Time , N), R =2, burn = 1000, nscan = 5000, odens = 10, kappas = rep(0.001, 4))#
set.seed(s)#
M2 = DLFM_MH(Ys, Xnew, RE = c("additive", "multiplicative"), gammapriors = c(2, 1), dist = "Exponential", avail = matrix(1, Time , N), R =2, burn = 1000, nscan = 5000, odens = 10)#
}#
Degrees = vapply(1:Time, function(tp) {rowSums(Ys[tp,,])}, rep(0, N))#
p = list()#
cordata = data.frame(rbind(M1$corr[,1:3],M2$corr[,1:3]), c(rep("Indepence", 500), rep("DAME", 500)))#
colnames(cordata) = c("Lag1", "Lag2", "Lag3", "Model")#
p[[1]] = ggplot(cordata, aes(x = Lag1, fill = Model, color = Model)) + geom_histogram(position = "identity", alpha = 0.5) + geom_vline(aes(xintercept = vapply(1:1, function(l) {cor(Degrees[1:(N*(Time - l))], Degrees[(1 + N*l):(N*Time)], use = "complete")}, 0)), col = "blue", size = 1) +theme_minimal() +theme(legend.position = "bottom", legend.title = element_blank()) #
p[[2]] = ggplot(cordata, aes(x = Lag2, fill = Model, color = Model)) + geom_histogram(position = "identity", alpha = 0.5) + geom_vline(aes(xintercept = vapply(2:2, function(l) {cor(Degrees[1:(N*(Time - l))], Degrees[(1 + N*l):(N*Time)], use = "complete")}, 0)), col = "blue", size = 1)  + theme_minimal()#
p[[3]] = ggplot(cordata, aes(x = Lag3, fill = Model, color = Model)) + geom_histogram(position = "identity", alpha = 0.5) + geom_vline(aes(xintercept = vapply(3:3, function(l) {cor(Degrees[1:(N*(Time - l))], Degrees[(1 + N*l):(N*Time)], use = "complete")}, 0)), col = "blue", size = 1) +theme_minimal()+ theme(legend.position = "top")#
#marrangeGrob(p[1:3], nrow = 1, ncol = 3, top = NULL)#
g_legend<-function(a.gplot){#
  tmp <- ggplot_gtable(ggplot_build(a.gplot))#
  leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")#
  legend <- tmp$grobs[[leg]]#
  return(legend)}#
#
mylegend<-g_legend(p[[1]])#
p3 <- grid.arrange(arrangeGrob(p[[1]] + theme(legend.position="none"),#
                         p[[2]] + theme(legend.position="none"),#
                         p[[3]] + theme(legend.position="none"), nrow=1),#
             mylegend, heights=c(10, 1))
